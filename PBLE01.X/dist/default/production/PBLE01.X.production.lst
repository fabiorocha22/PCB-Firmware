gplink-1.5.0 #1285 (Sep 12 2016)
Copyright (c) 1998-2016 gputils project
Listing File Generated: 7-4-2017  20:27:40


Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_adcInit
                                           	global	_adcRead

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_adc__adcRead	code
                                           _adcRead:
                                           ;	.line	31; adc.c	int adcRead(void) {
00545c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00545e   ffe5
005460   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005462   ffd9
005464   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005466   ffe5
005468   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00546a   ffe5
00546c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00546e   ffe5
005470   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
005472   ffe5
                                           ;	.line	33; adc.c	ADCON0 |= 0b00000010; //inicia conversao
005474   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
005476   f0c2
005478   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00547a   f000
00547c   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
00547e   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
005480   f0c2
005482   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
005484   ffef
                                           _00110_DS_:
                                           ;	.line	35; adc.c	while (BitTst(ADCON0, 1)); // espera terminar a conversão;
005486   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
005488   f0c2
00548a   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00548c   f000
00548e   b200     btfsc   0x00, 0x1, 0x0   	BTFSC	r0x00, 1
005490   d7fa     bra     0x005486         	BRA	_00110_DS_
                                           ;	.line	37; adc.c	ADvalor = ADRESH; // le o resultado
005492   ee0f     lfsr    0x0, 0xfc4       	LFSR	0x00, 0xfc4
005494   f0c4
005496   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005498   f000
00549a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           ;	.line	38; adc.c	ADvalor <<= 8;
00549c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00549e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0054a0   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	39; adc.c	ADvalor += ADRESL;
0054a2   ee0f     lfsr    0x0, 0xfc3       	LFSR	0x00, 0xfc3
0054a4   f0c3
0054a6   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
0054a8   f002
0054aa   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0054ac   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0054ae   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0054b0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0054b2   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
                                           ;	.line	40; adc.c	return ADvalor;
0054b4   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
0054b6   fff3
0054b8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0054ba   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0054bc   f003
0054be   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0054c0   f002
0054c2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0054c4   f001
0054c6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0054c8   f000
0054ca   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0054cc   ffd9
0054ce   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_adc__adcInit	code
                                           _adcInit:
                                           ;	.line	23; adc.c	void adcInit(void) {
005b2e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005b30   ffe5
005b32   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005b34   ffd9
005b36   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005b38   ffe5
                                           ;	.line	24; adc.c	BitSet(TRISA, 0); //seta o bit 0 como entrada
005b3a   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
005b3c   f092
005b3e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005b40   f000
005b42   8000     bsf     0x00, 0x0, 0x0   	BSF	r0x00, 0
005b44   ee0f     lfsr    0x0, 0xf92       	LFSR	0x00, 0xf92
005b46   f092
005b48   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
005b4a   ffef
                                           ;	.line	26; adc.c	ADCON0 = 0b00000001; //seleciona o canal 0 e liga o ad
005b4c   ee0f     lfsr    0x0, 0xfc2       	LFSR	0x00, 0xfc2
005b4e   f0c2
005b50   0e01     movlw   0x01             	MOVLW	0x01
005b52   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	27; adc.c	ADCON1 = 0b00001110; //apenas AN0 é analogico, a referencia é baseada na fonte
005b54   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
005b56   f0c1
005b58   0e0e     movlw   0x0e             	MOVLW	0x0e
005b5a   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	28; adc.c	ADCON2 = 0b10101010; //FOSC /32, Alinhamento à direita e tempo de conv = 12 TAD
005b5c   ee0f     lfsr    0x0, 0xfc0       	LFSR	0x00, 0xfc0
005b5e   f0c0
005b60   0eaa     movlw   0xaa             	MOVLW	0xaa
005b62   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
005b64   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005b66   f000
005b68   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005b6a   ffd9
005b6c   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  180 (0x00b4) bytes ( 0.14%)
                                           ;           	   90 (0x005a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_kpRead
                                           	global	_kpDebounce
                                           	global	_kpInit

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4


                                           	idata
                                           _valor	db	0x00
                                           _kpDebounce_valorNovo_1_7	db	0x00
                                           _kpDebounce_valorAntigo_1_7	db	0x00


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1

                                           udata_keypad_0	udata
                                           _kpDebounce_tempo_1_7	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_keypad__kpInit	code
                                           _kpInit:
                                           ;	.line	59; keypad.c	void kpInit(void) {
005b6e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005b70   ffe5
005b72   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005b74   ffd9
005b76   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005b78   ffe5
                                           ;	.line	60; keypad.c	TRISB = 0xF0; //quatro entradas e quatro saidas
005b7a   ee0f     lfsr    0x0, 0xf93       	LFSR	0x00, 0xf93
005b7c   f093
005b7e   0ef0     movlw   0xf0             	MOVLW	0xf0
005b80   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	61; keypad.c	BitClr(INTCON2, 7); //liga pull up
005b82   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
005b84   f0f1
005b86   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005b88   f000
005b8a   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
005b8c   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
005b8e   f0f1
005b90   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
005b92   ffef
                                           ;	.line	62; keypad.c	ADCON1 = 0b00001110; //apenas AN0 é analogico, a referencia é baseada na fonte
005b94   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
005b96   f0c1
005b98   0e0e     movlw   0x0e             	MOVLW	0x0e
005b9a   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
005b9c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005b9e   f000
005ba0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005ba2   ffd9
005ba4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_keypad__kpDebounce	code
                                           _kpDebounce:
                                           ;	.line	29; keypad.c	void kpDebounce(void) {
004168   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00416a   ffe5
00416c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00416e   ffd9
004170   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004172   ffe5
004174   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004176   ffe5
004178   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00417a   ffe5
00417c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00417e   ffe5
004180   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004182   ffe5
004184   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
004186   ffe5
004188   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
00418a   ffe5
00418c   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00418e   ffe5
004190   c008     movff   0x008, 0xfe5     	MOVFF	r0x08, POSTDEC1
004192   ffe5
004194   c009     movff   0x009, 0xfe5     	MOVFF	r0x09, POSTDEC1
004196   ffe5
                                           ;	.line	35; keypad.c	for (i = 0; i < 4; i++) {
004198   6a00     clrf    0x00, 0x0        	CLRF	r0x00
00419a   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00419c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00122_DS_:
                                           ;	.line	36; keypad.c	TRISB = ~((unsigned char)1<<i);
00419e   0e01     movlw   0x01             	MOVLW	0x01
0041a0   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0041a2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0041a4   e005     bz      0x0041b0         	BZ	_00149_DS_
0041a6   6ce8     negf    0xe8, 0x0        	NEGF	WREG
0041a8   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00150_DS_:
0041aa   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
0041ac   0f01     addlw   0x01             	ADDLW	0x01
0041ae   e3fd     bnc     0x0041aa         	BNC	_00150_DS_
                                           _00149_DS_:
0041b0   1e03     comf    0x03, 0x1, 0x0   	COMF	r0x03, F
0041b2   ee0f     lfsr    0x0, 0xf93       	LFSR	0x00, 0xf93
0041b4   f093
0041b6   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
0041b8   ffef
                                           ;	.line	37; keypad.c	PORTB = ~((unsigned char)1<<i);
0041ba   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
0041bc   f081
0041be   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
0041c0   ffef
                                           ;	.line	40; keypad.c	for (j = 0; j < 2; j++) {
0041c2   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           _00120_DS_:
                                           ;	.line	41; keypad.c	if (!BitTst(PORTB, j + 4)) {
0041c4   ee0f     lfsr    0x0, 0xf81       	LFSR	0x00, 0xf81
0041c6   f081
0041c8   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
0041ca   f004
0041cc   c003     movff   0x003, 0x005     	MOVFF	r0x03, r0x05
0041ce   f005
0041d0   6a06     clrf    0x06, 0x0        	CLRF	r0x06
0041d2   0e04     movlw   0x04             	MOVLW	0x04
0041d4   2605     addwf   0x05, 0x1, 0x0   	ADDWF	r0x05, F
0041d6   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0041d8   2a06     incf    0x06, 0x1, 0x0   	INCF	r0x06, F
0041da   0e01     movlw   0x01             	MOVLW	0x01
0041dc   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
0041de   0e00     movlw   0x00             	MOVLW	0x00
0041e0   6e08     movwf   0x08, 0x0        	MOVWF	r0x08
0041e2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0041e4   e00f     bz      0x004204         	BZ	_00151_DS_
0041e6   e607     bn      0x0041f6         	BN	_00154_DS_
0041e8   6ce8     negf    0xe8, 0x0        	NEGF	WREG
0041ea   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00152_DS_:
0041ec   3607     rlcf    0x07, 0x1, 0x0   	RLCF	r0x07, F
0041ee   3608     rlcf    0x08, 0x1, 0x0   	RLCF	r0x08, F
0041f0   0f01     addlw   0x01             	ADDLW	0x01
0041f2   e3fc     bnc     0x0041ec         	BNC	_00152_DS_
0041f4   d007     bra     0x004204         	BRA	_00151_DS_
                                           _00154_DS_:
0041f6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00153_DS_:
0041f8   be08     btfsc   0x08, 0x7, 0x0   	BTFSC	r0x08, 7
0041fa   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
0041fc   3208     rrcf    0x08, 0x1, 0x0   	RRCF	r0x08, F
0041fe   3207     rrcf    0x07, 0x1, 0x0   	RRCF	r0x07, F
004200   0f01     addlw   0x01             	ADDLW	0x01
004202   e3fa     bnc     0x0041f8         	BNC	_00153_DS_
                                           _00151_DS_:
004204   6a09     clrf    0x09, 0x0        	CLRF	r0x09
004206   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004208   1607     andwf   0x07, 0x1, 0x0   	ANDWF	r0x07, F
00420a   5009     movf    0x09, 0x0, 0x0   	MOVF	r0x09, W
00420c   1608     andwf   0x08, 0x1, 0x0   	ANDWF	r0x08, F
00420e   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
004210   1008     iorwf   0x08, 0x0, 0x0   	IORWF	r0x08, W
004212   e110     bnz     0x004234         	BNZ	_00111_DS_
                                           ;	.line	42; keypad.c	BitSet(valorNovo, (i * 2) + j);
004214   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004216   2402     addwf   0x02, 0x0, 0x0   	ADDWF	r0x02, W
004218   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00421a   0e01     movlw   0x01             	MOVLW	0x01
00421c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00421e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004220   e005     bz      0x00422c         	BZ	_00155_DS_
004222   6ce8     negf    0xe8, 0x0        	NEGF	WREG
004224   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00156_DS_:
004226   3605     rlcf    0x05, 0x1, 0x0   	RLCF	r0x05, F
004228   0f01     addlw   0x01             	ADDLW	0x01
00422a   e3fd     bnc     0x004226         	BNC	_00156_DS_
                                           _00155_DS_:
00422c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00422e   0102     movlb   0x2              	BANKSEL	_kpDebounce_valorNovo_1_7
004230   1301     iorwf   0x01, 0x1, 0x1   	IORWF	_kpDebounce_valorNovo_1_7, F, B
004232   d011     bra     0x004256         	BRA	_00121_DS_
                                           _00111_DS_:
                                           ;	.line	44; keypad.c	BitClr(valorNovo, (i * 2) + j);
004234   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004236   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
004238   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00423a   0e01     movlw   0x01             	MOVLW	0x01
00423c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00423e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004240   e005     bz      0x00424c         	BZ	_00158_DS_
004242   6ce8     negf    0xe8, 0x0        	NEGF	WREG
004244   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00159_DS_:
004246   3605     rlcf    0x05, 0x1, 0x0   	RLCF	r0x05, F
004248   0f01     addlw   0x01             	ADDLW	0x01
00424a   e3fd     bnc     0x004246         	BNC	_00159_DS_
                                           _00158_DS_:
00424c   1c05     comf    0x05, 0x0, 0x0   	COMF	r0x05, W
00424e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
004250   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004252   0102     movlb   0x2              	BANKSEL	_kpDebounce_valorNovo_1_7
004254   1701     andwf   0x01, 0x1, 0x1   	ANDWF	_kpDebounce_valorNovo_1_7, F, B
                                           _00121_DS_:
                                           ;	.line	40; keypad.c	for (j = 0; j < 2; j++) {
004256   2a03     incf    0x03, 0x1, 0x0   	INCF	r0x03, F
004258   0e02     movlw   0x02             	MOVLW	0x02
00425a   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
00425c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00425e   d7b2     bra     0x0041c4         	BRA	_00120_DS_
                                           ;	.line	35; keypad.c	for (i = 0; i < 4; i++) {
004260   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004262   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004264   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
004266   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
004268   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00426a   0e04     movlw   0x04             	MOVLW	0x04
00426c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
00426e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
004270   d796     bra     0x00419e         	BRA	_00122_DS_
004272   0102     movlb   0x2              	BANKSEL	_kpDebounce_valorAntigo_1_7
                                           ;	.line	48; keypad.c	if (valorAntigo == valorNovo) {
004274   5102     movf    0x02, 0x0, 0x1   	MOVF	_kpDebounce_valorAntigo_1_7, W, B
004276   0102     movlb   0x2              	BANKSEL	_kpDebounce_valorNovo_1_7
004278   1901     xorwf   0x01, 0x0, 0x1   	XORWF	_kpDebounce_valorNovo_1_7, W, B
00427a   e103     bnz     0x004282         	BNZ	_00116_DS_
                                           _00164_DS_:
00427c   0100     movlb   0x0              	BANKSEL	_kpDebounce_tempo_1_7
                                           ;	.line	49; keypad.c	tempo--;
00427e   078a     decf    0x8a, 0x1, 0x1   	DECF	_kpDebounce_tempo_1_7, F, B
004280   d005     bra     0x00428c         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	51; keypad.c	tempo = 10;
004282   0e0a     movlw   0x0a             	MOVLW	0x0a
004284   0100     movlb   0x0              	BANKSEL	_kpDebounce_tempo_1_7
004286   6f8a     movwf   0x8a, 0x1        	MOVWF	_kpDebounce_tempo_1_7, B
                                           ;	.line	52; keypad.c	valorAntigo = valorNovo;
004288   c201     movff   0x201, 0x202     	MOVFF	_kpDebounce_valorNovo_1_7, _kpDebounce_valorAntigo_1_7
00428a   f202
                                           _00117_DS_:
00428c   0100     movlb   0x0              	BANKSEL	_kpDebounce_tempo_1_7
                                           ;	.line	54; keypad.c	if (tempo == 0) {
00428e   518a     movf    0x8a, 0x0, 0x1   	MOVF	_kpDebounce_tempo_1_7, W, B
004290   e102     bnz     0x004296         	BNZ	_00124_DS_
                                           ;	.line	55; keypad.c	valor = valorAntigo;
004292   c202     movff   0x202, 0x200     	MOVFF	_kpDebounce_valorAntigo_1_7, _valor
004294   f200
                                           _00124_DS_:
004296   cfe4     movff   0xfe4, 0x009     	MOVFF	PREINC1, r0x09
004298   f009
00429a   cfe4     movff   0xfe4, 0x008     	MOVFF	PREINC1, r0x08
00429c   f008
00429e   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
0042a0   f007
0042a2   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
0042a4   f006
0042a6   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
0042a8   f005
0042aa   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0042ac   f004
0042ae   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0042b0   f003
0042b2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0042b4   f002
0042b6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0042b8   f001
0042ba   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0042bc   f000
0042be   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0042c0   ffd9
0042c2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_keypad__kpRead	code
                                           _kpRead:
                                           ;	.line	25; keypad.c	unsigned char kpRead(void) {
005ede   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005ee0   ffe5
005ee2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005ee4   ffd9
005ee6   0102     movlb   0x2              	BANKSEL	_valor
                                           ;	.line	26; keypad.c	return valor;
005ee8   5100     movf    0x00, 0x0, 0x1   	MOVF	_valor, W, B
005eea   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005eec   ffd9
005eee   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  422 (0x01a6) bytes ( 0.32%)
                                           ;           	  211 (0x00d3) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.08%)
                                           ; access size:	   10 (0x000a) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_Delay40us
                                           	global	_Delay2ms
                                           	global	_lcdCommand
                                           	global	_lcdData
                                           	global	_lcdInt
                                           	global	_lcdString
                                           	global	_lcdInit

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	__divsint
                                           	extern	__modsint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lcd__lcdInit	code
                                           _lcdInit:
                                           ;	.line	92; lcd.c	void lcdInit(void) {
004c6e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004c70   ffe5
004c72   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004c74   ffd9
004c76   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004c78   ffe5
                                           ;	.line	96; lcd.c	Delay2ms();
004c7a   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
004c7c   f02d
                                           ;	.line	97; lcd.c	Delay2ms();
004c7e   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
004c80   f02d
                                           ;	.line	98; lcd.c	Delay2ms();
004c82   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
004c84   f02d
                                           ;	.line	99; lcd.c	Delay2ms();
004c86   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
004c88   f02d
                                           ;	.line	100; lcd.c	Delay2ms();
004c8a   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
004c8c   f02d
                                           ;	.line	101; lcd.c	Delay2ms();
004c8e   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
004c90   f02d
                                           ;	.line	104; lcd.c	BitClr(TRISE, RS); //RS
004c92   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
004c94   f096
004c96   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
004c98   f000
004c9a   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
004c9c   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
004c9e   f096
004ca0   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
004ca2   ffef
                                           ;	.line	105; lcd.c	BitClr(TRISE, EN); //EN
004ca4   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
004ca6   f096
004ca8   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
004caa   f000
004cac   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
004cae   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
004cb0   f096
004cb2   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
004cb4   ffef
                                           ;	.line	106; lcd.c	BitClr(TRISE, RW); //RW
004cb6   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
004cb8   f096
004cba   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
004cbc   f000
004cbe   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
004cc0   ee0f     lfsr    0x0, 0xf96       	LFSR	0x00, 0xf96
004cc2   f096
004cc4   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
004cc6   ffef
                                           ;	.line	107; lcd.c	TRISD = 0x00; //dados
004cc8   ee0f     lfsr    0x0, 0xf95       	LFSR	0x00, 0xf95
004cca   f095
004ccc   0e00     movlw   0x00             	MOVLW	0x00
004cce   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	108; lcd.c	ADCON1 = 0b00001110; //apenas
004cd0   ee0f     lfsr    0x0, 0xfc1       	LFSR	0x00, 0xfc1
004cd2   f0c1
004cd4   0e0e     movlw   0x0e             	MOVLW	0x0e
004cd6   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	111; lcd.c	lcdCommand(0x38); //0b0011 1000 8bits, 2 linhas, 5x8
004cd8   0e38     movlw   0x38             	MOVLW	0x38
004cda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004cdc   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
004cde   f028
004ce0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	112; lcd.c	lcdCommand(0x0F); //0b0000 1111 display e cursor on, com blink
004ce2   0e0f     movlw   0x0f             	MOVLW	0x0f
004ce4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004ce6   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
004ce8   f028
004cea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	113; lcd.c	lcdCommand(0x06); //0b0000 0110 modo incremental
004cec   0e06     movlw   0x06             	MOVLW	0x06
004cee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004cf0   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
004cf2   f028
004cf4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	114; lcd.c	lcdCommand(0x03); //0b0000 0011 zera variáveis internas
004cf6   0e03     movlw   0x03             	MOVLW	0x03
004cf8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004cfa   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
004cfc   f028
004cfe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	115; lcd.c	lcdCommand(0x01); //0b0000 0001 Limpa a tela
004d00   0e01     movlw   0x01             	MOVLW	0x01
004d02   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004d04   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
004d06   f028
004d08   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004d0a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004d0c   f000
004d0e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004d10   ffd9
004d12   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__lcdString	code
                                           _lcdString:
                                           ;	.line	84; lcd.c	void lcdString(char msg[]) {
004efc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004efe   ffe5
004f00   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004f02   ffd9
004f04   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004f06   ffe5
004f08   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004f0a   ffe5
004f0c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004f0e   ffe5
004f10   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
004f12   ffe5
004f14   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004f16   ffe5
004f18   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
004f1a   ffe5
004f1c   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
004f1e   ffe5
004f20   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
004f22   ffe5
004f24   0e02     movlw   0x02             	MOVLW	0x02
004f26   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004f28   f000
004f2a   0e03     movlw   0x03             	MOVLW	0x03
004f2c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004f2e   f001
004f30   0e04     movlw   0x04             	MOVLW	0x04
004f32   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
004f34   f002
                                           ;	.line	86; lcd.c	while (msg[i]!=0) {
004f36   6a03     clrf    0x03, 0x0        	CLRF	r0x03
004f38   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00152_DS_:
004f3a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004f3c   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
004f3e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
004f40   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004f42   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
004f44   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
004f46   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
004f48   be04     btfsc   0x04, 0x7, 0x0   	BTFSC	r0x04, 7
004f4a   68e8     setf    0xe8, 0x0        	SETF	WREG
004f4c   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
004f4e   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
004f50   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
004f52   ffe9
004f54   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
004f56   fff3
004f58   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
004f5a   ecaa     call    0x005d54, 0x0    	CALL	__gptrget1
004f5c   f02e
004f5e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
004f60   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
004f62   e008     bz      0x004f74         	BZ	_00155_DS_
                                           ;	.line	87; lcd.c	lcdData(msg[i]);
004f64   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
004f66   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004f68   ecae     call    0x00515c, 0x0    	CALL	_lcdData
004f6a   f028
004f6c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	88; lcd.c	i++;
004f6e   4a03     infsnz  0x03, 0x1, 0x0   	INFSNZ	r0x03, F
004f70   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
004f72   d7e3     bra     0x004f3a         	BRA	_00152_DS_
                                           _00155_DS_:
004f74   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
004f76   f007
004f78   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
004f7a   f006
004f7c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
004f7e   f005
004f80   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
004f82   f004
004f84   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004f86   f003
004f88   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004f8a   f002
004f8c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004f8e   f001
004f90   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004f92   f000
004f94   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004f96   ffd9
004f98   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__lcdInt	code
                                           _lcdInt:
                                           ;	.line	71; lcd.c	void lcdInt(int val) {
004754   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004756   ffe5
004758   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00475a   ffd9
00475c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00475e   ffe5
004760   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004762   ffe5
004764   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004766   ffe5
004768   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00476a   ffe5
00476c   0e02     movlw   0x02             	MOVLW	0x02
00476e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004770   f000
004772   0e03     movlw   0x03             	MOVLW	0x03
004774   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004776   f001
                                           ;	.line	72; lcd.c	if (val < 0) {
004778   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
00477a   ae01     btfss   0x01, 0x7, 0x0   	BTFSS	r0x01, 7
00477c   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
00477e   e309     bnc     0x004792         	BNC	_00146_DS_
                                           ;	.line	73; lcd.c	val = val * (-1);
004780   1e01     comf    0x01, 0x1, 0x0   	COMF	r0x01, F
004782   6c00     negf    0x00, 0x0        	NEGF	r0x00
004784   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
004786   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           ;	.line	74; lcd.c	lcdData('-');
004788   0e2d     movlw   0x2d             	MOVLW	0x2d
00478a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00478c   ecae     call    0x00515c, 0x0    	CALL	_lcdData
00478e   f028
004790   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00146_DS_:
                                           ;	.line	79; lcd.c	lcdData((val / 10) % 10 + 48);
004792   0e00     movlw   0x00             	MOVLW	0x00
004794   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004796   0e0a     movlw   0x0a             	MOVLW	0x0a
004798   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00479a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00479c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00479e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0047a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047a2   ecf5     call    0x0043ea, 0x0    	CALL	__divsint
0047a4   f021
0047a6   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0047a8   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0047aa   f003
0047ac   0e04     movlw   0x04             	MOVLW	0x04
0047ae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0047b0   0e00     movlw   0x00             	MOVLW	0x00
0047b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047b4   0e0a     movlw   0x0a             	MOVLW	0x0a
0047b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047b8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0047ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047bc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0047be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047c0   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
0047c2   f022
0047c4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0047c6   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0047c8   f003
0047ca   0e04     movlw   0x04             	MOVLW	0x04
0047cc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0047ce   0e30     movlw   0x30             	MOVLW	0x30
0047d0   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0047d2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0047d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047d6   ecae     call    0x00515c, 0x0    	CALL	_lcdData
0047d8   f028
0047da   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	80; lcd.c	lcdData((val / 1) % 10 + 48);
0047dc   0e00     movlw   0x00             	MOVLW	0x00
0047de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047e0   0e0a     movlw   0x0a             	MOVLW	0x0a
0047e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047e4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0047e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0047ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0047ec   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
0047ee   f022
0047f0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0047f2   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0047f4   f001
0047f6   0e04     movlw   0x04             	MOVLW	0x04
0047f8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0047fa   0e30     movlw   0x30             	MOVLW	0x30
0047fc   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0047fe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004800   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004802   ecae     call    0x00515c, 0x0    	CALL	_lcdData
004804   f028
004806   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004808   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00480a   f003
00480c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00480e   f002
004810   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004812   f001
004814   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004816   f000
004818   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00481a   ffd9
00481c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__lcdData	code
                                           _lcdData:
                                           ;	.line	56; lcd.c	void lcdData(unsigned char valor) {
00515c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00515e   ffe5
005160   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005162   ffd9
005164   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005166   ffe5
005168   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00516a   ffe5
00516c   0e02     movlw   0x02             	MOVLW	0x02
00516e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005170   f000
                                           ;	.line	57; lcd.c	BitSet(PORTE, RS); //dados
005172   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
005174   f084
005176   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
005178   f001
00517a   8001     bsf     0x01, 0x0, 0x0   	BSF	r0x01, 0
00517c   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00517e   f084
005180   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
005182   ffef
                                           ;	.line	58; lcd.c	BitClr(PORTE, RW); // habilita escrita
005184   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
005186   f084
005188   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00518a   f001
00518c   9401     bcf     0x01, 0x2, 0x0   	BCF	r0x01, 2
00518e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
005190   f084
005192   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
005194   ffef
                                           ;	.line	60; lcd.c	PORTD = valor;
005196   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
005198   f083
00519a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00519c   ffef
                                           ;	.line	62; lcd.c	BitSet(PORTE, EN); //Pulso no Enable
00519e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0051a0   f084
0051a2   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0051a4   f000
0051a6   8200     bsf     0x00, 0x1, 0x0   	BSF	r0x00, 1
0051a8   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0051aa   f084
0051ac   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0051ae   ffef
                                           ;	.line	63; lcd.c	BitClr(PORTE, EN);
0051b0   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0051b2   f084
0051b4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0051b6   f000
0051b8   9200     bcf     0x00, 0x1, 0x0   	BCF	r0x00, 1
0051ba   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0051bc   f084
0051be   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0051c0   ffef
                                           ;	.line	65; lcd.c	BitClr(PORTE, RS); //deixa em nivel baixo por causa do display de 7 seg
0051c2   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0051c4   f084
0051c6   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0051c8   f000
0051ca   9000     bcf     0x00, 0x0, 0x0   	BCF	r0x00, 0
0051cc   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0051ce   f084
0051d0   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0051d2   ffef
                                           ;	.line	66; lcd.c	Delay40us();
0051d4   ec1d     call    0x005c3a, 0x0    	CALL	_Delay40us
0051d6   f02e
0051d8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0051da   f001
0051dc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0051de   f000
0051e0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0051e2   ffd9
0051e4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__lcdCommand	code
                                           _lcdCommand:
                                           ;	.line	40; lcd.c	void lcdCommand(unsigned char cmd) {
0051e6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0051e8   ffe5
0051ea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0051ec   ffd9
0051ee   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0051f0   ffe5
0051f2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0051f4   ffe5
0051f6   0e02     movlw   0x02             	MOVLW	0x02
0051f8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0051fa   f000
                                           ;	.line	41; lcd.c	BitClr(PORTE, RS); //comando
0051fc   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
0051fe   f084
005200   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
005202   f001
005204   9001     bcf     0x01, 0x0, 0x0   	BCF	r0x01, 0
005206   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
005208   f084
00520a   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00520c   ffef
                                           ;	.line	42; lcd.c	BitClr(PORTE, RW); // habilita escrita
00520e   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
005210   f084
005212   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
005214   f001
005216   9401     bcf     0x01, 0x2, 0x0   	BCF	r0x01, 2
005218   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00521a   f084
00521c   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00521e   ffef
                                           ;	.line	44; lcd.c	PORTD = cmd;
005220   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
005222   f083
005224   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
005226   ffef
                                           ;	.line	46; lcd.c	BitSet(PORTE, EN); //Pulso no Enable
005228   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00522a   f084
00522c   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
00522e   f001
005230   8201     bsf     0x01, 0x1, 0x0   	BSF	r0x01, 1
005232   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
005234   f084
005236   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
005238   ffef
                                           ;	.line	47; lcd.c	BitClr(PORTE, EN);
00523a   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
00523c   f084
00523e   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
005240   f001
005242   9201     bcf     0x01, 0x1, 0x0   	BCF	r0x01, 1
005244   ee0f     lfsr    0x0, 0xf84       	LFSR	0x00, 0xf84
005246   f084
005248   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00524a   ffef
                                           ;	.line	49; lcd.c	if (BitTst(cmd, 1)) { //o comando de reset exige mais tempo
00524c   a200     btfss   0x00, 0x1, 0x0   	BTFSS	r0x00, 1
00524e   d003     bra     0x005256         	BRA	_00124_DS_
                                           ;	.line	50; lcd.c	Delay2ms();
005250   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
005252   f02d
005254   d002     bra     0x00525a         	BRA	_00126_DS_
                                           _00124_DS_:
                                           ;	.line	52; lcd.c	Delay40us();
005256   ec1d     call    0x005c3a, 0x0    	CALL	_Delay40us
005258   f02e
                                           _00126_DS_:
00525a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00525c   f001
00525e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005260   f000
005262   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005264   ffd9
005266   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__Delay2ms	code
                                           _Delay2ms:
                                           ;	.line	33; lcd.c	void Delay2ms(void) {
005ba6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005ba8   ffe5
005baa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005bac   ffd9
005bae   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005bb0   ffe5
005bb2   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005bb4   ffe5
                                           ;	.line	35; lcd.c	for (i = 0; i < 50; i++) {
005bb6   0e32     movlw   0x32             	MOVLW	0x32
005bb8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00117_DS_:
                                           ;	.line	36; lcd.c	Delay40us();
005bba   ec1d     call    0x005c3a, 0x0    	CALL	_Delay40us
005bbc   f02e
005bbe   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
005bc0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005bc2   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
005bc4   f000
                                           ;	.line	35; lcd.c	for (i = 0; i < 50; i++) {
005bc6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005bc8   e1f8     bnz     0x005bba         	BNZ	_00117_DS_
005bca   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005bcc   f001
005bce   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005bd0   f000
005bd2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005bd4   ffd9
005bd6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_lcd__Delay40us	code
                                           _Delay40us:
                                           ;	.line	28; lcd.c	void Delay40us(void) {
005c3a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005c3c   ffe5
005c3e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005c40   ffd9
005c42   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005c44   ffe5
005c46   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005c48   ffe5
                                           ;	.line	30; lcd.c	for (i = 0; i < 10; i++); //valor aproximado
005c4a   0e0a     movlw   0x0a             	MOVLW	0x0a
005c4c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00108_DS_:
005c4e   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
005c50   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005c52   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
005c54   f000
005c56   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005c58   e1fa     bnz     0x005c4e         	BNZ	_00108_DS_
005c5a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005c5c   f001
005c5e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005c60   f000
005c62   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005c64   ffd9
005c66   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  890 (0x037a) bytes ( 0.68%)
                                           ;           	  445 (0x01bd) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    8 (0x0008) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_initLed
                                           	global	_ledON
                                           	global	_ledOFF

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_led__ledOFF	code
                                           _ledOFF:
                                           ;	.line	19; led.c	void ledOFF (int x){
0052ea   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0052ec   ffe5
0052ee   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0052f0   ffd9
0052f2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0052f4   ffe5
0052f6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0052f8   ffe5
0052fa   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0052fc   ffe5
0052fe   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
005300   ffe5
005302   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
005304   ffe5
005306   0e02     movlw   0x02             	MOVLW	0x02
005308   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00530a   f000
00530c   0e03     movlw   0x03             	MOVLW	0x03
00530e   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
005310   f001
                                           ;	.line	20; led.c	BitClr(PORTD,x);
005312   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
005314   f083
005316   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
005318   f002
00531a   0e01     movlw   0x01             	MOVLW	0x01
00531c   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00531e   6a04     clrf    0x04, 0x0        	CLRF	r0x04
005320   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005322   e00d     bz      0x00533e         	BZ	_00122_DS_
005324   e607     bn      0x005334         	BN	_00125_DS_
005326   6ce8     negf    0xe8, 0x0        	NEGF	WREG
005328   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00123_DS_:
00532a   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
00532c   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
00532e   0f01     addlw   0x01             	ADDLW	0x01
005330   e3fc     bnc     0x00532a         	BNC	_00123_DS_
005332   d005     bra     0x00533e         	BRA	_00122_DS_
                                           _00125_DS_:
005334   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00124_DS_:
005336   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
005338   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
00533a   0f01     addlw   0x01             	ADDLW	0x01
00533c   e3fc     bnc     0x005336         	BNC	_00124_DS_
                                           _00122_DS_:
00533e   1c03     comf    0x03, 0x0, 0x0   	COMF	r0x03, W
005340   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005342   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005344   1602     andwf   0x02, 0x1, 0x0   	ANDWF	r0x02, F
005346   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
005348   f083
00534a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00534c   ffef
00534e   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
005350   f004
005352   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
005354   f003
005356   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
005358   f002
00535a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00535c   f001
00535e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005360   f000
005362   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005364   ffd9
005366   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_led__ledON	code
                                           _ledON:
                                           ;	.line	14; led.c	void ledON (int x){
005368   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00536a   ffe5
00536c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00536e   ffd9
005370   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005372   ffe5
005374   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005376   ffe5
005378   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00537a   ffe5
00537c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00537e   ffe5
005380   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
005382   ffe5
005384   0e02     movlw   0x02             	MOVLW	0x02
005386   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005388   f000
00538a   0e03     movlw   0x03             	MOVLW	0x03
00538c   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00538e   f001
                                           ;	.line	15; led.c	BitSet(PORTD,x);
005390   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
005392   f083
005394   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
005396   f002
005398   0e01     movlw   0x01             	MOVLW	0x01
00539a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00539c   6a04     clrf    0x04, 0x0        	CLRF	r0x04
00539e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0053a0   e00d     bz      0x0053bc         	BZ	_00112_DS_
0053a2   e607     bn      0x0053b2         	BN	_00115_DS_
0053a4   6ce8     negf    0xe8, 0x0        	NEGF	WREG
0053a6   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00113_DS_:
0053a8   3603     rlcf    0x03, 0x1, 0x0   	RLCF	r0x03, F
0053aa   3604     rlcf    0x04, 0x1, 0x0   	RLCF	r0x04, F
0053ac   0f01     addlw   0x01             	ADDLW	0x01
0053ae   e3fc     bnc     0x0053a8         	BNC	_00113_DS_
0053b0   d005     bra     0x0053bc         	BRA	_00112_DS_
                                           _00115_DS_:
0053b2   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
                                           _00114_DS_:
0053b4   3204     rrcf    0x04, 0x1, 0x0   	RRCF	r0x04, F
0053b6   3203     rrcf    0x03, 0x1, 0x0   	RRCF	r0x03, F
0053b8   0f01     addlw   0x01             	ADDLW	0x01
0053ba   e3fc     bnc     0x0053b4         	BNC	_00114_DS_
                                           _00112_DS_:
0053bc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0053be   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0053c0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0053c2   1202     iorwf   0x02, 0x1, 0x0   	IORWF	r0x02, F
0053c4   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
0053c6   f083
0053c8   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
0053ca   ffef
0053cc   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0053ce   f004
0053d0   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0053d2   f003
0053d4   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0053d6   f002
0053d8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0053da   f001
0053dc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0053de   f000
0053e0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0053e2   ffd9
0053e4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_led__initLed	code
                                           _initLed:
                                           ;	.line	9; led.c	void initLed (void){
005d76   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005d78   ffe5
005d7a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005d7c   ffd9
                                           ;	.line	10; led.c	TRISD = 0x00;
005d7e   ee0f     lfsr    0x0, 0xf95       	LFSR	0x00, 0xf95
005d80   f095
005d82   0e00     movlw   0x00             	MOVLW	0x00
005d84   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	11; led.c	PORTD = 0xFF;
005d86   ee0f     lfsr    0x0, 0xf83       	LFSR	0x00, 0xf83
005d88   f083
005d8a   0eff     movlw   0xff             	MOVLW	0xff
005d8c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
005d8e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005d90   ffd9
005d92   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  282 (0x011a) bytes ( 0.22%)
                                           ;           	  141 (0x008d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    5 (0x0005) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec
                                           	CONFIG	MCLRE=ON
                                           	CONFIG	OSC=HS
                                           	CONFIG	WDT=OFF
                                           	CONFIG	LVP=OFF
                                           	CONFIG	DEBUG=OFF
                                           	CONFIG	WDTPS=1


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_main

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_timerWait
                                           	extern	_timerReset
                                           	extern	_timerInit
                                           	extern	_lcdInit
                                           	extern	_kpDebounce
                                           	extern	_kpInit
                                           	extern	_eventInit
                                           	extern	_varInit
                                           	extern	_getTime
                                           	extern	_smLoop
                                           	extern	_outputInit
                                           	extern	_ht1380write
                                           	extern	_rtcPutSeconds
                                           	extern	_rtcPutMinutes
                                           	extern	_rtcPutHours
                                           	extern	_rtcPutDate
                                           	extern	_rtcPutMonth
                                           	extern	_rtcPutDay
                                           	extern	_rtcPutYear
                                           	extern	_rtcInit

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1

                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	17; main.c	kpInit();
004f9a   ecb7     call    0x005b6e, 0x0    	CALL	_kpInit
004f9c   f02d
                                           ;	.line	18; main.c	lcdInit();
004f9e   ec37     call    0x004c6e, 0x0    	CALL	_lcdInit
004fa0   f026
                                           ;	.line	19; main.c	timerInit();
004fa2   ec05     call    0x005c0a, 0x0    	CALL	_timerInit
004fa4   f02e
                                           ;	.line	20; main.c	varInit();
004fa6   ec42     call    0x004684, 0x0    	CALL	_varInit
004fa8   f023
                                           ;	.line	21; main.c	eventInit();
004faa   ecfe     call    0x005dfc, 0x0    	CALL	_eventInit
004fac   f02e
                                           ;	.line	22; main.c	outputInit();
004fae   ecf4     call    0x0037e8, 0x0    	CALL	_outputInit
004fb0   f01b
                                           ;	.line	23; main.c	rtcInit();
004fb2   eca0     call    0x005940, 0x0    	CALL	_rtcInit
004fb4   f02c
                                           ;	.line	25; main.c	ht1380write(7, 0); //liga relógio do RTC
004fb6   0e00     movlw   0x00             	MOVLW	0x00
004fb8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004fba   0e07     movlw   0x07             	MOVLW	0x07
004fbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004fbe   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
004fc0   f024
004fc2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
004fc4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	26; main.c	rtcPutSeconds(0);
004fc6   0e00     movlw   0x00             	MOVLW	0x00
004fc8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004fca   ece2     call    0x0057c4, 0x0    	CALL	_rtcPutSeconds
004fcc   f02b
004fce   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	27; main.c	rtcPutMinutes(0);
004fd0   0e00     movlw   0x00             	MOVLW	0x00
004fd2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004fd4   ecad     call    0x00575a, 0x0    	CALL	_rtcPutMinutes
004fd6   f02b
004fd8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	28; main.c	rtcPutHours(0);
004fda   0e00     movlw   0x00             	MOVLW	0x00
004fdc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004fde   ec78     call    0x0056f0, 0x0    	CALL	_rtcPutHours
004fe0   f02b
004fe2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	29; main.c	rtcPutDate(1);
004fe4   0e01     movlw   0x01             	MOVLW	0x01
004fe6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004fe8   ec43     call    0x005686, 0x0    	CALL	_rtcPutDate
004fea   f02b
004fec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	30; main.c	rtcPutMonth(1);
004fee   0e01     movlw   0x01             	MOVLW	0x01
004ff0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004ff2   ec0e     call    0x00561c, 0x0    	CALL	_rtcPutMonth
004ff4   f02b
004ff6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	31; main.c	rtcPutYear(17);
004ff8   0e11     movlw   0x11             	MOVLW	0x11
004ffa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004ffc   ecd9     call    0x0055b2, 0x0    	CALL	_rtcPutYear
004ffe   f02a
005000   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	32; main.c	rtcPutDay(4);
005002   0e04     movlw   0x04             	MOVLW	0x04
005004   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005006   ec4b     call    0x005c96, 0x0    	CALL	_rtcPutDay
005008   f02e
00500a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00106_DS_:
                                           ;	.line	35; main.c	timerReset(getTime());
00500c   ec5a     call    0x005eb4, 0x0    	CALL	_getTime
00500e   f02f
005010   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005012   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
005014   f001
005016   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005018   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00501a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00501c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00501e   ec74     call    0x0048e8, 0x0    	CALL	_timerReset
005020   f024
005022   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005024   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	39; main.c	kpDebounce();
005026   ecb4     call    0x004168, 0x0    	CALL	_kpDebounce
005028   f020
                                           ;	.line	42; main.c	smLoop();
00502a   ec22     call    0x002444, 0x0    	CALL	_smLoop
00502c   f012
                                           ;	.line	44; main.c	timerWait();
00502e   ec99     call    0x005d32, 0x0    	CALL	_timerWait
005030   f02e
005032   d7ec     bra     0x00500c         	BRA	_00106_DS_
005034   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  156 (0x009c) bytes ( 0.12%)
                                           ;           	   78 (0x004e) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    2 (0x0002) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_rtcInit
                                           	global	_ht1380write
                                           	global	_ht1380read
                                           	global	_rtcSetDateTime
                                           	global	_rtcGetSeconds
                                           	global	_rtcGetMinutes
                                           	global	_rtcGetHours
                                           	global	_rtcGetDate
                                           	global	_rtcGetMonth
                                           	global	_rtcGetYear
                                           	global	_rtcGetDay
                                           	global	_rtcPutSeconds
                                           	global	_rtcPutMinutes
                                           	global	_rtcPutHours
                                           	global	_rtcPutDate
                                           	global	_rtcPutMonth
                                           	global	_rtcPutDay
                                           	global	_rtcPutYear
                                           	global	_de
                                           	global	_rtcStart
                                           	global	_writeByte
                                           	global	_readByte

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__moduchar
                                           	extern	__divuchar

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1

                                           udata_rtc_0	udata
                                           _de	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_rtc__rtcPutYear	code
                                           _rtcPutYear:
                                           ;	.line	228; rtc.c	void rtcPutYear(unsigned char year) {
0055b2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0055b4   ffe5
0055b6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0055b8   ffd9
0055ba   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0055bc   ffe5
0055be   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0055c0   ffe5
0055c2   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0055c4   ffe5
0055c6   0e02     movlw   0x02             	MOVLW	0x02
0055c8   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0055ca   f000
                                           ;	.line	229; rtc.c	ht1380write(6, (year % 10) | ((year / 10) << 4));
0055cc   0e0a     movlw   0x0a             	MOVLW	0x0a
0055ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0055d0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0055d2   ffe5
0055d4   ec68     call    0x0054d0, 0x0    	CALL	__moduchar
0055d6   f02a
0055d8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0055da   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0055dc   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0055de   0e0a     movlw   0x0a             	MOVLW	0x0a
0055e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0055e2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0055e4   ffe5
0055e6   ecf3     call    0x0053e6, 0x0    	CALL	__divuchar
0055e8   f029
0055ea   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0055ec   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0055ee   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0055f0   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0055f2   0bf0     andlw   0xf0             	ANDLW	0xf0
0055f4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0055f6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0055f8   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0055fa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0055fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0055fe   0e06     movlw   0x06             	MOVLW	0x06
005600   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005602   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005604   f024
005606   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005608   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00560a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00560c   f002
00560e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005610   f001
005612   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005614   f000
005616   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005618   ffd9
00561a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutDay	code
                                           _rtcPutDay:
                                           ;	.line	224; rtc.c	void rtcPutDay(unsigned char day) {
005c96   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005c98   ffe5
005c9a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005c9c   ffd9
005c9e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005ca0   ffe5
005ca2   0e02     movlw   0x02             	MOVLW	0x02
005ca4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005ca6   f000
                                           ;	.line	225; rtc.c	ht1380write(5, day);
005ca8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005caa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005cac   0e05     movlw   0x05             	MOVLW	0x05
005cae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005cb0   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005cb2   f024
005cb4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005cb6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005cb8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005cba   f000
005cbc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005cbe   ffd9
005cc0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutMonth	code
                                           _rtcPutMonth:
                                           ;	.line	220; rtc.c	void rtcPutMonth(unsigned char month) {
00561c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00561e   ffe5
005620   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005622   ffd9
005624   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005626   ffe5
005628   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00562a   ffe5
00562c   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00562e   ffe5
005630   0e02     movlw   0x02             	MOVLW	0x02
005632   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005634   f000
                                           ;	.line	221; rtc.c	ht1380write(4, (month % 10) | ((month / 10) << 4));
005636   0e0a     movlw   0x0a             	MOVLW	0x0a
005638   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00563a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00563c   ffe5
00563e   ec68     call    0x0054d0, 0x0    	CALL	__moduchar
005640   f02a
005642   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005644   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005646   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005648   0e0a     movlw   0x0a             	MOVLW	0x0a
00564a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00564c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00564e   ffe5
005650   ecf3     call    0x0053e6, 0x0    	CALL	__divuchar
005652   f029
005654   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005656   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005658   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00565a   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
00565c   0bf0     andlw   0xf0             	ANDLW	0xf0
00565e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
005660   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
005662   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
005664   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005666   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005668   0e04     movlw   0x04             	MOVLW	0x04
00566a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00566c   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
00566e   f024
005670   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005672   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005674   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
005676   f002
005678   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00567a   f001
00567c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00567e   f000
005680   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005682   ffd9
005684   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutDate	code
                                           _rtcPutDate:
                                           ;	.line	216; rtc.c	void rtcPutDate(unsigned char date) {
005686   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005688   ffe5
00568a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00568c   ffd9
00568e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005690   ffe5
005692   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005694   ffe5
005696   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
005698   ffe5
00569a   0e02     movlw   0x02             	MOVLW	0x02
00569c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00569e   f000
                                           ;	.line	217; rtc.c	ht1380write(3, (date % 10) | ((date / 10) << 4));
0056a0   0e0a     movlw   0x0a             	MOVLW	0x0a
0056a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0056a4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0056a6   ffe5
0056a8   ec68     call    0x0054d0, 0x0    	CALL	__moduchar
0056aa   f02a
0056ac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0056ae   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0056b0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0056b2   0e0a     movlw   0x0a             	MOVLW	0x0a
0056b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0056b6   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0056b8   ffe5
0056ba   ecf3     call    0x0053e6, 0x0    	CALL	__divuchar
0056bc   f029
0056be   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0056c0   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0056c2   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0056c4   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0056c6   0bf0     andlw   0xf0             	ANDLW	0xf0
0056c8   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0056ca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0056cc   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0056ce   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0056d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0056d2   0e03     movlw   0x03             	MOVLW	0x03
0056d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0056d6   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
0056d8   f024
0056da   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0056dc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0056de   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0056e0   f002
0056e2   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0056e4   f001
0056e6   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0056e8   f000
0056ea   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0056ec   ffd9
0056ee   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutHours	code
                                           _rtcPutHours:
                                           ;	.line	212; rtc.c	void rtcPutHours(unsigned char hours) {
0056f0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0056f2   ffe5
0056f4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0056f6   ffd9
0056f8   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0056fa   ffe5
0056fc   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0056fe   ffe5
005700   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
005702   ffe5
005704   0e02     movlw   0x02             	MOVLW	0x02
005706   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005708   f000
                                           ;	.line	213; rtc.c	ht1380write(2, (hours % 10) | ((hours / 10) << 4));
00570a   0e0a     movlw   0x0a             	MOVLW	0x0a
00570c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00570e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005710   ffe5
005712   ec68     call    0x0054d0, 0x0    	CALL	__moduchar
005714   f02a
005716   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005718   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00571a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00571c   0e0a     movlw   0x0a             	MOVLW	0x0a
00571e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005720   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005722   ffe5
005724   ecf3     call    0x0053e6, 0x0    	CALL	__divuchar
005726   f029
005728   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00572a   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00572c   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
00572e   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
005730   0bf0     andlw   0xf0             	ANDLW	0xf0
005732   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
005734   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
005736   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
005738   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00573a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00573c   0e02     movlw   0x02             	MOVLW	0x02
00573e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005740   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005742   f024
005744   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005746   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005748   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00574a   f002
00574c   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00574e   f001
005750   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005752   f000
005754   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005756   ffd9
005758   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutMinutes	code
                                           _rtcPutMinutes:
                                           ;	.line	208; rtc.c	void rtcPutMinutes(unsigned char minutes) {
00575a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00575c   ffe5
00575e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005760   ffd9
005762   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005764   ffe5
005766   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005768   ffe5
00576a   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
00576c   ffe5
00576e   0e02     movlw   0x02             	MOVLW	0x02
005770   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005772   f000
                                           ;	.line	209; rtc.c	ht1380write(1, (minutes % 10) | ((minutes / 10) << 4));
005774   0e0a     movlw   0x0a             	MOVLW	0x0a
005776   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005778   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00577a   ffe5
00577c   ec68     call    0x0054d0, 0x0    	CALL	__moduchar
00577e   f02a
005780   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005782   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005784   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005786   0e0a     movlw   0x0a             	MOVLW	0x0a
005788   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00578a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00578c   ffe5
00578e   ecf3     call    0x0053e6, 0x0    	CALL	__divuchar
005790   f029
005792   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005794   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005796   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005798   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
00579a   0bf0     andlw   0xf0             	ANDLW	0xf0
00579c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00579e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0057a0   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
0057a2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0057a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0057a6   0e01     movlw   0x01             	MOVLW	0x01
0057a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0057aa   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
0057ac   f024
0057ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0057b0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0057b2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0057b4   f002
0057b6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0057b8   f001
0057ba   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0057bc   f000
0057be   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0057c0   ffd9
0057c2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcPutSeconds	code
                                           _rtcPutSeconds:
                                           ;	.line	204; rtc.c	void rtcPutSeconds(unsigned char seconds) {
0057c4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0057c6   ffe5
0057c8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0057ca   ffd9
0057cc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0057ce   ffe5
0057d0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0057d2   ffe5
0057d4   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0057d6   ffe5
0057d8   0e02     movlw   0x02             	MOVLW	0x02
0057da   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0057dc   f000
                                           ;	.line	205; rtc.c	ht1380write(0, (seconds % 10) | ((seconds / 10) << 4));
0057de   0e0a     movlw   0x0a             	MOVLW	0x0a
0057e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0057e2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0057e4   ffe5
0057e6   ec68     call    0x0054d0, 0x0    	CALL	__moduchar
0057e8   f02a
0057ea   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0057ec   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0057ee   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0057f0   0e0a     movlw   0x0a             	MOVLW	0x0a
0057f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0057f4   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0057f6   ffe5
0057f8   ecf3     call    0x0053e6, 0x0    	CALL	__divuchar
0057fa   f029
0057fc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0057fe   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005800   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
005802   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
005804   0bf0     andlw   0xf0             	ANDLW	0xf0
005806   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
005808   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00580a   1201     iorwf   0x01, 0x1, 0x0   	IORWF	r0x01, F
00580c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00580e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005810   0e00     movlw   0x00             	MOVLW	0x00
005812   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005814   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005816   f024
005818   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00581a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00581c   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
00581e   f002
005820   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005822   f001
005824   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005826   f000
005828   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00582a   ffd9
00582c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetDay	code
                                           _rtcGetDay:
                                           ;	.line	188; rtc.c	unsigned char rtcGetDay(void) {
005cc2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005cc4   ffe5
005cc6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005cc8   ffd9
005cca   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005ccc   ffe5
                                           ;	.line	190; rtc.c	value = ht1380read(5);
005cce   0e05     movlw   0x05             	MOVLW	0x05
005cd0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005cd2   ec62     call    0x0042c4, 0x0    	CALL	_ht1380read
005cd4   f021
005cd6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005cd8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	191; rtc.c	return (value & 0x0f); // 1..7
005cda   0e0f     movlw   0x0f             	MOVLW	0x0f
005cdc   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
005cde   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005ce0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005ce2   f000
005ce4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005ce6   ffd9
005ce8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetYear	code
                                           _rtcGetYear:
                                           ;	.line	182; rtc.c	unsigned char rtcGetYear(void) {
00598c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00598e   ffe5
005990   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005992   ffd9
005994   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005996   ffe5
005998   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00599a   ffe5
                                           ;	.line	184; rtc.c	value = ht1380read(6);
00599c   0e06     movlw   0x06             	MOVLW	0x06
00599e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0059a0   ec62     call    0x0042c4, 0x0    	CALL	_ht1380read
0059a2   f021
0059a4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0059a6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	185; rtc.c	return (((value >> 4)&0x0f)*10 + (value & 0x0f));
0059a8   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0059aa   0b0f     andlw   0x0f             	ANDLW	0x0f
0059ac   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0059ae   0e0f     movlw   0x0f             	MOVLW	0x0f
0059b0   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
0059b2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0059b4   0d0a     mullw   0x0a             	MULLW	0x0a
0059b6   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0059b8   f001
0059ba   0e0f     movlw   0x0f             	MOVLW	0x0f
0059bc   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
0059be   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0059c0   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0059c2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0059c4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0059c6   f001
0059c8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0059ca   f000
0059cc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0059ce   ffd9
0059d0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetMonth	code
                                           _rtcGetMonth:
                                           ;	.line	176; rtc.c	unsigned char rtcGetMonth(void) {
005aea   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005aec   ffe5
005aee   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005af0   ffd9
005af2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005af4   ffe5
005af6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005af8   ffe5
                                           ;	.line	178; rtc.c	value = ht1380read(4);
005afa   0e04     movlw   0x04             	MOVLW	0x04
005afc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005afe   ec62     call    0x0042c4, 0x0    	CALL	_ht1380read
005b00   f021
005b02   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005b04   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	179; rtc.c	return (((value >> 4)&0x01)*10 + (value & 0x0f));
005b06   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005b08   0b10     andlw   0x10             	ANDLW	0x10
005b0a   38e8     swapf   0xe8, 0x0, 0x0   	SWAPF	WREG, W
005b0c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
005b0e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005b10   0d0a     mullw   0x0a             	MULLW	0x0a
005b12   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
005b14   f001
005b16   0e0f     movlw   0x0f             	MOVLW	0x0f
005b18   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
005b1a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005b1c   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
005b1e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005b20   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005b22   f001
005b24   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005b26   f000
005b28   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005b2a   ffd9
005b2c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetDate	code
                                           _rtcGetDate:
                                           ;	.line	170; rtc.c	unsigned char rtcGetDate(void) {
0059d2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0059d4   ffe5
0059d6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0059d8   ffd9
0059da   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0059dc   ffe5
0059de   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0059e0   ffe5
                                           ;	.line	172; rtc.c	value = ht1380read(3);
0059e2   0e03     movlw   0x03             	MOVLW	0x03
0059e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0059e6   ec62     call    0x0042c4, 0x0    	CALL	_ht1380read
0059e8   f021
0059ea   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0059ec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	173; rtc.c	return (((value >> 4)&0x03)*10 + (value & 0x0f));
0059ee   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
0059f0   0b0f     andlw   0x0f             	ANDLW	0x0f
0059f2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0059f4   0e03     movlw   0x03             	MOVLW	0x03
0059f6   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
0059f8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0059fa   0d0a     mullw   0x0a             	MULLW	0x0a
0059fc   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0059fe   f001
005a00   0e0f     movlw   0x0f             	MOVLW	0x0f
005a02   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
005a04   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005a06   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
005a08   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005a0a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005a0c   f001
005a0e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005a10   f000
005a12   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005a14   ffd9
005a16   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetHours	code
                                           _rtcGetHours:
                                           ;	.line	164; rtc.c	unsigned char rtcGetHours(void) {
005a18   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005a1a   ffe5
005a1c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005a1e   ffd9
005a20   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005a22   ffe5
005a24   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005a26   ffe5
                                           ;	.line	166; rtc.c	value = ht1380read(2);
005a28   0e02     movlw   0x02             	MOVLW	0x02
005a2a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005a2c   ec62     call    0x0042c4, 0x0    	CALL	_ht1380read
005a2e   f021
005a30   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005a32   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	167; rtc.c	return (((value >> 4)&0x03)*10 + (value & 0x0f));
005a34   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
005a36   0b0f     andlw   0x0f             	ANDLW	0x0f
005a38   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005a3a   0e03     movlw   0x03             	MOVLW	0x03
005a3c   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
005a3e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005a40   0d0a     mullw   0x0a             	MULLW	0x0a
005a42   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
005a44   f001
005a46   0e0f     movlw   0x0f             	MOVLW	0x0f
005a48   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
005a4a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005a4c   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
005a4e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005a50   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005a52   f001
005a54   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005a56   f000
005a58   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005a5a   ffd9
005a5c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetMinutes	code
                                           _rtcGetMinutes:
                                           ;	.line	158; rtc.c	unsigned char rtcGetMinutes(void) {
005a5e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005a60   ffe5
005a62   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005a64   ffd9
005a66   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005a68   ffe5
005a6a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005a6c   ffe5
                                           ;	.line	160; rtc.c	value = ht1380read(1);
005a6e   0e01     movlw   0x01             	MOVLW	0x01
005a70   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005a72   ec62     call    0x0042c4, 0x0    	CALL	_ht1380read
005a74   f021
005a76   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005a78   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	161; rtc.c	return (((value >> 4)&0x07)*10 + (value & 0x0f));
005a7a   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
005a7c   0b0f     andlw   0x0f             	ANDLW	0x0f
005a7e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005a80   0e07     movlw   0x07             	MOVLW	0x07
005a82   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
005a84   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005a86   0d0a     mullw   0x0a             	MULLW	0x0a
005a88   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
005a8a   f001
005a8c   0e0f     movlw   0x0f             	MOVLW	0x0f
005a8e   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
005a90   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005a92   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
005a94   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005a96   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005a98   f001
005a9a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005a9c   f000
005a9e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005aa0   ffd9
005aa2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcGetSeconds	code
                                           _rtcGetSeconds:
                                           ;	.line	151; rtc.c	unsigned char rtcGetSeconds(void) {
005aa4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005aa6   ffe5
005aa8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005aaa   ffd9
005aac   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005aae   ffe5
005ab0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005ab2   ffe5
                                           ;	.line	153; rtc.c	value = ht1380read(0); // read seconds
005ab4   0e00     movlw   0x00             	MOVLW	0x00
005ab6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005ab8   ec62     call    0x0042c4, 0x0    	CALL	_ht1380read
005aba   f021
005abc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
005abe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	154; rtc.c	return (((value >> 4)&0x07)*10 + (value & 0x0f));
005ac0   3800     swapf   0x00, 0x0, 0x0   	SWAPF	r0x00, W
005ac2   0b0f     andlw   0x0f             	ANDLW	0x0f
005ac4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005ac6   0e07     movlw   0x07             	MOVLW	0x07
005ac8   1601     andwf   0x01, 0x1, 0x0   	ANDWF	r0x01, F
                                           ; ;multiply lit val:0x0a by variable r0x01 and store in r0x01
005aca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005acc   0d0a     mullw   0x0a             	MULLW	0x0a
005ace   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
005ad0   f001
005ad2   0e0f     movlw   0x0f             	MOVLW	0x0f
005ad4   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
005ad6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005ad8   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
005ada   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005adc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005ade   f001
005ae0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005ae2   f000
005ae4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005ae6   ffd9
005ae8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcSetDateTime	code
                                           _rtcSetDateTime:
                                           ;	.line	139; rtc.c	void rtcSetDateTime(void) {
0050ce   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0050d0   ffe5
0050d2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0050d4   ffd9
                                           ;	.line	141; rtc.c	ht1380write(7, 0); //disable write protection
0050d6   0e00     movlw   0x00             	MOVLW	0x00
0050d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0050da   0e07     movlw   0x07             	MOVLW	0x07
0050dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0050de   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
0050e0   f024
0050e2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0050e4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	142; rtc.c	ht1380write(0, 0x0); //sec
0050e6   0e00     movlw   0x00             	MOVLW	0x00
0050e8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0050ea   0e00     movlw   0x00             	MOVLW	0x00
0050ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0050ee   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
0050f0   f024
0050f2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0050f4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	143; rtc.c	ht1380write(1, 0x21); //min
0050f6   0e21     movlw   0x21             	MOVLW	0x21
0050f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0050fa   0e01     movlw   0x01             	MOVLW	0x01
0050fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0050fe   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005100   f024
005102   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005104   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	144; rtc.c	ht1380write(2, 0x23); //hora
005106   0e23     movlw   0x23             	MOVLW	0x23
005108   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00510a   0e02     movlw   0x02             	MOVLW	0x02
00510c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00510e   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005110   f024
005112   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005114   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	145; rtc.c	ht1380write(3, 0x28); //dia
005116   0e28     movlw   0x28             	MOVLW	0x28
005118   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00511a   0e03     movlw   0x03             	MOVLW	0x03
00511c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00511e   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005120   f024
005122   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005124   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	146; rtc.c	ht1380write(4, 0x10); //mes
005126   0e10     movlw   0x10             	MOVLW	0x10
005128   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00512a   0e04     movlw   0x04             	MOVLW	0x04
00512c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00512e   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005130   f024
005132   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005134   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	147; rtc.c	ht1380write(5, 0x6); //dia semana
005136   0e06     movlw   0x06             	MOVLW	0x06
005138   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00513a   0e05     movlw   0x05             	MOVLW	0x05
00513c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00513e   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005140   f024
005142   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005144   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	148; rtc.c	ht1380write(6, 0x12); //ano
005146   0e12     movlw   0x12             	MOVLW	0x12
005148   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00514a   0e06     movlw   0x06             	MOVLW	0x06
00514c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00514e   ec0f     call    0x00481e, 0x0    	CALL	_ht1380write
005150   f024
005152   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005154   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005156   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005158   ffd9
00515a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__ht1380read	code
                                           _ht1380read:
                                           ;	.line	119; rtc.c	unsigned char ht1380read(unsigned char addr) {
0042c4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0042c6   ffe5
0042c8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0042ca   ffd9
0042cc   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0042ce   ffe5
0042d0   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0042d2   ffe5
0042d4   0e02     movlw   0x02             	MOVLW	0x02
0042d6   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0042d8   f000
                                           ;	.line	121; rtc.c	RESET_OFF();
0042da   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0042dc   f082
0042de   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0042e0   f001
0042e2   9a01     bcf     0x01, 0x5, 0x0   	BCF	r0x01, 5
0042e4   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0042e6   f082
0042e8   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0042ea   ffef
                                           ;	.line	122; rtc.c	SCL_OFF();
0042ec   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0042ee   f082
0042f0   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0042f2   f001
0042f4   9601     bcf     0x01, 0x3, 0x0   	BCF	r0x01, 3
0042f6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0042f8   f082
0042fa   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0042fc   ffef
                                           ;	.line	123; rtc.c	SDA_OFF();
0042fe   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004300   f082
004302   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
004304   f001
004306   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
004308   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00430a   f082
00430c   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
00430e   ffef
                                           ;	.line	125; rtc.c	RESET_ON();
004310   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004312   f082
004314   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
004316   f001
004318   8a01     bsf     0x01, 0x5, 0x0   	BSF	r0x01, 5
00431a   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00431c   f082
00431e   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
004320   ffef
                                           ;	.line	126; rtc.c	addr <<= 1;   //corrige endere?o
004322   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
004324   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	127; rtc.c	addr |= 0x81; //liga bit de leitura e hab. clk
004326   0e81     movlw   0x81             	MOVLW	0x81
004328   1200     iorwf   0x00, 0x1, 0x0   	IORWF	r0x00, F
                                           ;	.line	128; rtc.c	writeByte(addr);
00432a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00432c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00432e   ec31     call    0x004a62, 0x0    	CALL	_writeByte
004330   f025
004332   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	129; rtc.c	SDA_IN();
004334   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
004336   f094
004338   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00433a   f000
00433c   8800     bsf     0x00, 0x4, 0x0   	BSF	r0x00, 4
00433e   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
004340   f094
004342   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
004344   ffef
                                           ;	.line	130; rtc.c	DELAY();DELAY();DELAY();DELAY();
004346   0e64     movlw   0x64             	MOVLW	0x64
004348   0100     movlb   0x0              	BANKSEL	_de
00434a   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00217_DS_:
00434c   0100     movlb   0x0              	BANKSEL	_de
00434e   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
004350   0100     movlb   0x0              	BANKSEL	_de
004352   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
004354   e1fb     bnz     0x00434c         	BNZ	_00217_DS_
004356   0e64     movlw   0x64             	MOVLW	0x64
004358   0100     movlb   0x0              	BANKSEL	_de
00435a   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00220_DS_:
00435c   0100     movlb   0x0              	BANKSEL	_de
00435e   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
004360   0100     movlb   0x0              	BANKSEL	_de
004362   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
004364   e1fb     bnz     0x00435c         	BNZ	_00220_DS_
004366   0e64     movlw   0x64             	MOVLW	0x64
004368   0100     movlb   0x0              	BANKSEL	_de
00436a   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00223_DS_:
00436c   0100     movlb   0x0              	BANKSEL	_de
00436e   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
004370   0100     movlb   0x0              	BANKSEL	_de
004372   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
004374   e1fb     bnz     0x00436c         	BNZ	_00223_DS_
004376   0e64     movlw   0x64             	MOVLW	0x64
004378   0100     movlb   0x0              	BANKSEL	_de
00437a   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00226_DS_:
00437c   0100     movlb   0x0              	BANKSEL	_de
00437e   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
004380   0100     movlb   0x0              	BANKSEL	_de
004382   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
004384   e1fb     bnz     0x00437c         	BNZ	_00226_DS_
004386   0e64     movlw   0x64             	MOVLW	0x64
004388   0100     movlb   0x0              	BANKSEL	_de
00438a   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           ;	.line	131; rtc.c	dados = readByte();
00438c   ec1b     call    0x005036, 0x0    	CALL	_readByte
00438e   f028
004390   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           ;	.line	132; rtc.c	RESET_OFF();
004392   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004394   f082
004396   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
004398   f001
00439a   9a01     bcf     0x01, 0x5, 0x0   	BCF	r0x01, 5
00439c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00439e   f082
0043a0   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0043a2   ffef
                                           ;	.line	133; rtc.c	SCL_OFF();
0043a4   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0043a6   f082
0043a8   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0043aa   f001
0043ac   9601     bcf     0x01, 0x3, 0x0   	BCF	r0x01, 3
0043ae   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0043b0   f082
0043b2   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0043b4   ffef
                                           ;	.line	134; rtc.c	SDA_OFF();
0043b6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0043b8   f082
0043ba   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0043bc   f001
0043be   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
0043c0   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0043c2   f082
0043c4   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0043c6   ffef
                                           ;	.line	135; rtc.c	SDA_OUT();
0043c8   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0043ca   f094
0043cc   cfef     movff   0xfef, 0x001     	MOVFF	INDF0, r0x01
0043ce   f001
0043d0   9801     bcf     0x01, 0x4, 0x0   	BCF	r0x01, 4
0043d2   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
0043d4   f094
0043d6   c001     movff   0x001, 0xfef     	MOVFF	r0x01, INDF0
0043d8   ffef
                                           ;	.line	136; rtc.c	return dados;
0043da   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0043dc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0043de   f001
0043e0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0043e2   f000
0043e4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0043e6   ffd9
0043e8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__ht1380write	code
                                           _ht1380write:
                                           ;	.line	102; rtc.c	void ht1380write(unsigned char addr, unsigned char dados) {
00481e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004820   ffe5
004822   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004824   ffd9
004826   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004828   ffe5
00482a   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00482c   ffe5
00482e   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004830   ffe5
004832   0e02     movlw   0x02             	MOVLW	0x02
004834   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004836   f000
004838   0e03     movlw   0x03             	MOVLW	0x03
00483a   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
00483c   f001
                                           ;	.line	103; rtc.c	RESET_OFF();
00483e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004840   f082
004842   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
004844   f002
004846   9a02     bcf     0x02, 0x5, 0x0   	BCF	r0x02, 5
004848   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00484a   f082
00484c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00484e   ffef
                                           ;	.line	104; rtc.c	SCL_OFF();
004850   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004852   f082
004854   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
004856   f002
004858   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
00485a   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00485c   f082
00485e   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
004860   ffef
                                           ;	.line	105; rtc.c	SDA_OFF();
004862   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004864   f082
004866   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
004868   f002
00486a   9802     bcf     0x02, 0x4, 0x0   	BCF	r0x02, 4
00486c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00486e   f082
004870   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
004872   ffef
                                           ;	.line	108; rtc.c	RESET_ON();
004874   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004876   f082
004878   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00487a   f002
00487c   8a02     bsf     0x02, 0x5, 0x0   	BSF	r0x02, 5
00487e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004880   f082
004882   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
004884   ffef
                                           ;	.line	110; rtc.c	addr <<= 1;   //corrige endere?o
004886   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
004888   3600     rlcf    0x00, 0x1, 0x0   	RLCF	r0x00, F
                                           ;	.line	111; rtc.c	addr |= 0x80; //habilita clock
00488a   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
                                           ;	.line	112; rtc.c	writeByte(addr);
00488c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00488e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004890   ec31     call    0x004a62, 0x0    	CALL	_writeByte
004892   f025
004894   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	113; rtc.c	writeByte(dados);
004896   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004898   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00489a   ec31     call    0x004a62, 0x0    	CALL	_writeByte
00489c   f025
00489e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	114; rtc.c	RESET_OFF();
0048a0   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0048a2   f082
0048a4   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0048a6   f000
0048a8   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
0048aa   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0048ac   f082
0048ae   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0048b0   ffef
                                           ;	.line	115; rtc.c	SCL_OFF();
0048b2   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0048b4   f082
0048b6   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0048b8   f000
0048ba   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
0048bc   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0048be   f082
0048c0   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0048c2   ffef
                                           ;	.line	116; rtc.c	SDA_OFF();
0048c4   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0048c6   f082
0048c8   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
0048ca   f000
0048cc   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
0048ce   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
0048d0   f082
0048d2   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
0048d4   ffef
0048d6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0048d8   f002
0048da   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0048dc   f001
0048de   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0048e0   f000
0048e2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0048e4   ffd9
0048e6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__readByte	code
                                           _readByte:
                                           ;	.line	82; rtc.c	unsigned char readByte() {
005036   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005038   ffe5
00503a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00503c   ffd9
00503e   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005040   ffe5
005042   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005044   ffe5
005046   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
005048   ffe5
                                           ;	.line	85; rtc.c	dados = 0;
00504a   6a00     clrf    0x00, 0x0        	CLRF	r0x00
                                           ;	.line	86; rtc.c	for (i = 0; i < 8; i++) {
00504c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00171_DS_:
                                           ;	.line	87; rtc.c	SCL_ON();
00504e   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
005050   f082
005052   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
005054   f002
005056   8602     bsf     0x02, 0x3, 0x0   	BSF	r0x02, 3
005058   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00505a   f082
00505c   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00505e   ffef
                                           ;	.line	88; rtc.c	DELAY();
005060   0e64     movlw   0x64             	MOVLW	0x64
005062   0100     movlb   0x0              	BANKSEL	_de
005064   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00167_DS_:
005066   0100     movlb   0x0              	BANKSEL	_de
005068   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
00506a   0100     movlb   0x0              	BANKSEL	_de
00506c   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
00506e   e1fb     bnz     0x005066         	BNZ	_00167_DS_
005070   0e64     movlw   0x64             	MOVLW	0x64
005072   0100     movlb   0x0              	BANKSEL	_de
005074   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           ;	.line	90; rtc.c	dados >>= 1;
005076   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
005078   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
                                           ;	.line	92; rtc.c	if (SDA()) {
00507a   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00507c   f082
00507e   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
005080   f002
005082   a802     btfss   0x02, 0x4, 0x0   	BTFSS	r0x02, 4
005084   d001     bra     0x005088         	BRA	_00162_DS_
                                           ;	.line	93; rtc.c	dados |= 0x80;
005086   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
                                           _00162_DS_:
                                           ;	.line	96; rtc.c	SCL_OFF();
005088   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
00508a   f082
00508c   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00508e   f002
005090   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
005092   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
005094   f082
005096   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
005098   ffef
                                           ;	.line	97; rtc.c	DELAY();
00509a   0e64     movlw   0x64             	MOVLW	0x64
00509c   0100     movlb   0x0              	BANKSEL	_de
00509e   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00170_DS_:
0050a0   0100     movlb   0x0              	BANKSEL	_de
0050a2   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
0050a4   0100     movlb   0x0              	BANKSEL	_de
0050a6   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
0050a8   e1fb     bnz     0x0050a0         	BNZ	_00170_DS_
0050aa   0e64     movlw   0x64             	MOVLW	0x64
0050ac   0100     movlb   0x0              	BANKSEL	_de
0050ae   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           ;	.line	86; rtc.c	for (i = 0; i < 8; i++) {
0050b0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
0050b2   0e08     movlw   0x08             	MOVLW	0x08
0050b4   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
0050b6   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0050b8   d7ca     bra     0x00504e         	BRA	_00171_DS_
                                           ;	.line	99; rtc.c	return dados;
0050ba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0050bc   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0050be   f002
0050c0   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0050c2   f001
0050c4   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0050c6   f000
0050c8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0050ca   ffd9
0050cc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__writeByte	code
                                           _writeByte:
                                           ;	.line	61; rtc.c	void writeByte(unsigned char dados) {
004a62   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004a64   ffe5
004a66   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004a68   ffd9
004a6a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004a6c   ffe5
004a6e   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004a70   ffe5
004a72   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004a74   ffe5
004a76   0e02     movlw   0x02             	MOVLW	0x02
004a78   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004a7a   f000
                                           ;	.line	63; rtc.c	for (i = 0; i < 8; i++) {
004a7c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00127_DS_:
                                           ;	.line	65; rtc.c	if (dados & 0x01) {
004a7e   a000     btfss   0x00, 0x0, 0x0   	BTFSS	r0x00, 0
004a80   d00a     bra     0x004a96         	BRA	_00116_DS_
                                           ;	.line	66; rtc.c	SDA_ON();
004a82   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004a84   f082
004a86   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
004a88   f002
004a8a   8802     bsf     0x02, 0x4, 0x0   	BSF	r0x02, 4
004a8c   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004a8e   f082
004a90   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
004a92   ffef
004a94   d009     bra     0x004aa8         	BRA	_00117_DS_
                                           _00116_DS_:
                                           ;	.line	68; rtc.c	SDA_OFF();
004a96   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004a98   f082
004a9a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
004a9c   f002
004a9e   9802     bcf     0x02, 0x4, 0x0   	BCF	r0x02, 4
004aa0   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004aa2   f082
004aa4   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
004aa6   ffef
                                           _00117_DS_:
                                           ;	.line	71; rtc.c	dados >>= 1;
004aa8   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
004aaa   3200     rrcf    0x00, 0x1, 0x0   	RRCF	r0x00, F
                                           ;	.line	73; rtc.c	SCL_ON();
004aac   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004aae   f082
004ab0   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
004ab2   f002
004ab4   8602     bsf     0x02, 0x3, 0x0   	BSF	r0x02, 3
004ab6   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004ab8   f082
004aba   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
004abc   ffef
                                           ;	.line	74; rtc.c	DELAY();
004abe   0e64     movlw   0x64             	MOVLW	0x64
004ac0   0100     movlb   0x0              	BANKSEL	_de
004ac2   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00123_DS_:
004ac4   0100     movlb   0x0              	BANKSEL	_de
004ac6   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
004ac8   0100     movlb   0x0              	BANKSEL	_de
004aca   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
004acc   e1fb     bnz     0x004ac4         	BNZ	_00123_DS_
                                           ;	.line	76; rtc.c	SCL_OFF();
004ace   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004ad0   f082
004ad2   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
004ad4   f002
004ad6   9602     bcf     0x02, 0x3, 0x0   	BCF	r0x02, 3
004ad8   ee0f     lfsr    0x0, 0xf82       	LFSR	0x00, 0xf82
004ada   f082
004adc   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
004ade   ffef
                                           ;	.line	77; rtc.c	DELAY();
004ae0   0e64     movlw   0x64             	MOVLW	0x64
004ae2   0100     movlb   0x0              	BANKSEL	_de
004ae4   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           _00126_DS_:
004ae6   0100     movlb   0x0              	BANKSEL	_de
004ae8   078b     decf    0x8b, 0x1, 0x1   	DECF	_de, F, B
004aea   0100     movlb   0x0              	BANKSEL	_de
004aec   518b     movf    0x8b, 0x0, 0x1   	MOVF	_de, W, B
004aee   e1fb     bnz     0x004ae6         	BNZ	_00126_DS_
004af0   0e64     movlw   0x64             	MOVLW	0x64
004af2   0100     movlb   0x0              	BANKSEL	_de
004af4   6f8b     movwf   0x8b, 0x1        	MOVWF	_de, B
                                           ;	.line	63; rtc.c	for (i = 0; i < 8; i++) {
004af6   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
004af8   0e08     movlw   0x08             	MOVLW	0x08
004afa   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
004afc   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
004afe   d7bf     bra     0x004a7e         	BRA	_00127_DS_
004b00   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004b02   f002
004b04   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004b06   f001
004b08   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004b0a   f000
004b0c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004b0e   ffd9
004b10   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcStart	code
                                           _rtcStart:
                                           ;	.line	53; rtc.c	void rtcStart() {
00582e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005830   ffe5
005832   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005834   ffd9
005836   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005838   ffe5
                                           ;	.line	55; rtc.c	RESET_OUT();
00583a   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00583c   f094
00583e   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005840   f000
005842   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
005844   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
005846   f094
005848   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00584a   ffef
                                           ;	.line	56; rtc.c	SDA_OUT();
00584c   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00584e   f094
005850   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005852   f000
005854   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
005856   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
005858   f094
00585a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00585c   ffef
                                           ;	.line	57; rtc.c	SCL_OUT();
00585e   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
005860   f094
005862   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005864   f000
005866   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
005868   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00586a   f094
00586c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00586e   ffef
                                           ;	.line	58; rtc.c	BitClr(INTCON2, 7); //liga pull up
005870   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
005872   f0f1
005874   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005876   f000
005878   9e00     bcf     0x00, 0x7, 0x0   	BCF	r0x00, 7
00587a   ee0f     lfsr    0x0, 0xff1       	LFSR	0x00, 0xff1
00587c   f0f1
00587e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
005880   ffef
005882   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005884   f000
005886   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005888   ffd9
00588a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_rtc__rtcInit	code
                                           _rtcInit:
                                           ;	.line	46; rtc.c	void rtcInit() {
005940   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005942   ffe5
005944   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005946   ffd9
005948   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00594a   ffe5
                                           ;	.line	48; rtc.c	RESET_OUT();
00594c   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00594e   f094
005950   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005952   f000
005954   9a00     bcf     0x00, 0x5, 0x0   	BCF	r0x00, 5
005956   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
005958   f094
00595a   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00595c   ffef
                                           ;	.line	49; rtc.c	SDA_OUT();
00595e   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
005960   f094
005962   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005964   f000
005966   9800     bcf     0x00, 0x4, 0x0   	BCF	r0x00, 4
005968   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00596a   f094
00596c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
00596e   ffef
                                           ;	.line	50; rtc.c	SCL_OUT();
005970   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
005972   f094
005974   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005976   f000
005978   9600     bcf     0x00, 0x3, 0x0   	BCF	r0x00, 3
00597a   ee0f     lfsr    0x0, 0xf94       	LFSR	0x00, 0xf94
00597c   f094
00597e   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
005980   ffef
005982   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005984   f000
005986   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005988   ffd9
00598a   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	 2274 (0x08e2) bytes ( 1.73%)
                                           ;           	 1137 (0x0471) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.08%)
                                           ; access size:	    3 (0x0003) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_printf

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	_lcdData

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stdio__printf	code
                                           _printf:
                                           ;	.line	3; stdio.c	void printf(char txt[16]) {
004d14   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004d16   ffe5
004d18   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004d1a   ffd9
004d1c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004d1e   ffe5
004d20   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004d22   ffe5
004d24   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004d26   ffe5
004d28   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
004d2a   ffe5
004d2c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004d2e   ffe5
004d30   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
004d32   ffe5
004d34   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
004d36   ffe5
004d38   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
004d3a   ffe5
004d3c   0e02     movlw   0x02             	MOVLW	0x02
004d3e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
004d40   f000
004d42   0e03     movlw   0x03             	MOVLW	0x03
004d44   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004d46   f001
004d48   0e04     movlw   0x04             	MOVLW	0x04
004d4a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
004d4c   f002
                                           ;	.line	5; stdio.c	for (i = 0; i < 16; i++) {
004d4e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
004d50   6a04     clrf    0x04, 0x0        	CLRF	r0x04
                                           _00106_DS_:
                                           ;	.line	6; stdio.c	lcdData(txt[i]);
004d52   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004d54   2400     addwf   0x00, 0x0, 0x0   	ADDWF	r0x00, W
004d56   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
004d58   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004d5a   2001     addwfc  0x01, 0x0, 0x0   	ADDWFC	r0x01, W
004d5c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
004d5e   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
004d60   be04     btfsc   0x04, 0x7, 0x0   	BTFSC	r0x04, 7
004d62   68e8     setf    0xe8, 0x0        	SETF	WREG
004d64   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
004d66   6e07     movwf   0x07, 0x0        	MOVWF	r0x07
004d68   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
004d6a   ffe9
004d6c   c006     movff   0x006, 0xff3     	MOVFF	r0x06, PRODL
004d6e   fff3
004d70   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
004d72   ecaa     call    0x005d54, 0x0    	CALL	__gptrget1
004d74   f02e
004d76   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
004d78   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
004d7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004d7c   ecae     call    0x00515c, 0x0    	CALL	_lcdData
004d7e   f028
004d80   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	5; stdio.c	for (i = 0; i < 16; i++) {
004d82   4a03     infsnz  0x03, 0x1, 0x0   	INFSNZ	r0x03, F
004d84   2a04     incf    0x04, 0x1, 0x0   	INCF	r0x04, F
004d86   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004d88   0f80     addlw   0x80             	ADDLW	0x80
004d8a   0f80     addlw   0x80             	ADDLW	0x80
004d8c   e102     bnz     0x004d92         	BNZ	_00114_DS_
004d8e   0e10     movlw   0x10             	MOVLW	0x10
004d90   5c03     subwf   0x03, 0x0, 0x0   	SUBWF	r0x03, W
                                           _00114_DS_:
004d92   e3df     bnc     0x004d52         	BNC	_00106_DS_
004d94   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
004d96   f007
004d98   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
004d9a   f006
004d9c   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
004d9e   f005
004da0   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
004da2   f004
004da4   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004da6   f003
004da8   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004daa   f002
004dac   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004dae   f001
004db0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004db2   f000
004db4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004db6   ffd9
004db8   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  166 (0x00a6) bytes ( 0.13%)
                                           ;           	   83 (0x0053) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    8 (0x0008) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_timerEnded
                                           	global	_timerWait
                                           	global	_timerReset
                                           	global	_timerInit

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__mulint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_timer__timerInit	code
                                           _timerInit:
                                           ;	.line	46; timer.c	void timerInit(void) {
005c0a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005c0c   ffe5
005c0e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005c10   ffd9
005c12   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005c14   ffe5
                                           ;	.line	47; timer.c	T0CON = 0b00001000; //configura timer 0 sem prescaler
005c16   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
005c18   f0d5
005c1a   0e08     movlw   0x08             	MOVLW	0x08
005c1c   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
                                           ;	.line	48; timer.c	BitSet(T0CON, 7); //liga o timer 0
005c1e   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
005c20   f0d5
005c22   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005c24   f000
005c26   8e00     bsf     0x00, 0x7, 0x0   	BSF	r0x00, 7
005c28   ee0f     lfsr    0x0, 0xfd5       	LFSR	0x00, 0xfd5
005c2a   f0d5
005c2c   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
005c2e   ffef
005c30   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005c32   f000
005c34   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005c36   ffd9
005c38   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_timer__timerReset	code
                                           _timerReset:
                                           ;	.line	33; timer.c	void timerReset(unsigned int tempo) {
0048e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0048ea   ffe5
0048ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0048ee   ffd9
0048f0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0048f2   ffe5
0048f4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
0048f6   ffe5
0048f8   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
0048fa   ffe5
0048fc   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
0048fe   ffe5
004900   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004902   ffe5
004904   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
004906   ffe5
004908   0e02     movlw   0x02             	MOVLW	0x02
00490a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00490c   f000
00490e   0e03     movlw   0x03             	MOVLW	0x03
004910   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
004912   f001
                                           ;	.line	35; timer.c	unsigned ciclos = tempo * 2;
004914   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004916   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004918   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00491a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00491c   0e00     movlw   0x00             	MOVLW	0x00
00491e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004920   0e02     movlw   0x02             	MOVLW	0x02
004922   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
004924   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
004926   f027
004928   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00492a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00492c   f001
00492e   0e04     movlw   0x04             	MOVLW	0x04
004930   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	37; timer.c	ciclos = 65535 - ciclos;
004932   c000     movff   0x000, 0x002     	MOVFF	r0x00, r0x02
004934   f002
004936   c001     movff   0x001, 0x003     	MOVFF	r0x01, r0x03
004938   f003
00493a   6a04     clrf    0x04, 0x0        	CLRF	r0x04
00493c   6a05     clrf    0x05, 0x0        	CLRF	r0x05
00493e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
004940   08ff     sublw   0xff             	SUBLW	0xff
004942   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
004944   0eff     movlw   0xff             	MOVLW	0xff
004946   5603     subfwb  0x03, 0x1, 0x0   	SUBFWB	r0x03, F
004948   0e00     movlw   0x00             	MOVLW	0x00
00494a   5604     subfwb  0x04, 0x1, 0x0   	SUBFWB	r0x04, F
00494c   0e00     movlw   0x00             	MOVLW	0x00
00494e   5605     subfwb  0x05, 0x1, 0x0   	SUBFWB	r0x05, F
004950   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
004952   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
004954   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004956   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
                                           ;	.line	39; timer.c	ciclos -= 14; //subtrai tempo de overhead(experimental)
004958   0ef2     movlw   0xf2             	MOVLW	0xf2
00495a   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
00495c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00495e   0601     decf    0x01, 0x1, 0x0   	DECF	r0x01, F
                                           ;	.line	40; timer.c	TMR0H = (ciclos >> 8); //salva a parte alta
004960   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004962   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
004964   6a03     clrf    0x03, 0x0        	CLRF	r0x03
004966   ee0f     lfsr    0x0, 0xfd7       	LFSR	0x00, 0xfd7
004968   f0d7
00496a   c002     movff   0x002, 0xfef     	MOVFF	r0x02, INDF0
00496c   ffef
                                           ;	.line	41; timer.c	TMR0L = (ciclos & 0x00FF); // salva a parte baixa
00496e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
004970   ee0f     lfsr    0x0, 0xfd6       	LFSR	0x00, 0xfd6
004972   f0d6
004974   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
004976   ffef
                                           ;	.line	43; timer.c	BitClr(INTCON, 2); //limpa a flag de overflow
004978   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
00497a   f0f2
00497c   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
00497e   f000
004980   9400     bcf     0x00, 0x2, 0x0   	BCF	r0x00, 2
004982   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
004984   f0f2
004986   c000     movff   0x000, 0xfef     	MOVFF	r0x00, INDF0
004988   ffef
00498a   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00498c   f005
00498e   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
004990   f004
004992   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004994   f003
004996   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004998   f002
00499a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00499c   f001
00499e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0049a0   f000
0049a2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0049a4   ffd9
0049a6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_timer__timerWait	code
                                           _timerWait:
                                           ;	.line	27; timer.c	void timerWait(void) {
005d32   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005d34   ffe5
005d36   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005d38   ffd9
005d3a   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005d3c   ffe5
                                           _00110_DS_:
                                           ;	.line	28; timer.c	while (!BitTst(INTCON, 2));
005d3e   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
005d40   f0f2
005d42   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005d44   f000
005d46   a400     btfss   0x00, 0x2, 0x0   	BTFSS	r0x00, 2
005d48   d7fa     bra     0x005d3e         	BRA	_00110_DS_
005d4a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005d4c   f000
005d4e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005d50   ffd9
005d52   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_timer__timerEnded	code
                                           _timerEnded:
                                           ;	.line	23; timer.c	char timerEnded(void) {
005cea   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005cec   ffe5
005cee   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005cf0   ffd9
005cf2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005cf4   ffe5
                                           ;	.line	24; timer.c	return BitTst(INTCON, 2);
005cf6   ee0f     lfsr    0x0, 0xff2       	LFSR	0x00, 0xff2
005cf8   f0f2
005cfa   cfef     movff   0xfef, 0x000     	MOVFF	INDF0, r0x00
005cfc   f000
005cfe   0e04     movlw   0x04             	MOVLW	0x04
005d00   1600     andwf   0x00, 0x1, 0x0   	ANDWF	r0x00, F
005d02   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005d04   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005d06   f000
005d08   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005d0a   ffd9
005d0c   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  310 (0x0136) bytes ( 0.24%)
                                           ;           	  155 (0x009b) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    6 (0x0006) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_outputInit
                                           	global	_outputPrint
                                           	global	_ADread
                                           	global	_i

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_Delay2ms
                                           	extern	_lcdCommand
                                           	extern	_lcdString
                                           	extern	_lcdInt
                                           	extern	_lcdInit
                                           	extern	_getPeriodo
                                           	extern	_getTime
                                           	extern	_getMult
                                           	extern	_getAlarmLevel
                                           	extern	_getLanguage
                                           	extern	_getSenha_i
                                           	extern	_getSenha_try
                                           	extern	_getTestResult
                                           	extern	__mulint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           	idata
                                           _msgs	db	LOW(___str_50), HIGH(___str_50), UPPER(___str_50), LOW(___str_51), HIGH(___str_51), UPPER(___str_51), LOW(___str_52), HIGH(___str_52), UPPER(___str_52), LOW(___str_53), HIGH(___str_53), UPPER(___str_53)
                                           	db	LOW(___str_54), HIGH(___str_54), UPPER(___str_54), LOW(___str_55), HIGH(___str_55), UPPER(___str_55), LOW(___str_56), HIGH(___str_56), UPPER(___str_56), LOW(___str_57), HIGH(___str_57), UPPER(___str_57)
                                           	db	LOW(___str_58), HIGH(___str_58), UPPER(___str_58), LOW(___str_59), HIGH(___str_59), UPPER(___str_59), LOW(___str_58), HIGH(___str_58), UPPER(___str_58), LOW(___str_59), HIGH(___str_59), UPPER(___str_59)
                                           	db	LOW(___str_58), HIGH(___str_58), UPPER(___str_58), LOW(___str_59), HIGH(___str_59), UPPER(___str_59), LOW(___str_58), HIGH(___str_58), UPPER(___str_58), LOW(___str_59), HIGH(___str_59), UPPER(___str_59)
                                           	db	LOW(___str_60), HIGH(___str_60), UPPER(___str_60), LOW(___str_61), HIGH(___str_61), UPPER(___str_61), LOW(___str_62), HIGH(___str_62), UPPER(___str_62), LOW(___str_63), HIGH(___str_63), UPPER(___str_63)
                                           	db	LOW(___str_62), HIGH(___str_62), UPPER(___str_62), LOW(___str_63), HIGH(___str_63), UPPER(___str_63), LOW(___str_62), HIGH(___str_62), UPPER(___str_62), LOW(___str_63), HIGH(___str_63), UPPER(___str_63)
                                           	db	LOW(___str_64), HIGH(___str_64), UPPER(___str_64), LOW(___str_65), HIGH(___str_65), UPPER(___str_65), LOW(___str_66), HIGH(___str_66), UPPER(___str_66), LOW(___str_67), HIGH(___str_67), UPPER(___str_67)
                                           	db	LOW(___str_68), HIGH(___str_68), UPPER(___str_68), LOW(___str_69), HIGH(___str_69), UPPER(___str_69), LOW(___str_70), HIGH(___str_70), UPPER(___str_70), LOW(___str_71), HIGH(___str_71), UPPER(___str_71)
                                           	db	LOW(___str_72), HIGH(___str_72), UPPER(___str_72), LOW(___str_73), HIGH(___str_73), UPPER(___str_73), LOW(___str_72), HIGH(___str_72), UPPER(___str_72), LOW(___str_73), HIGH(___str_73), UPPER(___str_73)
                                           	db	LOW(___str_72), HIGH(___str_72), UPPER(___str_72), LOW(___str_73), HIGH(___str_73), UPPER(___str_73), LOW(___str_74), HIGH(___str_74), UPPER(___str_74), LOW(___str_75), HIGH(___str_75), UPPER(___str_75)
                                           	db	LOW(___str_76), HIGH(___str_76), UPPER(___str_76), LOW(___str_77), HIGH(___str_77), UPPER(___str_77), LOW(___str_76), HIGH(___str_76), UPPER(___str_76), LOW(___str_77), HIGH(___str_77), UPPER(___str_77)
                                           	db	LOW(___str_76), HIGH(___str_76), UPPER(___str_76), LOW(___str_77), HIGH(___str_77), UPPER(___str_77), LOW(___str_78), HIGH(___str_78), UPPER(___str_78), LOW(___str_79), HIGH(___str_79), UPPER(___str_79)
                                           	db	LOW(___str_80), HIGH(___str_80), UPPER(___str_80), LOW(___str_81), HIGH(___str_81), UPPER(___str_81), LOW(___str_82), HIGH(___str_82), UPPER(___str_82), LOW(___str_83), HIGH(___str_83), UPPER(___str_83)
                                           	db	LOW(___str_84), HIGH(___str_84), UPPER(___str_84), LOW(___str_85), HIGH(___str_85), UPPER(___str_85), LOW(___str_86), HIGH(___str_86), UPPER(___str_86), LOW(___str_87), HIGH(___str_87), UPPER(___str_87)
                                           	db	LOW(___str_88), HIGH(___str_88), UPPER(___str_88), LOW(___str_89), HIGH(___str_89), UPPER(___str_89), LOW(___str_90), HIGH(___str_90), UPPER(___str_90), LOW(___str_91), HIGH(___str_91), UPPER(___str_91)
                                           	db	LOW(___str_92), HIGH(___str_92), UPPER(___str_92), LOW(___str_93), HIGH(___str_93), UPPER(___str_93), LOW(___str_94), HIGH(___str_94), UPPER(___str_94), LOW(___str_95), HIGH(___str_95), UPPER(___str_95)
                                           	db	LOW(___str_52), HIGH(___str_52), UPPER(___str_52), LOW(___str_53), HIGH(___str_53), UPPER(___str_53), LOW(___str_52), HIGH(___str_52), UPPER(___str_52), LOW(___str_53), HIGH(___str_53), UPPER(___str_53)


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1

                                           udata_output_0	udata
                                           _ADread	res	2

                                           udata_output_1	udata
                                           _i	res	2

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_output__outputPrint	code
                                           _outputPrint:
                                           ;	.line	58; output.c	void outputPrint(int numTela, int idioma) {
000004   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000006   ffe5
000008   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00000a   ffd9
00000c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00000e   ffe5
000010   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
000012   ffe5
000014   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
000016   ffe5
000018   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00001a   ffe5
00001c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00001e   ffe5
000020   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
000022   ffe5
000024   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
000026   ffe5
000028   c007     movff   0x007, 0xfe5     	MOVFF	r0x07, POSTDEC1
00002a   ffe5
00002c   0e02     movlw   0x02             	MOVLW	0x02
00002e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
000030   f000
000032   0e03     movlw   0x03             	MOVLW	0x03
000034   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
000036   f001
000038   0e04     movlw   0x04             	MOVLW	0x04
00003a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00003c   f002
00003e   0e05     movlw   0x05             	MOVLW	0x05
000040   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
000042   f003
                                           ;	.line	60; output.c	if (numTela == STATE_OP) {
000044   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000046   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
000048   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00004a   d118     bra     0x00027c         	BRA	_00111_DS_
                                           ;	.line	61; output.c	lcdCommand(0x80);
00004c   0e80     movlw   0x80             	MOVLW	0x80
00004e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000050   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000052   f028
000054   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	62; output.c	lcdString(msgs[numTela][idioma]);
000056   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000058   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00005a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00005c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00005e   0e00     movlw   0x00             	MOVLW	0x00
000060   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000062   0e06     movlw   0x06             	MOVLW	0x06
000064   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000066   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000068   f027
00006a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00006c   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00006e   f005
000070   0e04     movlw   0x04             	MOVLW	0x04
000072   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000074   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000076   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000078   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
00007a   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00007c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00007e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000080   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000082   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000084   0e00     movlw   0x00             	MOVLW	0x00
000086   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000088   0e03     movlw   0x03             	MOVLW	0x03
00008a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00008c   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
00008e   f027
000090   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000092   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000094   f007
000096   0e04     movlw   0x04             	MOVLW	0x04
000098   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00009a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00009c   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00009e   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0000a0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0000a2   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0000a4   ffe9
0000a6   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0000a8   ffea
0000aa   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0000ac   f004
0000ae   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
0000b0   f005
0000b2   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0000b4   f006
0000b6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0000b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000ba   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0000bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000be   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000c2   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0000c4   f027
0000c6   0e03     movlw   0x03             	MOVLW	0x03
0000c8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	63; output.c	lcdString(" ");
0000ca   0e00     movlw   0x00             	MOVLW	UPPER(___str_0)
0000cc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0000ce   0e38     movlw   0x38             	MOVLW	HIGH(___str_0)
0000d0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0000d2   0e04     movlw   0x04             	MOVLW	LOW(___str_0)
0000d4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0000d6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0000d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000da   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0000dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0000e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000e2   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0000e4   f027
0000e6   0e03     movlw   0x03             	MOVLW	0x03
0000e8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0000ea   0102     movlb   0x2              	BANKSEL	(_ADread + 1)
                                           ;	.line	64; output.c	lcdInt(ADread);  //criar função getRead
0000ec   51ef     movf    0xef, 0x0, 0x1   	MOVF	(_ADread + 1), W, B
0000ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000f0   0102     movlb   0x2              	BANKSEL	_ADread
0000f2   51ee     movf    0xee, 0x0, 0x1   	MOVF	_ADread, W, B
0000f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0000f6   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
0000f8   f023
0000fa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0000fc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	65; output.c	lcdString("(uni)"); //colocar a unidade ou deixar assim genérico
0000fe   0e00     movlw   0x00             	MOVLW	UPPER(___str_1)
000100   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000102   0e38     movlw   0x38             	MOVLW	HIGH(___str_1)
000104   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000106   0e06     movlw   0x06             	MOVLW	LOW(___str_1)
000108   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00010a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00010c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00010e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000110   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000112   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000114   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000116   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000118   f027
00011a   0e03     movlw   0x03             	MOVLW	0x03
00011c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	66; output.c	lcdCommand(0xC0);
00011e   0ec0     movlw   0xc0             	MOVLW	0xc0
000120   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000122   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000124   f028
000126   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	67; output.c	lcdInt(getPeriodo(3));
000128   0e00     movlw   0x00             	MOVLW	0x00
00012a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00012c   0e03     movlw   0x03             	MOVLW	0x03
00012e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000130   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
000132   f029
000134   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000136   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000138   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00013a   6a05     clrf    0x05, 0x0        	CLRF	r0x05
00013c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00013e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000140   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000142   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000144   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000146   f023
000148   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00014a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	68; output.c	lcdString("/");
00014c   0e00     movlw   0x00             	MOVLW	UPPER(___str_2)
00014e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000150   0e38     movlw   0x38             	MOVLW	HIGH(___str_2)
000152   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000154   0e0c     movlw   0x0c             	MOVLW	LOW(___str_2)
000156   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000158   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00015a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00015c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00015e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000160   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000162   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000164   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000166   f027
000168   0e03     movlw   0x03             	MOVLW	0x03
00016a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	69; output.c	lcdInt(getPeriodo(4));
00016c   0e00     movlw   0x00             	MOVLW	0x00
00016e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000170   0e04     movlw   0x04             	MOVLW	0x04
000172   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000174   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
000176   f029
000178   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00017a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00017c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00017e   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000180   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000182   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000184   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000186   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000188   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
00018a   f023
00018c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00018e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	70; output.c	lcdString("/");
000190   0e00     movlw   0x00             	MOVLW	UPPER(___str_2)
000192   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000194   0e38     movlw   0x38             	MOVLW	HIGH(___str_2)
000196   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000198   0e0c     movlw   0x0c             	MOVLW	LOW(___str_2)
00019a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00019c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00019e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001a0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0001a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001a4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0001a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001a8   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0001aa   f027
0001ac   0e03     movlw   0x03             	MOVLW	0x03
0001ae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	71; output.c	lcdInt(getPeriodo(5));
0001b0   0e00     movlw   0x00             	MOVLW	0x00
0001b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001b4   0e05     movlw   0x05             	MOVLW	0x05
0001b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001b8   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
0001ba   f029
0001bc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0001be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0001c0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0001c2   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0001c4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0001c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001c8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0001ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001cc   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
0001ce   f023
0001d0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0001d2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	72; output.c	lcdString("  ");
0001d4   0e00     movlw   0x00             	MOVLW	UPPER(___str_3)
0001d6   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0001d8   0e38     movlw   0x38             	MOVLW	HIGH(___str_3)
0001da   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0001dc   0e0e     movlw   0x0e             	MOVLW	LOW(___str_3)
0001de   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0001e0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0001e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001e4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0001e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001e8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0001ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001ec   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0001ee   f027
0001f0   0e03     movlw   0x03             	MOVLW	0x03
0001f2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	73; output.c	lcdInt(getPeriodo(1));
0001f4   0e00     movlw   0x00             	MOVLW	0x00
0001f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001f8   0e01     movlw   0x01             	MOVLW	0x01
0001fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0001fc   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
0001fe   f029
000200   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000202   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000204   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000206   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000208   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00020a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00020c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00020e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000210   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000212   f023
000214   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000216   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	74; output.c	lcdString(":");
000218   0e00     movlw   0x00             	MOVLW	UPPER(___str_4)
00021a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00021c   0e38     movlw   0x38             	MOVLW	HIGH(___str_4)
00021e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000220   0e12     movlw   0x12             	MOVLW	LOW(___str_4)
000222   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000224   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000226   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000228   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00022a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00022c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00022e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000230   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000232   f027
000234   0e03     movlw   0x03             	MOVLW	0x03
000236   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	75; output.c	lcdInt(getPeriodo(2));
000238   0e00     movlw   0x00             	MOVLW	0x00
00023a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00023c   0e02     movlw   0x02             	MOVLW	0x02
00023e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000240   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
000242   f029
000244   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000246   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000248   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00024a   6a05     clrf    0x05, 0x0        	CLRF	r0x05
00024c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00024e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000250   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000252   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000254   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000256   f023
000258   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00025a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	76; output.c	lcdString(" ");
00025c   0e00     movlw   0x00             	MOVLW	UPPER(___str_0)
00025e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000260   0e38     movlw   0x38             	MOVLW	HIGH(___str_0)
000262   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000264   0e04     movlw   0x04             	MOVLW	LOW(___str_0)
000266   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000268   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00026a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00026c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00026e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000270   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000272   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000274   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000276   f027
000278   0e03     movlw   0x03             	MOVLW	0x03
00027a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00111_DS_:
                                           ;	.line	80; output.c	if (numTela == SECURITY_CONFIG) {
00027c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00027e   0a01     xorlw   0x01             	XORLW	0x01
000280   e102     bnz     0x000286         	BNZ	_00722_DS_
000282   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000284   e001     bz      0x000288         	BZ	_00723_DS_
                                           _00722_DS_:
000286   d144     bra     0x000510         	BRA	_00133_DS_
                                           _00723_DS_:
                                           ;	.line	81; output.c	lcdCommand(0x80);
000288   0e80     movlw   0x80             	MOVLW	0x80
00028a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00028c   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00028e   f028
000290   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	82; output.c	lcdString(msgs[numTela][idioma]);
000292   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000294   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000296   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000298   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00029a   0e00     movlw   0x00             	MOVLW	0x00
00029c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00029e   0e06     movlw   0x06             	MOVLW	0x06
0002a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002a2   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0002a4   f027
0002a6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0002a8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0002aa   f005
0002ac   0e04     movlw   0x04             	MOVLW	0x04
0002ae   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0002b0   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0002b2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002b4   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0002b6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002b8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0002ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002bc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0002be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002c0   0e00     movlw   0x00             	MOVLW	0x00
0002c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002c4   0e03     movlw   0x03             	MOVLW	0x03
0002c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002c8   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0002ca   f027
0002cc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0002ce   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
0002d0   f007
0002d2   0e04     movlw   0x04             	MOVLW	0x04
0002d4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0002d6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0002d8   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0002da   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0002dc   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0002de   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0002e0   ffe9
0002e2   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0002e4   ffea
0002e6   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0002e8   f004
0002ea   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
0002ec   f005
0002ee   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0002f0   f006
0002f2   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0002f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002f6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0002f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002fa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0002fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0002fe   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000300   f027
000302   0e03     movlw   0x03             	MOVLW	0x03
000304   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	83; output.c	lcdCommand(0xC0);
000306   0ec0     movlw   0xc0             	MOVLW	0xc0
000308   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00030a   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00030c   f028
00030e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	84; output.c	if(getSenha_i() == 0 ){
000310   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
000312   f02f
000314   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000316   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000318   f005
00031a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00031c   1005     iorwf   0x05, 0x0, 0x0   	IORWF	r0x05, W
00031e   e110     bnz     0x000340         	BNZ	_00113_DS_
                                           ;	.line	85; output.c	lcdString("                "); 
000320   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
000322   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000324   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
000326   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000328   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
00032a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00032c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00032e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000330   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000332   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000334   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000336   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000338   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00033a   f027
00033c   0e03     movlw   0x03             	MOVLW	0x03
00033e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00113_DS_:
                                           ;	.line	87; output.c	if(getSenha_i() == 1 ){
000340   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
000342   f02f
000344   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000346   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000348   f005
00034a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00034c   0a01     xorlw   0x01             	XORLW	0x01
00034e   e102     bnz     0x000354         	BNZ	_00724_DS_
000350   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000352   e001     bz      0x000356         	BZ	_00725_DS_
                                           _00724_DS_:
000354   d010     bra     0x000376         	BRA	_00115_DS_
                                           _00725_DS_:
                                           ;	.line	88; output.c	lcdString("*               "); 
000356   0e00     movlw   0x00             	MOVLW	UPPER(___str_6)
000358   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00035a   0e38     movlw   0x38             	MOVLW	HIGH(___str_6)
00035c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00035e   0e26     movlw   0x26             	MOVLW	LOW(___str_6)
000360   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000362   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000364   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000366   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000368   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00036a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00036c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00036e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000370   f027
000372   0e03     movlw   0x03             	MOVLW	0x03
000374   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00115_DS_:
                                           ;	.line	90; output.c	if(getSenha_i() == 2 ){ //colocar o nome certo do contador de digitos
000376   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
000378   f02f
00037a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00037c   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00037e   f005
000380   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000382   0a02     xorlw   0x02             	XORLW	0x02
000384   e102     bnz     0x00038a         	BNZ	_00726_DS_
000386   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000388   e001     bz      0x00038c         	BZ	_00727_DS_
                                           _00726_DS_:
00038a   d010     bra     0x0003ac         	BRA	_00117_DS_
                                           _00727_DS_:
                                           ;	.line	91; output.c	lcdString("**              "); 
00038c   0e00     movlw   0x00             	MOVLW	UPPER(___str_7)
00038e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000390   0e38     movlw   0x38             	MOVLW	HIGH(___str_7)
000392   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000394   0e38     movlw   0x38             	MOVLW	LOW(___str_7)
000396   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000398   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00039a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00039c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00039e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003a0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003a4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0003a6   f027
0003a8   0e03     movlw   0x03             	MOVLW	0x03
0003aa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00117_DS_:
                                           ;	.line	93; output.c	if(getSenha_i() == 3 ){ //colocar o nome certo do contador de digitos
0003ac   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0003ae   f02f
0003b0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0003b2   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0003b4   f005
0003b6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003b8   0a03     xorlw   0x03             	XORLW	0x03
0003ba   e102     bnz     0x0003c0         	BNZ	_00728_DS_
0003bc   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0003be   e001     bz      0x0003c2         	BZ	_00729_DS_
                                           _00728_DS_:
0003c0   d010     bra     0x0003e2         	BRA	_00119_DS_
                                           _00729_DS_:
                                           ;	.line	94; output.c	lcdString("***            "); 
0003c2   0e00     movlw   0x00             	MOVLW	UPPER(___str_8)
0003c4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0003c6   0e38     movlw   0x38             	MOVLW	HIGH(___str_8)
0003c8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0003ca   0e4a     movlw   0x4a             	MOVLW	LOW(___str_8)
0003cc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0003ce   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0003d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003d2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0003d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003d6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0003da   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0003dc   f027
0003de   0e03     movlw   0x03             	MOVLW	0x03
0003e0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00119_DS_:
                                           ;	.line	96; output.c	if(getSenha_i() == 4 ){ //colocar o nome certo do contador de digitos
0003e2   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0003e4   f02f
0003e6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0003e8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0003ea   f005
0003ec   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0003ee   0a04     xorlw   0x04             	XORLW	0x04
0003f0   e102     bnz     0x0003f6         	BNZ	_00730_DS_
0003f2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0003f4   e001     bz      0x0003f8         	BZ	_00731_DS_
                                           _00730_DS_:
0003f6   d010     bra     0x000418         	BRA	_00121_DS_
                                           _00731_DS_:
                                           ;	.line	97; output.c	lcdString("****           "); 
0003f8   0e00     movlw   0x00             	MOVLW	UPPER(___str_9)
0003fa   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0003fc   0e38     movlw   0x38             	MOVLW	HIGH(___str_9)
0003fe   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000400   0e5a     movlw   0x5a             	MOVLW	LOW(___str_9)
000402   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000404   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000406   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000408   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00040a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00040c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00040e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000410   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000412   f027
000414   0e03     movlw   0x03             	MOVLW	0x03
000416   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00121_DS_:
                                           ;	.line	99; output.c	if(getSenha_i() == 5 ){ //colocar o nome certo do contador de digitos
000418   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
00041a   f02f
00041c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00041e   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000420   f005
000422   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000424   0a05     xorlw   0x05             	XORLW	0x05
000426   e102     bnz     0x00042c         	BNZ	_00732_DS_
000428   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00042a   e001     bz      0x00042e         	BZ	_00733_DS_
                                           _00732_DS_:
00042c   d023     bra     0x000474         	BRA	_00124_DS_
                                           _00733_DS_:
                                           ;	.line	100; output.c	lcdString("*****          ");
00042e   0e00     movlw   0x00             	MOVLW	UPPER(___str_10)
000430   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000432   0e38     movlw   0x38             	MOVLW	HIGH(___str_10)
000434   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000436   0e6a     movlw   0x6a             	MOVLW	LOW(___str_10)
000438   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00043a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00043c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00043e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000440   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000442   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000444   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000446   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000448   f027
00044a   0e03     movlw   0x03             	MOVLW	0x03
00044c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00044e   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	101; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
000450   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
000452   0102     movlb   0x2              	BANKSEL	(_i + 1)
000454   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00338_DS_:
                                           ;	.line	102; output.c	Delay2ms(); 
000456   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
000458   f02d
00045a   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	101; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
00045c   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
00045e   d002     bra     0x000464         	BRA	_10110_DS_
000460   0102     movlb   0x2              	BANKSEL	(_i + 1)
000462   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _10110_DS_:
000464   0e05     movlw   0x05             	MOVLW	0x05
000466   0102     movlb   0x2              	BANKSEL	(_i + 1)
000468   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
00046a   e103     bnz     0x000472         	BNZ	_00734_DS_
00046c   0edd     movlw   0xdd             	MOVLW	0xdd
00046e   0102     movlb   0x2              	BANKSEL	_i
000470   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00734_DS_:
000472   e3f1     bnc     0x000456         	BNC	_00338_DS_
                                           _00124_DS_:
                                           ;	.line	105; output.c	if(getSenha_try() == 3){
000474   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
000476   f02f
000478   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00047a   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00047c   f005
00047e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000480   0a03     xorlw   0x03             	XORLW	0x03
000482   e102     bnz     0x000488         	BNZ	_00735_DS_
000484   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000486   e001     bz      0x00048a         	BZ	_00736_DS_
                                           _00735_DS_:
000488   d043     bra     0x000510         	BRA	_00133_DS_
                                           _00736_DS_:
                                           ;	.line	106; output.c	lcdCommand(0xC0);
00048a   0ec0     movlw   0xc0             	MOVLW	0xc0
00048c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00048e   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000490   f028
000492   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	107; output.c	if (getLanguage() == 0) {
000494   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000496   f02f
000498   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00049a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00049c   e110     bnz     0x0004be         	BNZ	_00126_DS_
                                           ;	.line	108; output.c	lcdString("Senha incorreta!");
00049e   0e00     movlw   0x00             	MOVLW	UPPER(___str_11)
0004a0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0004a2   0e38     movlw   0x38             	MOVLW	HIGH(___str_11)
0004a4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0004a6   0e7a     movlw   0x7a             	MOVLW	LOW(___str_11)
0004a8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0004aa   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0004ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004ae   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0004b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004b2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004b6   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0004b8   f027
0004ba   0e03     movlw   0x03             	MOVLW	0x03
0004bc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00126_DS_:
                                           ;	.line	110; output.c	if (getLanguage() == 1) {
0004be   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
0004c0   f02f
0004c2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0004c4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004c6   0a01     xorlw   0x01             	XORLW	0x01
0004c8   e110     bnz     0x0004ea         	BNZ	_00128_DS_
                                           ;	.line	111; output.c	lcdString("Wrong password! ");
0004ca   0e00     movlw   0x00             	MOVLW	UPPER(___str_12)
0004cc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0004ce   0e38     movlw   0x38             	MOVLW	HIGH(___str_12)
0004d0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0004d2   0e8c     movlw   0x8c             	MOVLW	LOW(___str_12)
0004d4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0004d6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0004d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004da   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0004dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0004e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0004e2   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0004e4   f027
0004e6   0e03     movlw   0x03             	MOVLW	0x03
0004e8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00128_DS_:
0004ea   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	113; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
0004ec   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
0004ee   0102     movlb   0x2              	BANKSEL	(_i + 1)
0004f0   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00340_DS_:
                                           ;	.line	114; output.c	Delay2ms(); 
0004f2   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
0004f4   f02d
0004f6   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	113; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
0004f8   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
0004fa   d002     bra     0x000500         	BRA	_20111_DS_
0004fc   0102     movlb   0x2              	BANKSEL	(_i + 1)
0004fe   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _20111_DS_:
000500   0e05     movlw   0x05             	MOVLW	0x05
000502   0102     movlb   0x2              	BANKSEL	(_i + 1)
000504   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
000506   e103     bnz     0x00050e         	BNZ	_00739_DS_
000508   0edd     movlw   0xdd             	MOVLW	0xdd
00050a   0102     movlb   0x2              	BANKSEL	_i
00050c   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00739_DS_:
00050e   e3f1     bnc     0x0004f2         	BNC	_00340_DS_
                                           _00133_DS_:
                                           ;	.line	119; output.c	if (numTela == STATE_ALARME) {
000510   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000512   0a02     xorlw   0x02             	XORLW	0x02
000514   e102     bnz     0x00051a         	BNZ	_00740_DS_
000516   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000518   e001     bz      0x00051c         	BZ	_00741_DS_
                                           _00740_DS_:
00051a   d0b7     bra     0x00068a         	BRA	_00135_DS_
                                           _00741_DS_:
                                           ;	.line	120; output.c	lcdCommand(0x80);
00051c   0e80     movlw   0x80             	MOVLW	0x80
00051e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000520   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000522   f028
000524   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	121; output.c	lcdString(msgs[numTela][idioma]);
000526   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000528   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00052a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00052c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00052e   0e00     movlw   0x00             	MOVLW	0x00
000530   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000532   0e06     movlw   0x06             	MOVLW	0x06
000534   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000536   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000538   f027
00053a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00053c   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00053e   f005
000540   0e04     movlw   0x04             	MOVLW	0x04
000542   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000544   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000546   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000548   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
00054a   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00054c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00054e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000550   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000552   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000554   0e00     movlw   0x00             	MOVLW	0x00
000556   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000558   0e03     movlw   0x03             	MOVLW	0x03
00055a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00055c   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
00055e   f027
000560   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000562   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000564   f007
000566   0e04     movlw   0x04             	MOVLW	0x04
000568   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00056a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00056c   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00056e   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000570   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000572   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000574   ffe9
000576   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000578   ffea
00057a   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00057c   f004
00057e   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000580   f005
000582   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000584   f006
000586   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000588   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00058a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00058c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00058e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000590   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000592   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000594   f027
000596   0e03     movlw   0x03             	MOVLW	0x03
000598   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	122; output.c	lcdCommand(0xC0);
00059a   0ec0     movlw   0xc0             	MOVLW	0xc0
00059c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00059e   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0005a0   f028
0005a2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	123; output.c	lcdString("   (");
0005a4   0e00     movlw   0x00             	MOVLW	UPPER(___str_13)
0005a6   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005a8   0e38     movlw   0x38             	MOVLW	HIGH(___str_13)
0005aa   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0005ac   0e9e     movlw   0x9e             	MOVLW	LOW(___str_13)
0005ae   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0005b0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0005b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0005b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005b8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005bc   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0005be   f027
0005c0   0e03     movlw   0x03             	MOVLW	0x03
0005c2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	124; output.c	lcdInt(getAlarmLevel(1));
0005c4   0e00     movlw   0x00             	MOVLW	0x00
0005c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005c8   0e01     movlw   0x01             	MOVLW	0x01
0005ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005cc   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
0005ce   f02c
0005d0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0005d2   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0005d4   f005
0005d6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0005d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0005da   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0005dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005de   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0005e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005e2   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
0005e4   f023
0005e6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0005e8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	125; output.c	lcdString(",");
0005ea   0e00     movlw   0x00             	MOVLW	UPPER(___str_14)
0005ec   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0005ee   0e38     movlw   0x38             	MOVLW	HIGH(___str_14)
0005f0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0005f2   0ea4     movlw   0xa4             	MOVLW	LOW(___str_14)
0005f4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0005f6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0005f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005fa   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0005fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0005fe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000600   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000602   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000604   f027
000606   0e03     movlw   0x03             	MOVLW	0x03
000608   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	126; output.c	lcdInt(getAlarmLevel(2));
00060a   0e00     movlw   0x00             	MOVLW	0x00
00060c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00060e   0e02     movlw   0x02             	MOVLW	0x02
000610   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000612   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
000614   f02c
000616   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000618   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00061a   f005
00061c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00061e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000620   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000622   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000624   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000626   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000628   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
00062a   f023
00062c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00062e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	127; output.c	lcdString(") ");
000630   0e00     movlw   0x00             	MOVLW	UPPER(___str_15)
000632   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000634   0e38     movlw   0x38             	MOVLW	HIGH(___str_15)
000636   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000638   0ea6     movlw   0xa6             	MOVLW	LOW(___str_15)
00063a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00063c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00063e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000640   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000642   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000644   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000646   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000648   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00064a   f027
00064c   0e03     movlw   0x03             	MOVLW	0x03
00064e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	128; output.c	lcdInt(getMult());
000650   ec4f     call    0x005e9e, 0x0    	CALL	_getMult
000652   f02f
000654   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000656   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000658   f005
00065a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00065c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00065e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000660   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000662   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000664   f023
000666   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000668   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	129; output.c	lcdString("   ");
00066a   0e00     movlw   0x00             	MOVLW	UPPER(___str_16)
00066c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00066e   0e38     movlw   0x38             	MOVLW	HIGH(___str_16)
000670   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000672   0eaa     movlw   0xaa             	MOVLW	LOW(___str_16)
000674   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000676   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000678   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00067a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00067c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00067e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000680   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000682   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000684   f027
000686   0e03     movlw   0x03             	MOVLW	0x03
000688   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00135_DS_:
                                           ;	.line	132; output.c	if (numTela == CONFIG_ALARME) {
00068a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00068c   0a03     xorlw   0x03             	XORLW	0x03
00068e   e102     bnz     0x000694         	BNZ	_00742_DS_
000690   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000692   e001     bz      0x000696         	BZ	_00743_DS_
                                           _00742_DS_:
000694   d06f     bra     0x000774         	BRA	_00141_DS_
                                           _00743_DS_:
                                           ;	.line	133; output.c	lcdCommand(0x80);
000696   0e80     movlw   0x80             	MOVLW	0x80
000698   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00069a   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00069c   f028
00069e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	134; output.c	lcdString(msgs[numTela][idioma]);
0006a0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0006a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006a4   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0006a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006a8   0e00     movlw   0x00             	MOVLW	0x00
0006aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ac   0e06     movlw   0x06             	MOVLW	0x06
0006ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006b0   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0006b2   f027
0006b4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0006b6   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0006b8   f005
0006ba   0e04     movlw   0x04             	MOVLW	0x04
0006bc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0006be   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0006c0   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0006c2   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0006c4   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0006c6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0006c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ca   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0006cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006ce   0e00     movlw   0x00             	MOVLW	0x00
0006d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006d2   0e03     movlw   0x03             	MOVLW	0x03
0006d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0006d6   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0006d8   f027
0006da   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0006dc   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
0006de   f007
0006e0   0e04     movlw   0x04             	MOVLW	0x04
0006e2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0006e4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0006e6   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0006e8   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0006ea   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0006ec   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0006ee   ffe9
0006f0   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0006f2   ffea
0006f4   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0006f6   f004
0006f8   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
0006fa   f005
0006fc   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0006fe   f006
000700   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000702   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000704   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000706   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000708   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00070a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00070c   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00070e   f027
000710   0e03     movlw   0x03             	MOVLW	0x03
000712   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	135; output.c	lcdCommand(0xC0);
000714   0ec0     movlw   0xc0             	MOVLW	0xc0
000716   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000718   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00071a   f028
00071c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	136; output.c	if (getLanguage() == 0) {
00071e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000720   f02f
000722   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000724   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000726   e110     bnz     0x000748         	BNZ	_00137_DS_
                                           ;	.line	137; output.c	lcdString(" Configura tempo");
000728   0e00     movlw   0x00             	MOVLW	UPPER(___str_17)
00072a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00072c   0e38     movlw   0x38             	MOVLW	HIGH(___str_17)
00072e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000730   0eae     movlw   0xae             	MOVLW	LOW(___str_17)
000732   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000734   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000736   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000738   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00073a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00073c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00073e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000740   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000742   f027
000744   0e03     movlw   0x03             	MOVLW	0x03
000746   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00137_DS_:
                                           ;	.line	139; output.c	if (getLanguage() == 1) {
000748   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
00074a   f02f
00074c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00074e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000750   0a01     xorlw   0x01             	XORLW	0x01
000752   e110     bnz     0x000774         	BNZ	_00141_DS_
                                           ;	.line	140; output.c	lcdString(" Set time:       ");
000754   0e00     movlw   0x00             	MOVLW	UPPER(___str_18)
000756   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000758   0e38     movlw   0x38             	MOVLW	HIGH(___str_18)
00075a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00075c   0ec0     movlw   0xc0             	MOVLW	LOW(___str_18)
00075e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000760   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000762   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000764   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000766   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000768   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00076a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00076c   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00076e   f027
000770   0e03     movlw   0x03             	MOVLW	0x03
000772   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00141_DS_:
                                           ;	.line	145; output.c	if (numTela == ALARME_ALTO_DEC || numTela == ALARME_ALTO_UNI 
000774   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000776   0a04     xorlw   0x04             	XORLW	0x04
000778   e102     bnz     0x00077e         	BNZ	_00747_DS_
00077a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00077c   e010     bz      0x00079e         	BZ	_00142_DS_
                                           _00747_DS_:
                                           ;	.line	146; output.c	|| numTela == ALARME_BAIXO_DEC || numTela == ALARME_BAIXO_UNI ) {
00077e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000780   0a05     xorlw   0x05             	XORLW	0x05
000782   e102     bnz     0x000788         	BNZ	_00749_DS_
000784   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000786   e00b     bz      0x00079e         	BZ	_00142_DS_
                                           _00749_DS_:
000788   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00078a   0a06     xorlw   0x06             	XORLW	0x06
00078c   e102     bnz     0x000792         	BNZ	_00751_DS_
00078e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000790   e006     bz      0x00079e         	BZ	_00142_DS_
                                           _00751_DS_:
000792   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000794   0a07     xorlw   0x07             	XORLW	0x07
000796   e102     bnz     0x00079c         	BNZ	_00752_DS_
000798   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00079a   e001     bz      0x00079e         	BZ	_00142_DS_
                                           _00752_DS_:
00079c   d08a     bra     0x0008b2         	BRA	_00143_DS_
                                           _00142_DS_:
                                           ;	.line	147; output.c	lcdCommand(0x80);
00079e   0e80     movlw   0x80             	MOVLW	0x80
0007a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007a2   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0007a4   f028
0007a6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	148; output.c	lcdString(msgs[numTela][idioma]);
0007a8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0007aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007ac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0007ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007b0   0e00     movlw   0x00             	MOVLW	0x00
0007b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007b4   0e06     movlw   0x06             	MOVLW	0x06
0007b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007b8   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0007ba   f027
0007bc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0007be   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0007c0   f005
0007c2   0e04     movlw   0x04             	MOVLW	0x04
0007c4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0007c6   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0007c8   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0007ca   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0007cc   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0007ce   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0007d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007d2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0007d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007d6   0e00     movlw   0x00             	MOVLW	0x00
0007d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007da   0e03     movlw   0x03             	MOVLW	0x03
0007dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0007de   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0007e0   f027
0007e2   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0007e4   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
0007e6   f007
0007e8   0e04     movlw   0x04             	MOVLW	0x04
0007ea   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0007ec   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0007ee   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0007f0   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0007f2   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0007f4   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0007f6   ffe9
0007f8   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0007fa   ffea
0007fc   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0007fe   f004
000800   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000802   f005
000804   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000806   f006
000808   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00080a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00080c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00080e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000810   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000812   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000814   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000816   f027
000818   0e03     movlw   0x03             	MOVLW	0x03
00081a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	149; output.c	lcdCommand(0xC0);
00081c   0ec0     movlw   0xc0             	MOVLW	0xc0
00081e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000820   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000822   f028
000824   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	150; output.c	lcdString("      ");
000826   0e00     movlw   0x00             	MOVLW	UPPER(___str_19)
000828   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00082a   0e38     movlw   0x38             	MOVLW	HIGH(___str_19)
00082c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00082e   0ed2     movlw   0xd2             	MOVLW	LOW(___str_19)
000830   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000832   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000834   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000836   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000838   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00083a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00083c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00083e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000840   f027
000842   0e03     movlw   0x03             	MOVLW	0x03
000844   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	151; output.c	lcdInt(getAlarmLevel(1));
000846   0e00     movlw   0x00             	MOVLW	0x00
000848   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00084a   0e01     movlw   0x01             	MOVLW	0x01
00084c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00084e   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
000850   f02c
000852   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000854   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000856   f005
000858   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00085a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00085c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00085e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000860   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000862   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000864   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000866   f023
000868   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00086a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	152; output.c	lcdString("      ");
00086c   0e00     movlw   0x00             	MOVLW	UPPER(___str_19)
00086e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000870   0e38     movlw   0x38             	MOVLW	HIGH(___str_19)
000872   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000874   0ed2     movlw   0xd2             	MOVLW	LOW(___str_19)
000876   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000878   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00087a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00087c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00087e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000880   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000882   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000884   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000886   f027
000888   0e03     movlw   0x03             	MOVLW	0x03
00088a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	153; output.c	lcdInt(getAlarmLevel(2));
00088c   0e00     movlw   0x00             	MOVLW	0x00
00088e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000890   0e02     movlw   0x02             	MOVLW	0x02
000892   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000894   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
000896   f02c
000898   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00089a   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00089c   f005
00089e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0008a0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0008a2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0008a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008a6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0008a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008aa   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
0008ac   f023
0008ae   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0008b0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00143_DS_:
                                           ;	.line	157; output.c	if (numTela == STATE_TEMPO) {
0008b2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008b4   0a08     xorlw   0x08             	XORLW	0x08
0008b6   e102     bnz     0x0008bc         	BNZ	_00754_DS_
0008b8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008ba   e001     bz      0x0008be         	BZ	_00755_DS_
                                           _00754_DS_:
0008bc   d06f     bra     0x00099c         	BRA	_00152_DS_
                                           _00755_DS_:
                                           ;	.line	158; output.c	lcdCommand(0x80);
0008be   0e80     movlw   0x80             	MOVLW	0x80
0008c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008c2   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0008c4   f028
0008c6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	159; output.c	lcdString(msgs[numTela][idioma]);
0008c8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0008ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008cc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0008ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008d0   0e00     movlw   0x00             	MOVLW	0x00
0008d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008d4   0e06     movlw   0x06             	MOVLW	0x06
0008d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008d8   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0008da   f027
0008dc   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0008de   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0008e0   f005
0008e2   0e04     movlw   0x04             	MOVLW	0x04
0008e4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0008e6   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0008e8   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0008ea   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0008ec   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0008ee   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0008f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008f2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0008f4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008f6   0e00     movlw   0x00             	MOVLW	0x00
0008f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008fa   0e03     movlw   0x03             	MOVLW	0x03
0008fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0008fe   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000900   f027
000902   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000904   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000906   f007
000908   0e04     movlw   0x04             	MOVLW	0x04
00090a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00090c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00090e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000910   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000912   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000914   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000916   ffe9
000918   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00091a   ffea
00091c   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00091e   f004
000920   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000922   f005
000924   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000926   f006
000928   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00092a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00092c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00092e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000930   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000932   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000934   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000936   f027
000938   0e03     movlw   0x03             	MOVLW	0x03
00093a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	160; output.c	lcdCommand(0xC0);
00093c   0ec0     movlw   0xc0             	MOVLW	0xc0
00093e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000940   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000942   f028
000944   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	161; output.c	if (getLanguage() == 0) {
000946   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000948   f02f
00094a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00094c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00094e   e110     bnz     0x000970         	BNZ	_00148_DS_
                                           ;	.line	162; output.c	lcdString("*Configura tempo");
000950   0e00     movlw   0x00             	MOVLW	UPPER(___str_20)
000952   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000954   0e38     movlw   0x38             	MOVLW	HIGH(___str_20)
000956   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000958   0eda     movlw   0xda             	MOVLW	LOW(___str_20)
00095a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00095c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00095e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000960   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000962   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000964   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000966   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000968   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00096a   f027
00096c   0e03     movlw   0x03             	MOVLW	0x03
00096e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00148_DS_:
                                           ;	.line	164; output.c	if (getLanguage() == 1) {
000970   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000972   f02f
000974   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000976   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000978   0a01     xorlw   0x01             	XORLW	0x01
00097a   e110     bnz     0x00099c         	BNZ	_00152_DS_
                                           ;	.line	165; output.c	lcdString("*Set time:      ");
00097c   0e00     movlw   0x00             	MOVLW	UPPER(___str_21)
00097e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000980   0e38     movlw   0x38             	MOVLW	HIGH(___str_21)
000982   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000984   0eec     movlw   0xec             	MOVLW	LOW(___str_21)
000986   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000988   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00098a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00098c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00098e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000990   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000992   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000994   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000996   f027
000998   0e03     movlw   0x03             	MOVLW	0x03
00099a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00152_DS_:
                                           ;	.line	170; output.c	if (numTela == CONFIG_TEMPO_DEC || numTela == CONFIG_TEMPO_UNI
00099c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00099e   0a09     xorlw   0x09             	XORLW	0x09
0009a0   e102     bnz     0x0009a6         	BNZ	_00759_DS_
0009a2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009a4   e00b     bz      0x0009bc         	BZ	_00153_DS_
                                           _00759_DS_:
                                           ;	.line	171; output.c	|| numTela == CONFIG_TEMPO_MULT) {
0009a6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009a8   0a0a     xorlw   0x0a             	XORLW	0x0a
0009aa   e102     bnz     0x0009b0         	BNZ	_00761_DS_
0009ac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009ae   e006     bz      0x0009bc         	BZ	_00153_DS_
                                           _00761_DS_:
0009b0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009b2   0a0b     xorlw   0x0b             	XORLW	0x0b
0009b4   e102     bnz     0x0009ba         	BNZ	_00762_DS_
0009b6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009b8   e001     bz      0x0009bc         	BZ	_00153_DS_
                                           _00762_DS_:
0009ba   d08e     bra     0x000ad8         	BRA	_00154_DS_
                                           _00153_DS_:
                                           ;	.line	172; output.c	lcdCommand(0x80);
0009bc   0e80     movlw   0x80             	MOVLW	0x80
0009be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009c0   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0009c2   f028
0009c4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	173; output.c	lcdString(msgs[numTela][idioma]);
0009c6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0009c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0009cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009ce   0e00     movlw   0x00             	MOVLW	0x00
0009d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009d2   0e06     movlw   0x06             	MOVLW	0x06
0009d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009d6   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0009d8   f027
0009da   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0009dc   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0009de   f005
0009e0   0e04     movlw   0x04             	MOVLW	0x04
0009e2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0009e4   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0009e6   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0009e8   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0009ea   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0009ec   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0009ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009f0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0009f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009f4   0e00     movlw   0x00             	MOVLW	0x00
0009f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009f8   0e03     movlw   0x03             	MOVLW	0x03
0009fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0009fc   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0009fe   f027
000a00   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000a02   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000a04   f007
000a06   0e04     movlw   0x04             	MOVLW	0x04
000a08   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000a0a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000a0c   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000a0e   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000a10   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000a12   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000a14   ffe9
000a16   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000a18   ffea
000a1a   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000a1c   f004
000a1e   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000a20   f005
000a22   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000a24   f006
000a26   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000a28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a2a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000a2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a2e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a32   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000a34   f027
000a36   0e03     movlw   0x03             	MOVLW	0x03
000a38   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	174; output.c	lcdCommand(0xC0);
000a3a   0ec0     movlw   0xc0             	MOVLW	0xc0
000a3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a3e   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000a40   f028
000a42   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	175; output.c	lcdString("  ");
000a44   0e00     movlw   0x00             	MOVLW	UPPER(___str_3)
000a46   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000a48   0e38     movlw   0x38             	MOVLW	HIGH(___str_3)
000a4a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000a4c   0e0e     movlw   0x0e             	MOVLW	LOW(___str_3)
000a4e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000a50   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000a52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a54   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000a56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a58   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a5c   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000a5e   f027
000a60   0e03     movlw   0x03             	MOVLW	0x03
000a62   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	176; output.c	lcdInt(getTime()); // ver com o eudes o nome da função
000a64   ec5a     call    0x005eb4, 0x0    	CALL	_getTime
000a66   f02f
000a68   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000a6a   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000a6c   f005
000a6e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000a70   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a72   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a74   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a76   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000a78   f023
000a7a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000a7c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	177; output.c	lcdString("  ");
000a7e   0e00     movlw   0x00             	MOVLW	UPPER(___str_3)
000a80   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000a82   0e38     movlw   0x38             	MOVLW	HIGH(___str_3)
000a84   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000a86   0e0e     movlw   0x0e             	MOVLW	LOW(___str_3)
000a88   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000a8a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000a8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a8e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000a90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a92   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000a94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000a96   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000a98   f027
000a9a   0e03     movlw   0x03             	MOVLW	0x03
000a9c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	178; output.c	lcdInt(getMult()); // ver nome certo
000a9e   ec4f     call    0x005e9e, 0x0    	CALL	_getMult
000aa0   f02f
000aa2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000aa4   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000aa6   f005
000aa8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000aaa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000aac   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000aae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ab0   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000ab2   f023
000ab4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000ab6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	179; output.c	lcdString("       ");
000ab8   0e00     movlw   0x00             	MOVLW	UPPER(___str_22)
000aba   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000abc   0e38     movlw   0x38             	MOVLW	HIGH(___str_22)
000abe   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000ac0   0efe     movlw   0xfe             	MOVLW	LOW(___str_22)
000ac2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000ac4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000ac6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ac8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000aca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000acc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000ace   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ad0   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000ad2   f027
000ad4   0e03     movlw   0x03             	MOVLW	0x03
000ad6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00154_DS_:
                                           ;	.line	183; output.c	if (numTela == STATE_IDIOMA) {
000ad8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000ada   0a0c     xorlw   0x0c             	XORLW	0x0c
000adc   e102     bnz     0x000ae2         	BNZ	_00764_DS_
000ade   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000ae0   e001     bz      0x000ae4         	BZ	_00765_DS_
                                           _00764_DS_:
000ae2   d06f     bra     0x000bc2         	BRA	_00162_DS_
                                           _00765_DS_:
                                           ;	.line	184; output.c	lcdCommand(0x80);
000ae4   0e80     movlw   0x80             	MOVLW	0x80
000ae6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ae8   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000aea   f028
000aec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	185; output.c	lcdString(msgs[numTela][idioma]);
000aee   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000af0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000af2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000af4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000af6   0e00     movlw   0x00             	MOVLW	0x00
000af8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000afa   0e06     movlw   0x06             	MOVLW	0x06
000afc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000afe   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000b00   f027
000b02   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000b04   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000b06   f005
000b08   0e04     movlw   0x04             	MOVLW	0x04
000b0a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000b0c   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000b0e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000b10   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
000b12   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000b14   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000b16   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b18   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000b1a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b1c   0e00     movlw   0x00             	MOVLW	0x00
000b1e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b20   0e03     movlw   0x03             	MOVLW	0x03
000b22   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b24   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000b26   f027
000b28   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000b2a   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000b2c   f007
000b2e   0e04     movlw   0x04             	MOVLW	0x04
000b30   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000b32   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000b34   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000b36   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000b38   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000b3a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000b3c   ffe9
000b3e   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000b40   ffea
000b42   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000b44   f004
000b46   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000b48   f005
000b4a   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000b4c   f006
000b4e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000b50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b52   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000b54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b56   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000b58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b5a   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000b5c   f027
000b5e   0e03     movlw   0x03             	MOVLW	0x03
000b60   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	186; output.c	lcdCommand(0xC0);
000b62   0ec0     movlw   0xc0             	MOVLW	0xc0
000b64   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b66   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000b68   f028
000b6a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	187; output.c	if (getLanguage() == 0) {
000b6c   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000b6e   f02f
000b70   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000b72   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000b74   e110     bnz     0x000b96         	BNZ	_00158_DS_
                                           ;	.line	188; output.c	lcdString("Portugues       ");
000b76   0e00     movlw   0x00             	MOVLW	UPPER(___str_23)
000b78   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000b7a   0e39     movlw   0x39             	MOVLW	HIGH(___str_23)
000b7c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000b7e   0e06     movlw   0x06             	MOVLW	LOW(___str_23)
000b80   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000b82   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000b84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b86   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000b88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b8a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000b8c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000b8e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000b90   f027
000b92   0e03     movlw   0x03             	MOVLW	0x03
000b94   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00158_DS_:
                                           ;	.line	190; output.c	if (getLanguage() == 1) {
000b96   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000b98   f02f
000b9a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000b9c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000b9e   0a01     xorlw   0x01             	XORLW	0x01
000ba0   e110     bnz     0x000bc2         	BNZ	_00162_DS_
                                           ;	.line	191; output.c	lcdString("English         ");
000ba2   0e00     movlw   0x00             	MOVLW	UPPER(___str_24)
000ba4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000ba6   0e39     movlw   0x39             	MOVLW	HIGH(___str_24)
000ba8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000baa   0e18     movlw   0x18             	MOVLW	LOW(___str_24)
000bac   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000bae   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000bb0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bb2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000bb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bb6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000bb8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bba   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000bbc   f027
000bbe   0e03     movlw   0x03             	MOVLW	0x03
000bc0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00162_DS_:
                                           ;	.line	195; output.c	if (numTela == CONFIG_IDIOMA) {
000bc2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000bc4   0a0d     xorlw   0x0d             	XORLW	0x0d
000bc6   e102     bnz     0x000bcc         	BNZ	_00768_DS_
000bc8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000bca   e001     bz      0x000bce         	BZ	_00769_DS_
                                           _00768_DS_:
000bcc   d06f     bra     0x000cac         	BRA	_00168_DS_
                                           _00769_DS_:
                                           ;	.line	196; output.c	lcdCommand(0x80);
000bce   0e80     movlw   0x80             	MOVLW	0x80
000bd0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bd2   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000bd4   f028
000bd6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	197; output.c	lcdString(msgs[numTela][idioma]);
000bd8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000bda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000bdc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000bde   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000be0   0e00     movlw   0x00             	MOVLW	0x00
000be2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000be4   0e06     movlw   0x06             	MOVLW	0x06
000be6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000be8   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000bea   f027
000bec   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000bee   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000bf0   f005
000bf2   0e04     movlw   0x04             	MOVLW	0x04
000bf4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000bf6   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000bf8   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000bfa   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
000bfc   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000bfe   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000c00   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c02   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000c04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c06   0e00     movlw   0x00             	MOVLW	0x00
000c08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c0a   0e03     movlw   0x03             	MOVLW	0x03
000c0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c0e   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000c10   f027
000c12   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000c14   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000c16   f007
000c18   0e04     movlw   0x04             	MOVLW	0x04
000c1a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000c1c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000c1e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000c20   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000c22   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000c24   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000c26   ffe9
000c28   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000c2a   ffea
000c2c   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000c2e   f004
000c30   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000c32   f005
000c34   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000c36   f006
000c38   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000c3a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c3c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000c3e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c40   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c44   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000c46   f027
000c48   0e03     movlw   0x03             	MOVLW	0x03
000c4a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	198; output.c	lcdCommand(0xC0);
000c4c   0ec0     movlw   0xc0             	MOVLW	0xc0
000c4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c50   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000c52   f028
000c54   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	199; output.c	if (getLanguage() == 0) {
000c56   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000c58   f02f
000c5a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000c5c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c5e   e110     bnz     0x000c80         	BNZ	_00164_DS_
                                           ;	.line	200; output.c	lcdString("*Portugues      ");
000c60   0e00     movlw   0x00             	MOVLW	UPPER(___str_25)
000c62   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000c64   0e39     movlw   0x39             	MOVLW	HIGH(___str_25)
000c66   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000c68   0e2a     movlw   0x2a             	MOVLW	LOW(___str_25)
000c6a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000c6c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000c6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c70   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000c72   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c74   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c78   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000c7a   f027
000c7c   0e03     movlw   0x03             	MOVLW	0x03
000c7e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00164_DS_:
                                           ;	.line	202; output.c	if (getLanguage() == 1) {
000c80   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000c82   f02f
000c84   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000c86   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000c88   0a01     xorlw   0x01             	XORLW	0x01
000c8a   e110     bnz     0x000cac         	BNZ	_00168_DS_
                                           ;	.line	203; output.c	lcdString("*English        ");
000c8c   0e00     movlw   0x00             	MOVLW	UPPER(___str_26)
000c8e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000c90   0e39     movlw   0x39             	MOVLW	HIGH(___str_26)
000c92   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000c94   0e3c     movlw   0x3c             	MOVLW	LOW(___str_26)
000c96   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000c98   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000c9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000c9c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000c9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ca0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000ca2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ca4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000ca6   f027
000ca8   0e03     movlw   0x03             	MOVLW	0x03
000caa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00168_DS_:
                                           ;	.line	207; output.c	if (numTela == STATE_PERIODO) {
000cac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000cae   0a0e     xorlw   0x0e             	XORLW	0x0e
000cb0   e102     bnz     0x000cb6         	BNZ	_00772_DS_
000cb2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000cb4   e001     bz      0x000cb8         	BZ	_00773_DS_
                                           _00772_DS_:
000cb6   d054     bra     0x000d60         	BRA	_00170_DS_
                                           _00773_DS_:
                                           ;	.line	208; output.c	lcdCommand(0x80);
000cb8   0e80     movlw   0x80             	MOVLW	0x80
000cba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cbc   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000cbe   f028
000cc0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	209; output.c	lcdString(msgs[numTela][idioma]);   
000cc2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000cc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cc6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000cc8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cca   0e00     movlw   0x00             	MOVLW	0x00
000ccc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cce   0e06     movlw   0x06             	MOVLW	0x06
000cd0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cd2   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000cd4   f027
000cd6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000cd8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000cda   f005
000cdc   0e04     movlw   0x04             	MOVLW	0x04
000cde   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000ce0   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000ce2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000ce4   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
000ce6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000ce8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000cea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000cee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf0   0e00     movlw   0x00             	MOVLW	0x00
000cf2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf4   0e03     movlw   0x03             	MOVLW	0x03
000cf6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000cf8   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000cfa   f027
000cfc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000cfe   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000d00   f007
000d02   0e04     movlw   0x04             	MOVLW	0x04
000d04   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000d06   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000d08   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000d0a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000d0c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000d0e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000d10   ffe9
000d12   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000d14   ffea
000d16   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000d18   f004
000d1a   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000d1c   f005
000d1e   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000d20   f006
000d22   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000d24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d26   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000d28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d2a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000d2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d2e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000d30   f027
000d32   0e03     movlw   0x03             	MOVLW	0x03
000d34   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	210; output.c	lcdCommand(0xC0);
000d36   0ec0     movlw   0xc0             	MOVLW	0xc0
000d38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d3a   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000d3c   f028
000d3e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	211; output.c	lcdString("                "); //comentar essa linha
000d40   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
000d42   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000d44   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
000d46   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000d48   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
000d4a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000d4c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000d4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d50   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000d52   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d54   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000d56   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d58   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000d5a   f027
000d5c   0e03     movlw   0x03             	MOVLW	0x03
000d5e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00170_DS_:
                                           ;	.line	223; output.c	if (numTela == STATE_DATA) {
000d60   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d62   0a0f     xorlw   0x0f             	XORLW	0x0f
000d64   e102     bnz     0x000d6a         	BNZ	_00774_DS_
000d66   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d68   e001     bz      0x000d6c         	BZ	_00775_DS_
                                           _00774_DS_:
000d6a   d06f     bra     0x000e4a         	BRA	_00176_DS_
                                           _00775_DS_:
                                           ;	.line	224; output.c	lcdCommand(0x80);
000d6c   0e80     movlw   0x80             	MOVLW	0x80
000d6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d70   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000d72   f028
000d74   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	226; output.c	lcdString(msgs[numTela][idioma]);
000d76   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000d78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d7a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000d7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d7e   0e00     movlw   0x00             	MOVLW	0x00
000d80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d82   0e06     movlw   0x06             	MOVLW	0x06
000d84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000d86   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000d88   f027
000d8a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000d8c   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000d8e   f005
000d90   0e04     movlw   0x04             	MOVLW	0x04
000d92   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000d94   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000d96   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000d98   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
000d9a   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000d9c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000d9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000da0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000da2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000da4   0e00     movlw   0x00             	MOVLW	0x00
000da6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000da8   0e03     movlw   0x03             	MOVLW	0x03
000daa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dac   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000dae   f027
000db0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000db2   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000db4   f007
000db6   0e04     movlw   0x04             	MOVLW	0x04
000db8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000dba   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000dbc   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000dbe   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000dc0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000dc2   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000dc4   ffe9
000dc6   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000dc8   ffea
000dca   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000dcc   f004
000dce   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000dd0   f005
000dd2   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000dd4   f006
000dd6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000dd8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dda   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000ddc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dde   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000de0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000de2   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000de4   f027
000de6   0e03     movlw   0x03             	MOVLW	0x03
000de8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	227; output.c	lcdCommand(0xC0);
000dea   0ec0     movlw   0xc0             	MOVLW	0xc0
000dec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000dee   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000df0   f028
000df2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	228; output.c	if (getLanguage() == 0) {
000df4   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000df6   f02f
000df8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000dfa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000dfc   e110     bnz     0x000e1e         	BNZ	_00172_DS_
                                           ;	.line	229; output.c	lcdString(" Hora           ");
000dfe   0e00     movlw   0x00             	MOVLW	UPPER(___str_27)
000e00   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000e02   0e39     movlw   0x39             	MOVLW	HIGH(___str_27)
000e04   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000e06   0e4e     movlw   0x4e             	MOVLW	LOW(___str_27)
000e08   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000e0a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000e0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e0e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000e10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e12   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e16   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000e18   f027
000e1a   0e03     movlw   0x03             	MOVLW	0x03
000e1c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00172_DS_:
                                           ;	.line	231; output.c	if (getLanguage() == 1) {
000e1e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
000e20   f02f
000e22   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000e24   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e26   0a01     xorlw   0x01             	XORLW	0x01
000e28   e110     bnz     0x000e4a         	BNZ	_00176_DS_
                                           ;	.line	232; output.c	lcdString(" Hour           ");
000e2a   0e00     movlw   0x00             	MOVLW	UPPER(___str_28)
000e2c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000e2e   0e39     movlw   0x39             	MOVLW	HIGH(___str_28)
000e30   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000e32   0e60     movlw   0x60             	MOVLW	LOW(___str_28)
000e34   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000e36   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000e38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e3a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000e3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e3e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000e40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e42   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000e44   f027
000e46   0e03     movlw   0x03             	MOVLW	0x03
000e48   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00176_DS_:
                                           ;	.line	237; output.c	if (numTela == CONFIG_DATA_D || numTela == CONFIG_DATA_M || numTela == CONFIG_DATA_A) {
000e4a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e4c   0a10     xorlw   0x10             	XORLW	0x10
000e4e   e102     bnz     0x000e54         	BNZ	_00779_DS_
000e50   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e52   e00b     bz      0x000e6a         	BZ	_00177_DS_
                                           _00779_DS_:
000e54   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e56   0a11     xorlw   0x11             	XORLW	0x11
000e58   e102     bnz     0x000e5e         	BNZ	_00781_DS_
000e5a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e5c   e006     bz      0x000e6a         	BZ	_00177_DS_
                                           _00781_DS_:
000e5e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e60   0a12     xorlw   0x12             	XORLW	0x12
000e62   e102     bnz     0x000e68         	BNZ	_00782_DS_
000e64   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e66   e001     bz      0x000e6a         	BZ	_00177_DS_
                                           _00782_DS_:
000e68   d0aa     bra     0x000fbe         	BRA	_00178_DS_
                                           _00177_DS_:
                                           ;	.line	238; output.c	lcdCommand(0x80);
000e6a   0e80     movlw   0x80             	MOVLW	0x80
000e6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e6e   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000e70   f028
000e72   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	239; output.c	lcdString(msgs[numTela][idioma]);   
000e74   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000e76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e78   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000e7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e7c   0e00     movlw   0x00             	MOVLW	0x00
000e7e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e80   0e06     movlw   0x06             	MOVLW	0x06
000e82   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e84   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000e86   f027
000e88   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000e8a   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000e8c   f005
000e8e   0e04     movlw   0x04             	MOVLW	0x04
000e90   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000e92   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000e94   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000e96   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
000e98   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000e9a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000e9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000e9e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
000ea0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ea2   0e00     movlw   0x00             	MOVLW	0x00
000ea4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ea6   0e03     movlw   0x03             	MOVLW	0x03
000ea8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eaa   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000eac   f027
000eae   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000eb0   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
000eb2   f007
000eb4   0e04     movlw   0x04             	MOVLW	0x04
000eb6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000eb8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000eba   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000ebc   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
000ebe   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000ec0   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
000ec2   ffe9
000ec4   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
000ec6   ffea
000ec8   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
000eca   f004
000ecc   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
000ece   f005
000ed0   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
000ed2   f006
000ed4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000ed6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ed8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000eda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000edc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000ede   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ee0   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000ee2   f027
000ee4   0e03     movlw   0x03             	MOVLW	0x03
000ee6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	240; output.c	lcdCommand(0xC0);
000ee8   0ec0     movlw   0xc0             	MOVLW	0xc0
000eea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000eec   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000eee   f028
000ef0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	241; output.c	lcdInt(getPeriodo(3));
000ef2   0e00     movlw   0x00             	MOVLW	0x00
000ef4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ef6   0e03     movlw   0x03             	MOVLW	0x03
000ef8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000efa   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
000efc   f029
000efe   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000f00   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f02   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f04   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000f06   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000f08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f0a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f0e   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000f10   f023
000f12   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f14   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	242; output.c	lcdString("/");
000f16   0e00     movlw   0x00             	MOVLW	UPPER(___str_2)
000f18   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000f1a   0e38     movlw   0x38             	MOVLW	HIGH(___str_2)
000f1c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000f1e   0e0c     movlw   0x0c             	MOVLW	LOW(___str_2)
000f20   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000f22   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000f24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f26   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000f28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f2a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f2e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000f30   f027
000f32   0e03     movlw   0x03             	MOVLW	0x03
000f34   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	243; output.c	lcdInt(getPeriodo(4));
000f36   0e00     movlw   0x00             	MOVLW	0x00
000f38   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f3a   0e04     movlw   0x04             	MOVLW	0x04
000f3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f3e   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
000f40   f029
000f42   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000f44   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f46   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f48   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000f4a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000f4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f4e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f52   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000f54   f023
000f56   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f58   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	244; output.c	lcdString("/");
000f5a   0e00     movlw   0x00             	MOVLW	UPPER(___str_2)
000f5c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000f5e   0e38     movlw   0x38             	MOVLW	HIGH(___str_2)
000f60   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000f62   0e0c     movlw   0x0c             	MOVLW	LOW(___str_2)
000f64   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000f66   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000f68   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f6a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000f6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f6e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f70   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f72   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000f74   f027
000f76   0e03     movlw   0x03             	MOVLW	0x03
000f78   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	245; output.c	lcdInt(getPeriodo(5));
000f7a   0e00     movlw   0x00             	MOVLW	0x00
000f7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f7e   0e05     movlw   0x05             	MOVLW	0x05
000f80   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f82   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
000f84   f029
000f86   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000f88   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f8a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f8c   6a05     clrf    0x05, 0x0        	CLRF	r0x05
000f8e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000f90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f92   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000f94   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000f96   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
000f98   f023
000f9a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
000f9c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	246; output.c	lcdString("        ");
000f9e   0e00     movlw   0x00             	MOVLW	UPPER(___str_29)
000fa0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
000fa2   0e39     movlw   0x39             	MOVLW	HIGH(___str_29)
000fa4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
000fa6   0e72     movlw   0x72             	MOVLW	LOW(___str_29)
000fa8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000faa   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
000fac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fae   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
000fb0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fb2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
000fb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fb6   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
000fb8   f027
000fba   0e03     movlw   0x03             	MOVLW	0x03
000fbc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00178_DS_:
                                           ;	.line	250; output.c	if (numTela == STATE_HORA) {
000fbe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000fc0   0a13     xorlw   0x13             	XORLW	0x13
000fc2   e102     bnz     0x000fc8         	BNZ	_00784_DS_
000fc4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000fc6   e001     bz      0x000fca         	BZ	_00785_DS_
                                           _00784_DS_:
000fc8   d06f     bra     0x0010a8         	BRA	_00186_DS_
                                           _00785_DS_:
                                           ;	.line	251; output.c	lcdCommand(0x80);
000fca   0e80     movlw   0x80             	MOVLW	0x80
000fcc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fce   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
000fd0   f028
000fd2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	253; output.c	lcdString(msgs[numTela][idioma]);
000fd4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
000fd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fd8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
000fda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fdc   0e00     movlw   0x00             	MOVLW	0x00
000fde   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe0   0e06     movlw   0x06             	MOVLW	0x06
000fe2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000fe4   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
000fe6   f027
000fe8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
000fea   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
000fec   f005
000fee   0e04     movlw   0x04             	MOVLW	0x04
000ff0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
000ff2   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
000ff4   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
000ff6   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
000ff8   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
000ffa   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
000ffc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
000ffe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001000   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001002   0e00     movlw   0x00             	MOVLW	0x00
001004   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001006   0e03     movlw   0x03             	MOVLW	0x03
001008   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00100a   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
00100c   f027
00100e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001010   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
001012   f007
001014   0e04     movlw   0x04             	MOVLW	0x04
001016   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001018   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00101a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00101c   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00101e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001020   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001022   ffe9
001024   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001026   ffea
001028   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
00102a   f004
00102c   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
00102e   f005
001030   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
001032   f006
001034   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001036   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001038   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00103a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00103c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00103e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001040   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001042   f027
001044   0e03     movlw   0x03             	MOVLW	0x03
001046   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	254; output.c	lcdCommand(0xC0);
001048   0ec0     movlw   0xc0             	MOVLW	0xc0
00104a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00104c   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00104e   f028
001050   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	255; output.c	if (getLanguage() == 0) {
001052   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001054   f02f
001056   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001058   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00105a   e110     bnz     0x00107c         	BNZ	_00182_DS_
                                           ;	.line	256; output.c	lcdString("*Hora           ");
00105c   0e00     movlw   0x00             	MOVLW	UPPER(___str_30)
00105e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001060   0e39     movlw   0x39             	MOVLW	HIGH(___str_30)
001062   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001064   0e7c     movlw   0x7c             	MOVLW	LOW(___str_30)
001066   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001068   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00106a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00106c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00106e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001070   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001072   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001074   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001076   f027
001078   0e03     movlw   0x03             	MOVLW	0x03
00107a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00182_DS_:
                                           ;	.line	258; output.c	if (getLanguage() == 1) {
00107c   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
00107e   f02f
001080   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001082   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001084   0a01     xorlw   0x01             	XORLW	0x01
001086   e110     bnz     0x0010a8         	BNZ	_00186_DS_
                                           ;	.line	259; output.c	lcdString("*Hour           ");
001088   0e00     movlw   0x00             	MOVLW	UPPER(___str_31)
00108a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00108c   0e39     movlw   0x39             	MOVLW	HIGH(___str_31)
00108e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001090   0e8e     movlw   0x8e             	MOVLW	LOW(___str_31)
001092   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001094   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001096   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001098   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00109a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00109c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00109e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010a0   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0010a2   f027
0010a4   0e03     movlw   0x03             	MOVLW	0x03
0010a6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00186_DS_:
                                           ;	.line	263; output.c	if (numTela == CONFIG_HORA || numTela == CONFIG_MINUTOS_DEC
0010a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010aa   0a14     xorlw   0x14             	XORLW	0x14
0010ac   e102     bnz     0x0010b2         	BNZ	_00789_DS_
0010ae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010b0   e00b     bz      0x0010c8         	BZ	_00187_DS_
                                           _00789_DS_:
                                           ;	.line	264; output.c	|| numTela == CONFIG_MINUTOS_UNI) {
0010b2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010b4   0a15     xorlw   0x15             	XORLW	0x15
0010b6   e102     bnz     0x0010bc         	BNZ	_00791_DS_
0010b8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010ba   e006     bz      0x0010c8         	BZ	_00187_DS_
                                           _00791_DS_:
0010bc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010be   0a16     xorlw   0x16             	XORLW	0x16
0010c0   e102     bnz     0x0010c6         	BNZ	_00792_DS_
0010c2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010c4   e001     bz      0x0010c8         	BZ	_00187_DS_
                                           _00792_DS_:
0010c6   d098     bra     0x0011f8         	BRA	_00188_DS_
                                           _00187_DS_:
                                           ;	.line	265; output.c	lcdCommand(0x80);
0010c8   0e80     movlw   0x80             	MOVLW	0x80
0010ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010cc   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0010ce   f028
0010d0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	266; output.c	lcdString(msgs[numTela][idioma]);   
0010d2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0010d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010d6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0010d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010da   0e00     movlw   0x00             	MOVLW	0x00
0010dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010de   0e06     movlw   0x06             	MOVLW	0x06
0010e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010e2   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0010e4   f027
0010e6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0010e8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0010ea   f005
0010ec   0e04     movlw   0x04             	MOVLW	0x04
0010ee   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0010f0   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0010f2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0010f4   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0010f6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0010f8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0010fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0010fc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0010fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001100   0e00     movlw   0x00             	MOVLW	0x00
001102   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001104   0e03     movlw   0x03             	MOVLW	0x03
001106   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001108   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
00110a   f027
00110c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00110e   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
001110   f007
001112   0e04     movlw   0x04             	MOVLW	0x04
001114   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001116   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001118   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00111a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00111c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00111e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001120   ffe9
001122   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001124   ffea
001126   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001128   f004
00112a   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
00112c   f005
00112e   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
001130   f006
001132   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001134   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001136   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001138   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00113a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00113c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00113e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001140   f027
001142   0e03     movlw   0x03             	MOVLW	0x03
001144   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	267; output.c	lcdCommand(0xC0);
001146   0ec0     movlw   0xc0             	MOVLW	0xc0
001148   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00114a   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00114c   f028
00114e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	268; output.c	lcdString("  ");
001150   0e00     movlw   0x00             	MOVLW	UPPER(___str_3)
001152   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001154   0e38     movlw   0x38             	MOVLW	HIGH(___str_3)
001156   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001158   0e0e     movlw   0x0e             	MOVLW	LOW(___str_3)
00115a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00115c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00115e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001160   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001162   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001164   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001166   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001168   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00116a   f027
00116c   0e03     movlw   0x03             	MOVLW	0x03
00116e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	269; output.c	lcdInt(getPeriodo(1));
001170   0e00     movlw   0x00             	MOVLW	0x00
001172   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001174   0e01     movlw   0x01             	MOVLW	0x01
001176   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001178   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
00117a   f029
00117c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00117e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001180   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001182   6a05     clrf    0x05, 0x0        	CLRF	r0x05
001184   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001186   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001188   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00118a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00118c   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
00118e   f023
001190   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
001192   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	270; output.c	lcdString(":");
001194   0e00     movlw   0x00             	MOVLW	UPPER(___str_4)
001196   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001198   0e38     movlw   0x38             	MOVLW	HIGH(___str_4)
00119a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00119c   0e12     movlw   0x12             	MOVLW	LOW(___str_4)
00119e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0011a0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0011a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011a4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0011a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011a8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0011aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ac   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0011ae   f027
0011b0   0e03     movlw   0x03             	MOVLW	0x03
0011b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	271; output.c	lcdInt(getPeriodo(2));
0011b4   0e00     movlw   0x00             	MOVLW	0x00
0011b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011b8   0e02     movlw   0x02             	MOVLW	0x02
0011ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011bc   ec34     call    0x005268, 0x0    	CALL	_getPeriodo
0011be   f029
0011c0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0011c2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0011c4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0011c6   6a05     clrf    0x05, 0x0        	CLRF	r0x05
0011c8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0011ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011cc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0011ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011d0   ecaa     call    0x004754, 0x0    	CALL	_lcdInt
0011d2   f023
0011d4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0011d6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	272; output.c	lcdString("         ");
0011d8   0e00     movlw   0x00             	MOVLW	UPPER(___str_32)
0011da   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0011dc   0e39     movlw   0x39             	MOVLW	HIGH(___str_32)
0011de   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0011e0   0ea0     movlw   0xa0             	MOVLW	LOW(___str_32)
0011e2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0011e4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0011e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011e8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0011ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011ec   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0011ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0011f0   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0011f2   f027
0011f4   0e03     movlw   0x03             	MOVLW	0x03
0011f6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00188_DS_:
                                           ;	.line	275; output.c	if (numTela == STATE_SECURITY) {
0011f8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0011fa   0a17     xorlw   0x17             	XORLW	0x17
0011fc   e102     bnz     0x001202         	BNZ	_00794_DS_
0011fe   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001200   e001     bz      0x001204         	BZ	_00795_DS_
                                           _00794_DS_:
001202   d054     bra     0x0012ac         	BRA	_00192_DS_
                                           _00795_DS_:
                                           ;	.line	276; output.c	lcdCommand(0x80);
001204   0e80     movlw   0x80             	MOVLW	0x80
001206   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001208   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00120a   f028
00120c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	277; output.c	lcdString(msgs[numTela][idioma]);
00120e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001210   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001212   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001214   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001216   0e00     movlw   0x00             	MOVLW	0x00
001218   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00121a   0e06     movlw   0x06             	MOVLW	0x06
00121c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00121e   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001220   f027
001222   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001224   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001226   f005
001228   0e04     movlw   0x04             	MOVLW	0x04
00122a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00122c   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
00122e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001230   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
001232   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001234   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001236   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001238   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00123a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00123c   0e00     movlw   0x00             	MOVLW	0x00
00123e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001240   0e03     movlw   0x03             	MOVLW	0x03
001242   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001244   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001246   f027
001248   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00124a   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
00124c   f007
00124e   0e04     movlw   0x04             	MOVLW	0x04
001250   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001252   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001254   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001256   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001258   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00125a   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00125c   ffe9
00125e   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001260   ffea
001262   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001264   f004
001266   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
001268   f005
00126a   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
00126c   f006
00126e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001270   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001272   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001274   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001276   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001278   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00127a   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00127c   f027
00127e   0e03     movlw   0x03             	MOVLW	0x03
001280   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	278; output.c	lcdCommand(0xC0);
001282   0ec0     movlw   0xc0             	MOVLW	0xc0
001284   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001286   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001288   f028
00128a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	279; output.c	lcdString("                ");
00128c   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
00128e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001290   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
001292   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001294   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
001296   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001298   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00129a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00129c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00129e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0012a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012a4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0012a6   f027
0012a8   0e03     movlw   0x03             	MOVLW	0x03
0012aa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00192_DS_:
                                           ;	.line	283; output.c	if (numTela == CONFIG_SENHA) {
0012ac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012ae   0a18     xorlw   0x18             	XORLW	0x18
0012b0   e102     bnz     0x0012b6         	BNZ	_00796_DS_
0012b2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012b4   e001     bz      0x0012b8         	BZ	_00797_DS_
                                           _00796_DS_:
0012b6   d06f     bra     0x001396         	BRA	_00198_DS_
                                           _00797_DS_:
                                           ;	.line	284; output.c	lcdCommand(0x80);
0012b8   0e80     movlw   0x80             	MOVLW	0x80
0012ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012bc   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0012be   f028
0012c0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	285; output.c	lcdString(msgs[numTela][idioma]);
0012c2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0012c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012c6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0012c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ca   0e00     movlw   0x00             	MOVLW	0x00
0012cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ce   0e06     movlw   0x06             	MOVLW	0x06
0012d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012d2   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0012d4   f027
0012d6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0012d8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0012da   f005
0012dc   0e04     movlw   0x04             	MOVLW	0x04
0012de   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0012e0   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0012e2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0012e4   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0012e6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0012e8   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0012ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012ec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0012ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012f0   0e00     movlw   0x00             	MOVLW	0x00
0012f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012f4   0e03     movlw   0x03             	MOVLW	0x03
0012f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0012f8   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0012fa   f027
0012fc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0012fe   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
001300   f007
001302   0e04     movlw   0x04             	MOVLW	0x04
001304   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001306   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001308   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00130a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
00130c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
00130e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001310   ffe9
001312   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001314   ffea
001316   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001318   f004
00131a   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
00131c   f005
00131e   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
001320   f006
001322   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001324   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001326   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001328   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00132a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00132c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00132e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001330   f027
001332   0e03     movlw   0x03             	MOVLW	0x03
001334   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	286; output.c	lcdCommand(0xC0);
001336   0ec0     movlw   0xc0             	MOVLW	0xc0
001338   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00133a   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00133c   f028
00133e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	287; output.c	if (getLanguage() == 0) {
001340   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001342   f02f
001344   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001346   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001348   e110     bnz     0x00136a         	BNZ	_00194_DS_
                                           ;	.line	288; output.c	lcdString(" Habilitar senha");
00134a   0e00     movlw   0x00             	MOVLW	UPPER(___str_33)
00134c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00134e   0e39     movlw   0x39             	MOVLW	HIGH(___str_33)
001350   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001352   0eaa     movlw   0xaa             	MOVLW	LOW(___str_33)
001354   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001356   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00135a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00135c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00135e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001360   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001362   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001364   f027
001366   0e03     movlw   0x03             	MOVLW	0x03
001368   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00194_DS_:
                                           ;	.line	290; output.c	if (getLanguage() == 1) {
00136a   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
00136c   f02f
00136e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001370   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001372   0a01     xorlw   0x01             	XORLW	0x01
001374   e110     bnz     0x001396         	BNZ	_00198_DS_
                                           ;	.line	291; output.c	lcdString(" Enable password");
001376   0e00     movlw   0x00             	MOVLW	UPPER(___str_34)
001378   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00137a   0e39     movlw   0x39             	MOVLW	HIGH(___str_34)
00137c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00137e   0ebc     movlw   0xbc             	MOVLW	LOW(___str_34)
001380   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001382   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001384   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001386   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001388   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00138c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00138e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001390   f027
001392   0e03     movlw   0x03             	MOVLW	0x03
001394   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00198_DS_:
                                           ;	.line	295; output.c	if (numTela == SECURITY_SENHA) {
001396   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001398   0a19     xorlw   0x19             	XORLW	0x19
00139a   e102     bnz     0x0013a0         	BNZ	_00800_DS_
00139c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00139e   e001     bz      0x0013a2         	BZ	_00801_DS_
                                           _00800_DS_:
0013a0   d131     bra     0x001604         	BRA	_00219_DS_
                                           _00801_DS_:
                                           ;	.line	296; output.c	lcdCommand(0x80);
0013a2   0e80     movlw   0x80             	MOVLW	0x80
0013a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013a6   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0013a8   f028
0013aa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	297; output.c	lcdString(msgs[numTela][idioma]);
0013ac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0013ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0013b2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b4   0e00     movlw   0x00             	MOVLW	0x00
0013b6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013b8   0e06     movlw   0x06             	MOVLW	0x06
0013ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013bc   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0013be   f027
0013c0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0013c2   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0013c4   f005
0013c6   0e04     movlw   0x04             	MOVLW	0x04
0013c8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0013ca   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
0013cc   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0013ce   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
0013d0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0013d2   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0013d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013d6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0013d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013da   0e00     movlw   0x00             	MOVLW	0x00
0013dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013de   0e03     movlw   0x03             	MOVLW	0x03
0013e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0013e2   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0013e4   f027
0013e6   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0013e8   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
0013ea   f007
0013ec   0e04     movlw   0x04             	MOVLW	0x04
0013ee   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0013f0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0013f2   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0013f4   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0013f6   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0013f8   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0013fa   ffe9
0013fc   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0013fe   ffea
001400   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001402   f004
001404   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
001406   f005
001408   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
00140a   f006
00140c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00140e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001410   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001412   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001414   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001416   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001418   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00141a   f027
00141c   0e03     movlw   0x03             	MOVLW	0x03
00141e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	298; output.c	lcdCommand(0xC0);
001420   0ec0     movlw   0xc0             	MOVLW	0xc0
001422   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001424   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001426   f028
001428   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	299; output.c	if(getSenha_i() == 0 ){
00142a   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
00142c   f02f
00142e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001430   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001432   f005
001434   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001436   1005     iorwf   0x05, 0x0, 0x0   	IORWF	r0x05, W
001438   e110     bnz     0x00145a         	BNZ	_00200_DS_
                                           ;	.line	300; output.c	lcdString("                "); 
00143a   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
00143c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00143e   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
001440   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001442   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
001444   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001446   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001448   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00144c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00144e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001450   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001452   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001454   f027
001456   0e03     movlw   0x03             	MOVLW	0x03
001458   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00200_DS_:
                                           ;	.line	302; output.c	if(getSenha_i() == 1 ){
00145a   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
00145c   f02f
00145e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001460   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001462   f005
001464   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001466   0a01     xorlw   0x01             	XORLW	0x01
001468   e102     bnz     0x00146e         	BNZ	_00802_DS_
00146a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00146c   e001     bz      0x001470         	BZ	_00803_DS_
                                           _00802_DS_:
00146e   d010     bra     0x001490         	BRA	_00202_DS_
                                           _00803_DS_:
                                           ;	.line	303; output.c	lcdString("*               "); 
001470   0e00     movlw   0x00             	MOVLW	UPPER(___str_6)
001472   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001474   0e38     movlw   0x38             	MOVLW	HIGH(___str_6)
001476   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001478   0e26     movlw   0x26             	MOVLW	LOW(___str_6)
00147a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00147c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00147e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001480   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001482   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001484   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001486   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001488   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00148a   f027
00148c   0e03     movlw   0x03             	MOVLW	0x03
00148e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00202_DS_:
                                           ;	.line	305; output.c	if(getSenha_i() == 2 ){ //colocar o nome certo do contador de digitos
001490   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001492   f02f
001494   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001496   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001498   f005
00149a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00149c   0a02     xorlw   0x02             	XORLW	0x02
00149e   e102     bnz     0x0014a4         	BNZ	_00804_DS_
0014a0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0014a2   e001     bz      0x0014a6         	BZ	_00805_DS_
                                           _00804_DS_:
0014a4   d010     bra     0x0014c6         	BRA	_00204_DS_
                                           _00805_DS_:
                                           ;	.line	306; output.c	lcdString("**              "); 
0014a6   0e00     movlw   0x00             	MOVLW	UPPER(___str_7)
0014a8   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0014aa   0e38     movlw   0x38             	MOVLW	HIGH(___str_7)
0014ac   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0014ae   0e38     movlw   0x38             	MOVLW	LOW(___str_7)
0014b0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0014b2   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0014b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014b6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0014b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ba   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0014bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014be   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0014c0   f027
0014c2   0e03     movlw   0x03             	MOVLW	0x03
0014c4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00204_DS_:
                                           ;	.line	308; output.c	if(getSenha_i() == 3 ){ //colocar o nome certo do contador de digitos
0014c6   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0014c8   f02f
0014ca   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0014cc   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0014ce   f005
0014d0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0014d2   0a03     xorlw   0x03             	XORLW	0x03
0014d4   e102     bnz     0x0014da         	BNZ	_00806_DS_
0014d6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0014d8   e001     bz      0x0014dc         	BZ	_00807_DS_
                                           _00806_DS_:
0014da   d010     bra     0x0014fc         	BRA	_00206_DS_
                                           _00807_DS_:
                                           ;	.line	309; output.c	lcdString("***            "); 
0014dc   0e00     movlw   0x00             	MOVLW	UPPER(___str_8)
0014de   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0014e0   0e38     movlw   0x38             	MOVLW	HIGH(___str_8)
0014e2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0014e4   0e4a     movlw   0x4a             	MOVLW	LOW(___str_8)
0014e6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0014e8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0014ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014ec   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0014ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014f0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0014f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0014f4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0014f6   f027
0014f8   0e03     movlw   0x03             	MOVLW	0x03
0014fa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00206_DS_:
                                           ;	.line	311; output.c	if(getSenha_i() == 4 ){ //colocar o nome certo do contador de digitos
0014fc   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0014fe   f02f
001500   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001502   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001504   f005
001506   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001508   0a04     xorlw   0x04             	XORLW	0x04
00150a   e102     bnz     0x001510         	BNZ	_00808_DS_
00150c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00150e   e001     bz      0x001512         	BZ	_00809_DS_
                                           _00808_DS_:
001510   d010     bra     0x001532         	BRA	_00208_DS_
                                           _00809_DS_:
                                           ;	.line	312; output.c	lcdString("****           "); 
001512   0e00     movlw   0x00             	MOVLW	UPPER(___str_9)
001514   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001516   0e38     movlw   0x38             	MOVLW	HIGH(___str_9)
001518   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00151a   0e5a     movlw   0x5a             	MOVLW	LOW(___str_9)
00151c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00151e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001520   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001522   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001524   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001526   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001528   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00152a   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00152c   f027
00152e   0e03     movlw   0x03             	MOVLW	0x03
001530   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00208_DS_:
                                           ;	.line	314; output.c	if(getSenha_i() == 5 ){ //colocar o nome certo do contador de digitos
001532   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001534   f02f
001536   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001538   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00153a   f005
00153c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00153e   0a05     xorlw   0x05             	XORLW	0x05
001540   e102     bnz     0x001546         	BNZ	_00810_DS_
001542   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001544   e001     bz      0x001548         	BZ	_00811_DS_
                                           _00810_DS_:
001546   d010     bra     0x001568         	BRA	_00210_DS_
                                           _00811_DS_:
                                           ;	.line	315; output.c	lcdString("*****          "); 
001548   0e00     movlw   0x00             	MOVLW	UPPER(___str_10)
00154a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00154c   0e38     movlw   0x38             	MOVLW	HIGH(___str_10)
00154e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001550   0e6a     movlw   0x6a             	MOVLW	LOW(___str_10)
001552   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001554   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001556   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001558   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00155a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00155c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00155e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001560   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001562   f027
001564   0e03     movlw   0x03             	MOVLW	0x03
001566   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00210_DS_:
                                           ;	.line	317; output.c	if(getSenha_try() == 3){
001568   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
00156a   f02f
00156c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00156e   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001570   f005
001572   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001574   0a03     xorlw   0x03             	XORLW	0x03
001576   e102     bnz     0x00157c         	BNZ	_00812_DS_
001578   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00157a   e001     bz      0x00157e         	BZ	_00813_DS_
                                           _00812_DS_:
00157c   d043     bra     0x001604         	BRA	_00219_DS_
                                           _00813_DS_:
                                           ;	.line	318; output.c	lcdCommand(0xC0);
00157e   0ec0     movlw   0xc0             	MOVLW	0xc0
001580   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001582   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001584   f028
001586   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	319; output.c	if (getLanguage() == 0) {
001588   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
00158a   f02f
00158c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00158e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001590   e110     bnz     0x0015b2         	BNZ	_00212_DS_
                                           ;	.line	320; output.c	lcdString("Senha incorreta!");
001592   0e00     movlw   0x00             	MOVLW	UPPER(___str_11)
001594   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001596   0e38     movlw   0x38             	MOVLW	HIGH(___str_11)
001598   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00159a   0e7a     movlw   0x7a             	MOVLW	LOW(___str_11)
00159c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00159e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0015a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015a2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0015a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015a6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0015a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015aa   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0015ac   f027
0015ae   0e03     movlw   0x03             	MOVLW	0x03
0015b0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00212_DS_:
                                           ;	.line	322; output.c	if (getLanguage() == 1) {
0015b2   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
0015b4   f02f
0015b6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0015b8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0015ba   0a01     xorlw   0x01             	XORLW	0x01
0015bc   e110     bnz     0x0015de         	BNZ	_00214_DS_
                                           ;	.line	323; output.c	lcdString("Wrong password! ");
0015be   0e00     movlw   0x00             	MOVLW	UPPER(___str_12)
0015c0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0015c2   0e38     movlw   0x38             	MOVLW	HIGH(___str_12)
0015c4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0015c6   0e8c     movlw   0x8c             	MOVLW	LOW(___str_12)
0015c8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0015ca   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0015cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015ce   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0015d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015d2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0015d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0015d6   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0015d8   f027
0015da   0e03     movlw   0x03             	MOVLW	0x03
0015dc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00214_DS_:
0015de   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	325; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
0015e0   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
0015e2   0102     movlb   0x2              	BANKSEL	(_i + 1)
0015e4   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00342_DS_:
                                           ;	.line	326; output.c	Delay2ms(); 
0015e6   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
0015e8   f02d
0015ea   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	325; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
0015ec   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
0015ee   d002     bra     0x0015f4         	BRA	_30112_DS_
0015f0   0102     movlb   0x2              	BANKSEL	(_i + 1)
0015f2   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _30112_DS_:
0015f4   0e05     movlw   0x05             	MOVLW	0x05
0015f6   0102     movlb   0x2              	BANKSEL	(_i + 1)
0015f8   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
0015fa   e103     bnz     0x001602         	BNZ	_00816_DS_
0015fc   0edd     movlw   0xdd             	MOVLW	0xdd
0015fe   0102     movlb   0x2              	BANKSEL	_i
001600   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00816_DS_:
001602   e3f1     bnc     0x0015e6         	BNC	_00342_DS_
                                           _00219_DS_:
                                           ;	.line	331; output.c	if (numTela == NOVA_SENHA) {
001604   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001606   0a1a     xorlw   0x1a             	XORLW	0x1a
001608   e102     bnz     0x00160e         	BNZ	_00817_DS_
00160a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00160c   e002     bz      0x001612         	BZ	_00818_DS_
                                           _00817_DS_:
00160e   ef40     goto    0x001a80         	GOTO	_00260_DS_
001610   f00d
                                           _00818_DS_:
                                           ;	.line	332; output.c	lcdCommand(0x80);
001612   0e80     movlw   0x80             	MOVLW	0x80
001614   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001616   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001618   f028
00161a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	333; output.c	lcdString(msgs[numTela][idioma]);
00161c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00161e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001620   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001622   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001624   0e00     movlw   0x00             	MOVLW	0x00
001626   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001628   0e06     movlw   0x06             	MOVLW	0x06
00162a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00162c   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
00162e   f027
001630   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001632   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001634   f005
001636   0e04     movlw   0x04             	MOVLW	0x04
001638   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00163a   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
00163c   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00163e   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
001640   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001642   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001644   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001646   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001648   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00164a   0e00     movlw   0x00             	MOVLW	0x00
00164c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00164e   0e03     movlw   0x03             	MOVLW	0x03
001650   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001652   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001654   f027
001656   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001658   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
00165a   f007
00165c   0e04     movlw   0x04             	MOVLW	0x04
00165e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001660   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001662   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001664   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001666   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001668   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
00166a   ffe9
00166c   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
00166e   ffea
001670   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001672   f004
001674   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
001676   f005
001678   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
00167a   f006
00167c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00167e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001680   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001682   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001684   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001686   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001688   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00168a   f027
00168c   0e03     movlw   0x03             	MOVLW	0x03
00168e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	334; output.c	lcdCommand(0xC0);
001690   0ec0     movlw   0xc0             	MOVLW	0xc0
001692   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001694   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001696   f028
001698   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	335; output.c	if(getSenha_i() == 0 ){
00169a   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
00169c   f02f
00169e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0016a0   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0016a2   f005
0016a4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016a6   1005     iorwf   0x05, 0x0, 0x0   	IORWF	r0x05, W
0016a8   e110     bnz     0x0016ca         	BNZ	_00221_DS_
                                           ;	.line	336; output.c	lcdString("                "); 
0016aa   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
0016ac   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0016ae   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
0016b0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0016b2   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
0016b4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0016b6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0016b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016ba   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0016bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016be   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016c2   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0016c4   f027
0016c6   0e03     movlw   0x03             	MOVLW	0x03
0016c8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00221_DS_:
                                           ;	.line	338; output.c	if(getSenha_i() == 1 ){
0016ca   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0016cc   f02f
0016ce   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0016d0   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0016d2   f005
0016d4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016d6   0a01     xorlw   0x01             	XORLW	0x01
0016d8   e102     bnz     0x0016de         	BNZ	_00819_DS_
0016da   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0016dc   e001     bz      0x0016e0         	BZ	_00820_DS_
                                           _00819_DS_:
0016de   d010     bra     0x001700         	BRA	_00223_DS_
                                           _00820_DS_:
                                           ;	.line	339; output.c	lcdString("*               "); 
0016e0   0e00     movlw   0x00             	MOVLW	UPPER(___str_6)
0016e2   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0016e4   0e38     movlw   0x38             	MOVLW	HIGH(___str_6)
0016e6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0016e8   0e26     movlw   0x26             	MOVLW	LOW(___str_6)
0016ea   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0016ec   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0016ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016f0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0016f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016f4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0016f6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0016f8   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0016fa   f027
0016fc   0e03     movlw   0x03             	MOVLW	0x03
0016fe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00223_DS_:
                                           ;	.line	341; output.c	if(getSenha_i() == 2 ){ //colocar o nome certo do contador de digitos
001700   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001702   f02f
001704   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001706   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001708   f005
00170a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00170c   0a02     xorlw   0x02             	XORLW	0x02
00170e   e102     bnz     0x001714         	BNZ	_00821_DS_
001710   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001712   e001     bz      0x001716         	BZ	_00822_DS_
                                           _00821_DS_:
001714   d010     bra     0x001736         	BRA	_00225_DS_
                                           _00822_DS_:
                                           ;	.line	342; output.c	lcdString("**              "); 
001716   0e00     movlw   0x00             	MOVLW	UPPER(___str_7)
001718   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00171a   0e38     movlw   0x38             	MOVLW	HIGH(___str_7)
00171c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00171e   0e38     movlw   0x38             	MOVLW	LOW(___str_7)
001720   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001722   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001724   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001726   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001728   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00172a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00172c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00172e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001730   f027
001732   0e03     movlw   0x03             	MOVLW	0x03
001734   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00225_DS_:
                                           ;	.line	344; output.c	if(getSenha_i() == 3 ){ //colocar o nome certo do contador de digitos
001736   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001738   f02f
00173a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00173c   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00173e   f005
001740   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001742   0a03     xorlw   0x03             	XORLW	0x03
001744   e102     bnz     0x00174a         	BNZ	_00823_DS_
001746   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001748   e001     bz      0x00174c         	BZ	_00824_DS_
                                           _00823_DS_:
00174a   d010     bra     0x00176c         	BRA	_00227_DS_
                                           _00824_DS_:
                                           ;	.line	345; output.c	lcdString("***             "); 
00174c   0e00     movlw   0x00             	MOVLW	UPPER(___str_35)
00174e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001750   0e39     movlw   0x39             	MOVLW	HIGH(___str_35)
001752   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001754   0ece     movlw   0xce             	MOVLW	LOW(___str_35)
001756   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001758   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00175a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00175c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00175e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001760   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001762   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001764   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001766   f027
001768   0e03     movlw   0x03             	MOVLW	0x03
00176a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00227_DS_:
                                           ;	.line	347; output.c	if(getSenha_i() == 4 ){ //colocar o nome certo do contador de digitos
00176c   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
00176e   f02f
001770   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001772   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001774   f005
001776   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001778   0a04     xorlw   0x04             	XORLW	0x04
00177a   e102     bnz     0x001780         	BNZ	_00825_DS_
00177c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00177e   e001     bz      0x001782         	BZ	_00826_DS_
                                           _00825_DS_:
001780   d010     bra     0x0017a2         	BRA	_00229_DS_
                                           _00826_DS_:
                                           ;	.line	348; output.c	lcdString("****            "); 
001782   0e00     movlw   0x00             	MOVLW	UPPER(___str_36)
001784   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001786   0e39     movlw   0x39             	MOVLW	HIGH(___str_36)
001788   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00178a   0ee0     movlw   0xe0             	MOVLW	LOW(___str_36)
00178c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00178e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001790   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001792   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001794   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001796   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001798   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00179a   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00179c   f027
00179e   0e03     movlw   0x03             	MOVLW	0x03
0017a0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00229_DS_:
                                           ;	.line	350; output.c	if(getSenha_i() == 5 ){ //colocar o nome certo do contador de digitos
0017a2   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0017a4   f02f
0017a6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0017a8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0017aa   f005
0017ac   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0017ae   0a05     xorlw   0x05             	XORLW	0x05
0017b0   e102     bnz     0x0017b6         	BNZ	_00827_DS_
0017b2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0017b4   e001     bz      0x0017b8         	BZ	_00828_DS_
                                           _00827_DS_:
0017b6   d010     bra     0x0017d8         	BRA	_00231_DS_
                                           _00828_DS_:
                                           ;	.line	351; output.c	lcdString("*****           "); 
0017b8   0e00     movlw   0x00             	MOVLW	UPPER(___str_37)
0017ba   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0017bc   0e39     movlw   0x39             	MOVLW	HIGH(___str_37)
0017be   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0017c0   0ef2     movlw   0xf2             	MOVLW	LOW(___str_37)
0017c2   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0017c4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0017c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017c8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0017ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017cc   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0017ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017d0   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0017d2   f027
0017d4   0e03     movlw   0x03             	MOVLW	0x03
0017d6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00231_DS_:
                                           ;	.line	357; output.c	lcdCommand(0xC0);
0017d8   0ec0     movlw   0xc0             	MOVLW	0xc0
0017da   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0017dc   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0017de   f028
0017e0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	358; output.c	if(getSenha_i() == 5 ){ //colocar o nome certo do contador de digitos
0017e2   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0017e4   f02f
0017e6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0017e8   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0017ea   f005
0017ec   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0017ee   0a05     xorlw   0x05             	XORLW	0x05
0017f0   e102     bnz     0x0017f6         	BNZ	_00829_DS_
0017f2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0017f4   e001     bz      0x0017f8         	BZ	_00830_DS_
                                           _00829_DS_:
0017f6   d010     bra     0x001818         	BRA	_00233_DS_
                                           _00830_DS_:
                                           ;	.line	359; output.c	lcdString("                "); 
0017f8   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
0017fa   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0017fc   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
0017fe   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001800   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
001802   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001804   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001806   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001808   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00180a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00180c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00180e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001810   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001812   f027
001814   0e03     movlw   0x03             	MOVLW	0x03
001816   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00233_DS_:
                                           ;	.line	361; output.c	if(getSenha_i() == 6 ){ //colocar o nome certo do contador de digitos
001818   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
00181a   f02f
00181c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00181e   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001820   f005
001822   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001824   0a06     xorlw   0x06             	XORLW	0x06
001826   e102     bnz     0x00182c         	BNZ	_00831_DS_
001828   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00182a   e001     bz      0x00182e         	BZ	_00832_DS_
                                           _00831_DS_:
00182c   d010     bra     0x00184e         	BRA	_00235_DS_
                                           _00832_DS_:
                                           ;	.line	362; output.c	lcdString("*               "); 
00182e   0e00     movlw   0x00             	MOVLW	UPPER(___str_6)
001830   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001832   0e38     movlw   0x38             	MOVLW	HIGH(___str_6)
001834   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001836   0e26     movlw   0x26             	MOVLW	LOW(___str_6)
001838   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00183a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
00183c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00183e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001840   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001842   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001844   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001846   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001848   f027
00184a   0e03     movlw   0x03             	MOVLW	0x03
00184c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00235_DS_:
                                           ;	.line	364; output.c	if(getSenha_i() == 7 ){ //colocar o nome certo do contador de digitos
00184e   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001850   f02f
001852   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001854   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001856   f005
001858   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00185a   0a07     xorlw   0x07             	XORLW	0x07
00185c   e102     bnz     0x001862         	BNZ	_00833_DS_
00185e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001860   e001     bz      0x001864         	BZ	_00834_DS_
                                           _00833_DS_:
001862   d010     bra     0x001884         	BRA	_00237_DS_
                                           _00834_DS_:
                                           ;	.line	365; output.c	lcdString("**              "); 
001864   0e00     movlw   0x00             	MOVLW	UPPER(___str_7)
001866   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001868   0e38     movlw   0x38             	MOVLW	HIGH(___str_7)
00186a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00186c   0e38     movlw   0x38             	MOVLW	LOW(___str_7)
00186e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001870   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001872   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001874   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001876   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001878   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00187a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00187c   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00187e   f027
001880   0e03     movlw   0x03             	MOVLW	0x03
001882   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00237_DS_:
                                           ;	.line	367; output.c	if(getSenha_i() == 8 ){ //colocar o nome certo do contador de digitos
001884   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001886   f02f
001888   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00188a   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
00188c   f005
00188e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001890   0a08     xorlw   0x08             	XORLW	0x08
001892   e102     bnz     0x001898         	BNZ	_00835_DS_
001894   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001896   e001     bz      0x00189a         	BZ	_00836_DS_
                                           _00835_DS_:
001898   d010     bra     0x0018ba         	BRA	_00239_DS_
                                           _00836_DS_:
                                           ;	.line	368; output.c	lcdString("***             "); 
00189a   0e00     movlw   0x00             	MOVLW	UPPER(___str_35)
00189c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00189e   0e39     movlw   0x39             	MOVLW	HIGH(___str_35)
0018a0   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0018a2   0ece     movlw   0xce             	MOVLW	LOW(___str_35)
0018a4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0018a6   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0018a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018aa   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0018ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018ae   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0018b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018b2   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0018b4   f027
0018b6   0e03     movlw   0x03             	MOVLW	0x03
0018b8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00239_DS_:
                                           ;	.line	370; output.c	if(getSenha_i() == 9 ){ //colocar o nome certo do contador de digitos
0018ba   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0018bc   f02f
0018be   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0018c0   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0018c2   f005
0018c4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0018c6   0a09     xorlw   0x09             	XORLW	0x09
0018c8   e102     bnz     0x0018ce         	BNZ	_00837_DS_
0018ca   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0018cc   e001     bz      0x0018d0         	BZ	_00838_DS_
                                           _00837_DS_:
0018ce   d010     bra     0x0018f0         	BRA	_00241_DS_
                                           _00838_DS_:
                                           ;	.line	371; output.c	lcdString("****            "); 
0018d0   0e00     movlw   0x00             	MOVLW	UPPER(___str_36)
0018d2   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0018d4   0e39     movlw   0x39             	MOVLW	HIGH(___str_36)
0018d6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0018d8   0ee0     movlw   0xe0             	MOVLW	LOW(___str_36)
0018da   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0018dc   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0018de   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018e0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0018e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018e4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0018e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0018e8   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0018ea   f027
0018ec   0e03     movlw   0x03             	MOVLW	0x03
0018ee   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00241_DS_:
                                           ;	.line	373; output.c	if(getSenha_i() == 10 ){ //colocar o nome certo do contador de digitos
0018f0   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0018f2   f02f
0018f4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0018f6   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0018f8   f005
0018fa   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0018fc   0a0a     xorlw   0x0a             	XORLW	0x0a
0018fe   e102     bnz     0x001904         	BNZ	_00839_DS_
001900   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001902   e001     bz      0x001906         	BZ	_00840_DS_
                                           _00839_DS_:
001904   d023     bra     0x00194c         	BRA	_00244_DS_
                                           _00840_DS_:
                                           ;	.line	374; output.c	lcdString("*****           ");
001906   0e00     movlw   0x00             	MOVLW	UPPER(___str_37)
001908   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00190a   0e39     movlw   0x39             	MOVLW	HIGH(___str_37)
00190c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00190e   0ef2     movlw   0xf2             	MOVLW	LOW(___str_37)
001910   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001912   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001914   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001916   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001918   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00191a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00191c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00191e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001920   f027
001922   0e03     movlw   0x03             	MOVLW	0x03
001924   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001926   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	375; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001928   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
00192a   0102     movlb   0x2              	BANKSEL	(_i + 1)
00192c   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00344_DS_:
                                           ;	.line	376; output.c	Delay2ms(); 
00192e   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
001930   f02d
001932   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	375; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001934   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
001936   d002     bra     0x00193c         	BRA	_40113_DS_
001938   0102     movlb   0x2              	BANKSEL	(_i + 1)
00193a   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _40113_DS_:
00193c   0e05     movlw   0x05             	MOVLW	0x05
00193e   0102     movlb   0x2              	BANKSEL	(_i + 1)
001940   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
001942   e103     bnz     0x00194a         	BNZ	_00841_DS_
001944   0edd     movlw   0xdd             	MOVLW	0xdd
001946   0102     movlb   0x2              	BANKSEL	_i
001948   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00841_DS_:
00194a   e3f1     bnc     0x00192e         	BNC	_00344_DS_
                                           _00244_DS_:
                                           ;	.line	379; output.c	if(getSenha_try() == 1){
00194c   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
00194e   f02f
001950   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001952   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001954   f005
001956   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001958   0a01     xorlw   0x01             	XORLW	0x01
00195a   e102     bnz     0x001960         	BNZ	_00842_DS_
00195c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00195e   e001     bz      0x001962         	BZ	_00843_DS_
                                           _00842_DS_:
001960   d043     bra     0x0019e8         	BRA	_00251_DS_
                                           _00843_DS_:
                                           ;	.line	380; output.c	lcdCommand(0xC0);
001962   0ec0     movlw   0xc0             	MOVLW	0xc0
001964   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001966   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001968   f028
00196a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	381; output.c	if (getLanguage() == 0) {
00196c   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
00196e   f02f
001970   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001972   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001974   e110     bnz     0x001996         	BNZ	_00246_DS_
                                           ;	.line	382; output.c	lcdString("Senha incorreta!");
001976   0e00     movlw   0x00             	MOVLW	UPPER(___str_11)
001978   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00197a   0e38     movlw   0x38             	MOVLW	HIGH(___str_11)
00197c   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00197e   0e7a     movlw   0x7a             	MOVLW	LOW(___str_11)
001980   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001982   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001984   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001986   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001988   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00198a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00198c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00198e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001990   f027
001992   0e03     movlw   0x03             	MOVLW	0x03
001994   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00246_DS_:
                                           ;	.line	384; output.c	if (getLanguage() == 1) {
001996   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001998   f02f
00199a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00199c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00199e   0a01     xorlw   0x01             	XORLW	0x01
0019a0   e110     bnz     0x0019c2         	BNZ	_00248_DS_
                                           ;	.line	385; output.c	lcdString("Wrong password! ");
0019a2   0e00     movlw   0x00             	MOVLW	UPPER(___str_12)
0019a4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0019a6   0e38     movlw   0x38             	MOVLW	HIGH(___str_12)
0019a8   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0019aa   0e8c     movlw   0x8c             	MOVLW	LOW(___str_12)
0019ac   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0019ae   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0019b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019b2   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0019b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019b6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019ba   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0019bc   f027
0019be   0e03     movlw   0x03             	MOVLW	0x03
0019c0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00248_DS_:
0019c2   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	387; output.c	for (i = 0; i <= 1500; i++) {
0019c4   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
0019c6   0102     movlb   0x2              	BANKSEL	(_i + 1)
0019c8   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00346_DS_:
                                           ;	.line	388; output.c	Delay2ms(); 
0019ca   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
0019cc   f02d
0019ce   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	387; output.c	for (i = 0; i <= 1500; i++) {
0019d0   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
0019d2   d002     bra     0x0019d8         	BRA	_50114_DS_
0019d4   0102     movlb   0x2              	BANKSEL	(_i + 1)
0019d6   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _50114_DS_:
0019d8   0e05     movlw   0x05             	MOVLW	0x05
0019da   0102     movlb   0x2              	BANKSEL	(_i + 1)
0019dc   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
0019de   e103     bnz     0x0019e6         	BNZ	_00846_DS_
0019e0   0edd     movlw   0xdd             	MOVLW	0xdd
0019e2   0102     movlb   0x2              	BANKSEL	_i
0019e4   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00846_DS_:
0019e6   e3f1     bnc     0x0019ca         	BNC	_00346_DS_
                                           _00251_DS_:
                                           ;	.line	391; output.c	if(getTestResult()){
0019e8   ec23     call    0x005e46, 0x0    	CALL	_getTestResult
0019ea   f02f
0019ec   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0019ee   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
0019f0   f005
0019f2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0019f4   1005     iorwf   0x05, 0x0, 0x0   	IORWF	r0x05, W
0019f6   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0019f8   d043     bra     0x001a80         	BRA	_00260_DS_
                                           ;	.line	392; output.c	lcdCommand(0xC0);
0019fa   0ec0     movlw   0xc0             	MOVLW	0xc0
0019fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0019fe   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001a00   f028
001a02   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	393; output.c	if (getLanguage() == 0) {
001a04   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001a06   f02f
001a08   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001a0a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a0c   e110     bnz     0x001a2e         	BNZ	_00253_DS_
                                           ;	.line	394; output.c	lcdString("Senha alterada! ");
001a0e   0e00     movlw   0x00             	MOVLW	UPPER(___str_38)
001a10   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001a12   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_38)
001a14   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001a16   0e04     movlw   0x04             	MOVLW	LOW(___str_38)
001a18   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001a1a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001a1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a1e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001a20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a22   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a26   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001a28   f027
001a2a   0e03     movlw   0x03             	MOVLW	0x03
001a2c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00253_DS_:
                                           ;	.line	396; output.c	if (getLanguage() == 1) {
001a2e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001a30   f02f
001a32   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001a34   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a36   0a01     xorlw   0x01             	XORLW	0x01
001a38   e110     bnz     0x001a5a         	BNZ	_00255_DS_
                                           ;	.line	397; output.c	lcdString("Password changed!");
001a3a   0e00     movlw   0x00             	MOVLW	UPPER(___str_39)
001a3c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001a3e   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_39)
001a40   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001a42   0e16     movlw   0x16             	MOVLW	LOW(___str_39)
001a44   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001a46   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001a48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a4a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001a4c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a4e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a52   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001a54   f027
001a56   0e03     movlw   0x03             	MOVLW	0x03
001a58   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00255_DS_:
001a5a   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	399; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001a5c   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
001a5e   0102     movlb   0x2              	BANKSEL	(_i + 1)
001a60   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00348_DS_:
                                           ;	.line	400; output.c	Delay2ms(); 
001a62   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
001a64   f02d
001a66   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	399; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001a68   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
001a6a   d002     bra     0x001a70         	BRA	_60115_DS_
001a6c   0102     movlb   0x2              	BANKSEL	(_i + 1)
001a6e   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _60115_DS_:
001a70   0e05     movlw   0x05             	MOVLW	0x05
001a72   0102     movlb   0x2              	BANKSEL	(_i + 1)
001a74   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
001a76   e103     bnz     0x001a7e         	BNZ	_00849_DS_
001a78   0edd     movlw   0xdd             	MOVLW	0xdd
001a7a   0102     movlb   0x2              	BANKSEL	_i
001a7c   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00849_DS_:
001a7e   e3f1     bnc     0x001a62         	BNC	_00348_DS_
                                           _00260_DS_:
                                           ;	.line	405; output.c	if(numTela == AGUARDO){
001a80   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001a82   0a21     xorlw   0x21             	XORLW	0x21
001a84   e102     bnz     0x001a8a         	BNZ	_00850_DS_
001a86   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001a88   e001     bz      0x001a8c         	BZ	_00851_DS_
                                           _00850_DS_:
001a8a   d043     bra     0x001b12         	BRA	_00267_DS_
                                           _00851_DS_:
                                           ;	.line	406; output.c	lcdCommand(0xC0);
001a8c   0ec0     movlw   0xc0             	MOVLW	0xc0
001a8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001a90   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001a92   f028
001a94   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	407; output.c	if (getLanguage() == 0) {
001a96   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001a98   f02f
001a9a   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001a9c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001a9e   e110     bnz     0x001ac0         	BNZ	_00262_DS_
                                           ;	.line	408; output.c	lcdString("Insira novamente");
001aa0   0e00     movlw   0x00             	MOVLW	UPPER(___str_40)
001aa2   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001aa4   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_40)
001aa6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001aa8   0e28     movlw   0x28             	MOVLW	LOW(___str_40)
001aaa   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001aac   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001aae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ab0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001ab2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ab4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ab6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ab8   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001aba   f027
001abc   0e03     movlw   0x03             	MOVLW	0x03
001abe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00262_DS_:
                                           ;	.line	410; output.c	if (getLanguage() == 1) {
001ac0   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001ac2   f02f
001ac4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001ac6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ac8   0a01     xorlw   0x01             	XORLW	0x01
001aca   e110     bnz     0x001aec         	BNZ	_00264_DS_
                                           ;	.line	411; output.c	lcdString("Please re-enter ");
001acc   0e00     movlw   0x00             	MOVLW	UPPER(___str_41)
001ace   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001ad0   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_41)
001ad2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001ad4   0e3a     movlw   0x3a             	MOVLW	LOW(___str_41)
001ad6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001ad8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001ada   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001adc   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001ade   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ae0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ae2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ae4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001ae6   f027
001ae8   0e03     movlw   0x03             	MOVLW	0x03
001aea   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00264_DS_:
001aec   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	413; output.c	for (i = 0; i <= 1500; i++){
001aee   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
001af0   0102     movlb   0x2              	BANKSEL	(_i + 1)
001af2   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00350_DS_:
                                           ;	.line	414; output.c	Delay2ms();
001af4   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
001af6   f02d
001af8   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	413; output.c	for (i = 0; i <= 1500; i++){
001afa   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
001afc   d002     bra     0x001b02         	BRA	_70116_DS_
001afe   0102     movlb   0x2              	BANKSEL	(_i + 1)
001b00   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _70116_DS_:
001b02   0e05     movlw   0x05             	MOVLW	0x05
001b04   0102     movlb   0x2              	BANKSEL	(_i + 1)
001b06   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
001b08   e103     bnz     0x001b10         	BNZ	_00854_DS_
001b0a   0edd     movlw   0xdd             	MOVLW	0xdd
001b0c   0102     movlb   0x2              	BANKSEL	_i
001b0e   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00854_DS_:
001b10   e3f1     bnc     0x001af4         	BNC	_00350_DS_
                                           _00267_DS_:
                                           ;	.line	417; output.c	if (numTela == CONFIG_HABILITA) {
001b12   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b14   0a1b     xorlw   0x1b             	XORLW	0x1b
001b16   e102     bnz     0x001b1c         	BNZ	_00855_DS_
001b18   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b1a   e001     bz      0x001b1e         	BZ	_00856_DS_
                                           _00855_DS_:
001b1c   d06f     bra     0x001bfc         	BRA	_00273_DS_
                                           _00856_DS_:
                                           ;	.line	418; output.c	lcdCommand(0x80);
001b1e   0e80     movlw   0x80             	MOVLW	0x80
001b20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b22   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001b24   f028
001b26   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	419; output.c	lcdString(msgs[numTela][idioma]);
001b28   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001b2a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b2c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001b2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b30   0e00     movlw   0x00             	MOVLW	0x00
001b32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b34   0e06     movlw   0x06             	MOVLW	0x06
001b36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b38   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001b3a   f027
001b3c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001b3e   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001b40   f005
001b42   0e04     movlw   0x04             	MOVLW	0x04
001b44   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001b46   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
001b48   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001b4a   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
001b4c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001b4e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001b50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b52   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001b54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b56   0e00     movlw   0x00             	MOVLW	0x00
001b58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b5a   0e03     movlw   0x03             	MOVLW	0x03
001b5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b5e   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001b60   f027
001b62   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001b64   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
001b66   f007
001b68   0e04     movlw   0x04             	MOVLW	0x04
001b6a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001b6c   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001b6e   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001b70   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001b72   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001b74   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001b76   ffe9
001b78   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001b7a   ffea
001b7c   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001b7e   f004
001b80   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
001b82   f005
001b84   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
001b86   f006
001b88   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001b8a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b8c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001b8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b90   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001b92   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001b94   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001b96   f027
001b98   0e03     movlw   0x03             	MOVLW	0x03
001b9a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	420; output.c	lcdCommand(0xC0);
001b9c   0ec0     movlw   0xc0             	MOVLW	0xc0
001b9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ba0   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001ba2   f028
001ba4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	421; output.c	if (getLanguage() == 0) {
001ba6   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001ba8   f02f
001baa   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001bac   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bae   e110     bnz     0x001bd0         	BNZ	_00269_DS_
                                           ;	.line	422; output.c	lcdString("*Habilitar senha");
001bb0   0e00     movlw   0x00             	MOVLW	UPPER(___str_42)
001bb2   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001bb4   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_42)
001bb6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001bb8   0e4c     movlw   0x4c             	MOVLW	LOW(___str_42)
001bba   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001bbc   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001bbe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bc0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001bc2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bc4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bc6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bc8   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001bca   f027
001bcc   0e03     movlw   0x03             	MOVLW	0x03
001bce   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00269_DS_:
                                           ;	.line	424; output.c	if (getLanguage() == 1) {
001bd0   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001bd2   f02f
001bd4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001bd6   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bd8   0a01     xorlw   0x01             	XORLW	0x01
001bda   e110     bnz     0x001bfc         	BNZ	_00273_DS_
                                           ;	.line	425; output.c	lcdString("*Enable password");
001bdc   0e00     movlw   0x00             	MOVLW	UPPER(___str_43)
001bde   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001be0   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_43)
001be2   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001be4   0e5e     movlw   0x5e             	MOVLW	LOW(___str_43)
001be6   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001be8   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001bea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bec   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001bee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bf0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001bf2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001bf4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001bf6   f027
001bf8   0e03     movlw   0x03             	MOVLW	0x03
001bfa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00273_DS_:
                                           ;	.line	431; output.c	if (numTela == SECURITY_HABILITA) {
001bfc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001bfe   0a1c     xorlw   0x1c             	XORLW	0x1c
001c00   e102     bnz     0x001c06         	BNZ	_00859_DS_
001c02   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c04   e001     bz      0x001c08         	BZ	_00860_DS_
                                           _00859_DS_:
001c06   d144     bra     0x001e90         	BRA	_00295_DS_
                                           _00860_DS_:
                                           ;	.line	432; output.c	lcdCommand(0x80);
001c08   0e80     movlw   0x80             	MOVLW	0x80
001c0a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c0c   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001c0e   f028
001c10   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	433; output.c	lcdString(msgs[numTela][idioma]);
001c12   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001c14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c16   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001c18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c1a   0e00     movlw   0x00             	MOVLW	0x00
001c1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c1e   0e06     movlw   0x06             	MOVLW	0x06
001c20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c22   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001c24   f027
001c26   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001c28   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001c2a   f005
001c2c   0e04     movlw   0x04             	MOVLW	0x04
001c2e   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001c30   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
001c32   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001c34   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
001c36   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001c38   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001c3a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c3c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001c3e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c40   0e00     movlw   0x00             	MOVLW	0x00
001c42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c44   0e03     movlw   0x03             	MOVLW	0x03
001c46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c48   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001c4a   f027
001c4c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001c4e   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
001c50   f007
001c52   0e04     movlw   0x04             	MOVLW	0x04
001c54   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001c56   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001c58   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001c5a   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001c5c   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001c5e   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001c60   ffe9
001c62   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001c64   ffea
001c66   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001c68   f004
001c6a   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
001c6c   f005
001c6e   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
001c70   f006
001c72   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001c74   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c76   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001c78   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c7a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c7c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c7e   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001c80   f027
001c82   0e03     movlw   0x03             	MOVLW	0x03
001c84   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	434; output.c	lcdCommand(0xC0);
001c86   0ec0     movlw   0xc0             	MOVLW	0xc0
001c88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001c8a   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001c8c   f028
001c8e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	435; output.c	if(getSenha_i() == 0 ){
001c90   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001c92   f02f
001c94   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001c96   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001c98   f005
001c9a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001c9c   1005     iorwf   0x05, 0x0, 0x0   	IORWF	r0x05, W
001c9e   e110     bnz     0x001cc0         	BNZ	_00275_DS_
                                           ;	.line	436; output.c	lcdString("                "); 
001ca0   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
001ca2   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001ca4   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
001ca6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001ca8   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
001caa   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001cac   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001cae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cb0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001cb2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cb4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001cb6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cb8   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001cba   f027
001cbc   0e03     movlw   0x03             	MOVLW	0x03
001cbe   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00275_DS_:
                                           ;	.line	438; output.c	if(getSenha_i() == 1 ){
001cc0   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001cc2   f02f
001cc4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001cc6   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001cc8   f005
001cca   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ccc   0a01     xorlw   0x01             	XORLW	0x01
001cce   e102     bnz     0x001cd4         	BNZ	_00861_DS_
001cd0   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001cd2   e001     bz      0x001cd6         	BZ	_00862_DS_
                                           _00861_DS_:
001cd4   d010     bra     0x001cf6         	BRA	_00277_DS_
                                           _00862_DS_:
                                           ;	.line	439; output.c	lcdString("*               "); 
001cd6   0e00     movlw   0x00             	MOVLW	UPPER(___str_6)
001cd8   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001cda   0e38     movlw   0x38             	MOVLW	HIGH(___str_6)
001cdc   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001cde   0e26     movlw   0x26             	MOVLW	LOW(___str_6)
001ce0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001ce2   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001ce4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ce6   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001ce8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cea   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001cec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001cee   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001cf0   f027
001cf2   0e03     movlw   0x03             	MOVLW	0x03
001cf4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00277_DS_:
                                           ;	.line	441; output.c	if(getSenha_i() == 2 ){ //colocar o nome certo do contador de digitos
001cf6   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001cf8   f02f
001cfa   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001cfc   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001cfe   f005
001d00   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d02   0a02     xorlw   0x02             	XORLW	0x02
001d04   e102     bnz     0x001d0a         	BNZ	_00863_DS_
001d06   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001d08   e001     bz      0x001d0c         	BZ	_00864_DS_
                                           _00863_DS_:
001d0a   d010     bra     0x001d2c         	BRA	_00279_DS_
                                           _00864_DS_:
                                           ;	.line	442; output.c	lcdString("**              "); 
001d0c   0e00     movlw   0x00             	MOVLW	UPPER(___str_7)
001d0e   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001d10   0e38     movlw   0x38             	MOVLW	HIGH(___str_7)
001d12   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001d14   0e38     movlw   0x38             	MOVLW	LOW(___str_7)
001d16   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001d18   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001d1a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d1c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001d1e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d20   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d22   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d24   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001d26   f027
001d28   0e03     movlw   0x03             	MOVLW	0x03
001d2a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00279_DS_:
                                           ;	.line	444; output.c	if(getSenha_i() == 3 ){ //colocar o nome certo do contador de digitos
001d2c   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001d2e   f02f
001d30   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001d32   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001d34   f005
001d36   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d38   0a03     xorlw   0x03             	XORLW	0x03
001d3a   e102     bnz     0x001d40         	BNZ	_00865_DS_
001d3c   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001d3e   e001     bz      0x001d42         	BZ	_00866_DS_
                                           _00865_DS_:
001d40   d010     bra     0x001d62         	BRA	_00281_DS_
                                           _00866_DS_:
                                           ;	.line	445; output.c	lcdString("***            "); 
001d42   0e00     movlw   0x00             	MOVLW	UPPER(___str_8)
001d44   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001d46   0e38     movlw   0x38             	MOVLW	HIGH(___str_8)
001d48   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001d4a   0e4a     movlw   0x4a             	MOVLW	LOW(___str_8)
001d4c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001d4e   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001d50   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d52   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001d54   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d56   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d5a   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001d5c   f027
001d5e   0e03     movlw   0x03             	MOVLW	0x03
001d60   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00281_DS_:
                                           ;	.line	447; output.c	if(getSenha_i() == 4 ){ //colocar o nome certo do contador de digitos
001d62   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001d64   f02f
001d66   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001d68   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001d6a   f005
001d6c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d6e   0a04     xorlw   0x04             	XORLW	0x04
001d70   e102     bnz     0x001d76         	BNZ	_00867_DS_
001d72   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001d74   e001     bz      0x001d78         	BZ	_00868_DS_
                                           _00867_DS_:
001d76   d010     bra     0x001d98         	BRA	_00283_DS_
                                           _00868_DS_:
                                           ;	.line	448; output.c	lcdString("****           "); 
001d78   0e00     movlw   0x00             	MOVLW	UPPER(___str_9)
001d7a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001d7c   0e38     movlw   0x38             	MOVLW	HIGH(___str_9)
001d7e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001d80   0e5a     movlw   0x5a             	MOVLW	LOW(___str_9)
001d82   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001d84   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001d86   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d88   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001d8a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d8c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001d8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001d90   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001d92   f027
001d94   0e03     movlw   0x03             	MOVLW	0x03
001d96   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00283_DS_:
                                           ;	.line	450; output.c	if(getSenha_i() == 5 ){ //colocar o nome certo do contador de digitos
001d98   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
001d9a   f02f
001d9c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001d9e   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001da0   f005
001da2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001da4   0a05     xorlw   0x05             	XORLW	0x05
001da6   e102     bnz     0x001dac         	BNZ	_00869_DS_
001da8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001daa   e001     bz      0x001dae         	BZ	_00870_DS_
                                           _00869_DS_:
001dac   d023     bra     0x001df4         	BRA	_00286_DS_
                                           _00870_DS_:
                                           ;	.line	451; output.c	lcdString("*****          "); 
001dae   0e00     movlw   0x00             	MOVLW	UPPER(___str_10)
001db0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001db2   0e38     movlw   0x38             	MOVLW	HIGH(___str_10)
001db4   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001db6   0e6a     movlw   0x6a             	MOVLW	LOW(___str_10)
001db8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001dba   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001dbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dbe   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001dc0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dc2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001dc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001dc6   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001dc8   f027
001dca   0e03     movlw   0x03             	MOVLW	0x03
001dcc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001dce   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	452; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001dd0   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
001dd2   0102     movlb   0x2              	BANKSEL	(_i + 1)
001dd4   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00352_DS_:
                                           ;	.line	453; output.c	Delay2ms(); 
001dd6   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
001dd8   f02d
001dda   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	452; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001ddc   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
001dde   d002     bra     0x001de4         	BRA	_80117_DS_
001de0   0102     movlb   0x2              	BANKSEL	(_i + 1)
001de2   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _80117_DS_:
001de4   0e05     movlw   0x05             	MOVLW	0x05
001de6   0102     movlb   0x2              	BANKSEL	(_i + 1)
001de8   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
001dea   e103     bnz     0x001df2         	BNZ	_00871_DS_
001dec   0edd     movlw   0xdd             	MOVLW	0xdd
001dee   0102     movlb   0x2              	BANKSEL	_i
001df0   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00871_DS_:
001df2   e3f1     bnc     0x001dd6         	BNC	_00352_DS_
                                           _00286_DS_:
                                           ;	.line	456; output.c	if(getSenha_try() == 3){
001df4   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
001df6   f02f
001df8   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001dfa   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001dfc   f005
001dfe   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e00   0a03     xorlw   0x03             	XORLW	0x03
001e02   e102     bnz     0x001e08         	BNZ	_00872_DS_
001e04   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001e06   e001     bz      0x001e0a         	BZ	_00873_DS_
                                           _00872_DS_:
001e08   d043     bra     0x001e90         	BRA	_00295_DS_
                                           _00873_DS_:
                                           ;	.line	457; output.c	lcdCommand(0xC0);
001e0a   0ec0     movlw   0xc0             	MOVLW	0xc0
001e0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e0e   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001e10   f028
001e12   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	458; output.c	if (getLanguage() == 0) {
001e14   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001e16   f02f
001e18   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001e1a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e1c   e110     bnz     0x001e3e         	BNZ	_00288_DS_
                                           ;	.line	459; output.c	lcdString("Senha incorreta!");
001e1e   0e00     movlw   0x00             	MOVLW	UPPER(___str_11)
001e20   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001e22   0e38     movlw   0x38             	MOVLW	HIGH(___str_11)
001e24   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001e26   0e7a     movlw   0x7a             	MOVLW	LOW(___str_11)
001e28   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001e2a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001e2c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e2e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001e30   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e32   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e34   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e36   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001e38   f027
001e3a   0e03     movlw   0x03             	MOVLW	0x03
001e3c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00288_DS_:
                                           ;	.line	461; output.c	if (getLanguage() == 1) {
001e3e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001e40   f02f
001e42   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001e44   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e46   0a01     xorlw   0x01             	XORLW	0x01
001e48   e110     bnz     0x001e6a         	BNZ	_00290_DS_
                                           ;	.line	462; output.c	lcdString("Wrong password! ");
001e4a   0e00     movlw   0x00             	MOVLW	UPPER(___str_12)
001e4c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001e4e   0e38     movlw   0x38             	MOVLW	HIGH(___str_12)
001e50   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001e52   0e8c     movlw   0x8c             	MOVLW	LOW(___str_12)
001e54   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001e56   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001e58   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e5a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001e5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e5e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001e60   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001e62   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001e64   f027
001e66   0e03     movlw   0x03             	MOVLW	0x03
001e68   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00290_DS_:
001e6a   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	464; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001e6c   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
001e6e   0102     movlb   0x2              	BANKSEL	(_i + 1)
001e70   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00354_DS_:
                                           ;	.line	465; output.c	Delay2ms(); 
001e72   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
001e74   f02d
001e76   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	464; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
001e78   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
001e7a   d002     bra     0x001e80         	BRA	_90118_DS_
001e7c   0102     movlb   0x2              	BANKSEL	(_i + 1)
001e7e   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _90118_DS_:
001e80   0e05     movlw   0x05             	MOVLW	0x05
001e82   0102     movlb   0x2              	BANKSEL	(_i + 1)
001e84   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
001e86   e103     bnz     0x001e8e         	BNZ	_00876_DS_
001e88   0edd     movlw   0xdd             	MOVLW	0xdd
001e8a   0102     movlb   0x2              	BANKSEL	_i
001e8c   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00876_DS_:
001e8e   e3f1     bnc     0x001e72         	BNC	_00354_DS_
                                           _00295_DS_:
                                           ;	.line	470; output.c	if(numTela == HABILITA_SENHA){   
001e90   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001e92   0a1d     xorlw   0x1d             	XORLW	0x1d
001e94   e102     bnz     0x001e9a         	BNZ	_00877_DS_
001e96   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001e98   e001     bz      0x001e9c         	BZ	_00878_DS_
                                           _00877_DS_:
001e9a   d06f     bra     0x001f7a         	BRA	_00301_DS_
                                           _00878_DS_:
                                           ;	.line	471; output.c	lcdCommand(0x80);
001e9c   0e80     movlw   0x80             	MOVLW	0x80
001e9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ea0   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001ea2   f028
001ea4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	472; output.c	lcdString(msgs[numTela][idioma]);
001ea6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001ea8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eaa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001eac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eae   0e00     movlw   0x00             	MOVLW	0x00
001eb0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eb2   0e06     movlw   0x06             	MOVLW	0x06
001eb4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001eb6   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001eb8   f027
001eba   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001ebc   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001ebe   f005
001ec0   0e04     movlw   0x04             	MOVLW	0x04
001ec2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001ec4   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
001ec6   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001ec8   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
001eca   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001ecc   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001ece   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ed0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001ed2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ed4   0e00     movlw   0x00             	MOVLW	0x00
001ed6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ed8   0e03     movlw   0x03             	MOVLW	0x03
001eda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001edc   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001ede   f027
001ee0   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001ee2   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
001ee4   f007
001ee6   0e04     movlw   0x04             	MOVLW	0x04
001ee8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001eea   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001eec   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001eee   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001ef0   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001ef2   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001ef4   ffe9
001ef6   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001ef8   ffea
001efa   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001efc   f004
001efe   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
001f00   f005
001f02   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
001f04   f006
001f06   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001f08   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f0a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001f0c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f0e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001f10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f12   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001f14   f027
001f16   0e03     movlw   0x03             	MOVLW	0x03
001f18   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	473; output.c	lcdCommand(0xC0);
001f1a   0ec0     movlw   0xc0             	MOVLW	0xc0
001f1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f1e   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001f20   f028
001f22   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	474; output.c	if (getLanguage() == 0) {
001f24   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001f26   f02f
001f28   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001f2a   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001f2c   e110     bnz     0x001f4e         	BNZ	_00297_DS_
                                           ;	.line	475; output.c	lcdString(" Desabilitar    ");
001f2e   0e00     movlw   0x00             	MOVLW	UPPER(___str_44)
001f30   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001f32   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_44)
001f34   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001f36   0e70     movlw   0x70             	MOVLW	LOW(___str_44)
001f38   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001f3a   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001f3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f3e   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001f40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f42   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001f44   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f46   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001f48   f027
001f4a   0e03     movlw   0x03             	MOVLW	0x03
001f4c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00297_DS_:
                                           ;	.line	477; output.c	if (getLanguage() == 1) {
001f4e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
001f50   f02f
001f52   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001f54   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001f56   0a01     xorlw   0x01             	XORLW	0x01
001f58   e110     bnz     0x001f7a         	BNZ	_00301_DS_
                                           ;	.line	478; output.c	lcdString(" Disable        "); 
001f5a   0e00     movlw   0x00             	MOVLW	UPPER(___str_45)
001f5c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001f5e   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_45)
001f60   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
001f62   0e82     movlw   0x82             	MOVLW	LOW(___str_45)
001f64   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001f66   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001f68   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f6a   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001f6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f6e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001f70   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f72   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001f74   f027
001f76   0e03     movlw   0x03             	MOVLW	0x03
001f78   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00301_DS_:
                                           ;	.line	482; output.c	if(numTela == DESABILITA_SENHA){   
001f7a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f7c   0a1e     xorlw   0x1e             	XORLW	0x1e
001f7e   e102     bnz     0x001f84         	BNZ	_00881_DS_
001f80   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001f82   e001     bz      0x001f86         	BZ	_00882_DS_
                                           _00881_DS_:
001f84   d06f     bra     0x002064         	BRA	_00307_DS_
                                           _00882_DS_:
                                           ;	.line	483; output.c	lcdCommand(0x80);
001f86   0e80     movlw   0x80             	MOVLW	0x80
001f88   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f8a   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
001f8c   f028
001f8e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	484; output.c	lcdString(msgs[numTela][idioma]);
001f90   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
001f92   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f94   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
001f96   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f98   0e00     movlw   0x00             	MOVLW	0x00
001f9a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001f9c   0e06     movlw   0x06             	MOVLW	0x06
001f9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001fa0   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001fa2   f027
001fa4   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
001fa6   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
001fa8   f005
001faa   0e04     movlw   0x04             	MOVLW	0x04
001fac   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001fae   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
001fb0   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001fb2   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
001fb4   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001fb6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
001fb8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001fba   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
001fbc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001fbe   0e00     movlw   0x00             	MOVLW	0x00
001fc0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001fc2   0e03     movlw   0x03             	MOVLW	0x03
001fc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001fc6   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
001fc8   f027
001fca   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
001fcc   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
001fce   f007
001fd0   0e04     movlw   0x04             	MOVLW	0x04
001fd2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
001fd4   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001fd6   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
001fd8   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
001fda   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
001fdc   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
001fde   ffe9
001fe0   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
001fe2   ffea
001fe4   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
001fe6   f004
001fe8   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
001fea   f005
001fec   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
001fee   f006
001ff0   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
001ff2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ff4   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
001ff6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ff8   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
001ffa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
001ffc   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
001ffe   f027
002000   0e03     movlw   0x03             	MOVLW	0x03
002002   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	485; output.c	lcdCommand(0xC0);
002004   0ec0     movlw   0xc0             	MOVLW	0xc0
002006   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002008   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00200a   f028
00200c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	486; output.c	if (getLanguage() == 0) {
00200e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
002010   f02f
002012   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002014   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002016   e110     bnz     0x002038         	BNZ	_00303_DS_
                                           ;	.line	487; output.c	lcdString("*Desabilitar    ");
002018   0e00     movlw   0x00             	MOVLW	UPPER(___str_46)
00201a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
00201c   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_46)
00201e   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002020   0e94     movlw   0x94             	MOVLW	LOW(___str_46)
002022   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002024   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002026   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002028   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00202a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00202c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00202e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002030   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
002032   f027
002034   0e03     movlw   0x03             	MOVLW	0x03
002036   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00303_DS_:
                                           ;	.line	489; output.c	if (getLanguage() == 1) {
002038   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
00203a   f02f
00203c   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
00203e   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002040   0a01     xorlw   0x01             	XORLW	0x01
002042   e110     bnz     0x002064         	BNZ	_00307_DS_
                                           ;	.line	490; output.c	lcdString("*Disable        "); 
002044   0e00     movlw   0x00             	MOVLW	UPPER(___str_47)
002046   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
002048   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_47)
00204a   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
00204c   0ea6     movlw   0xa6             	MOVLW	LOW(___str_47)
00204e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002050   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002052   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002054   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
002056   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002058   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00205a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00205c   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00205e   f027
002060   0e03     movlw   0x03             	MOVLW	0x03
002062   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00307_DS_:
                                           ;	.line	494; output.c	if (numTela == STATE_RESET) {
002064   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002066   0a1f     xorlw   0x1f             	XORLW	0x1f
002068   e102     bnz     0x00206e         	BNZ	_00885_DS_
00206a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00206c   e001     bz      0x002070         	BZ	_00886_DS_
                                           _00885_DS_:
00206e   d054     bra     0x002118         	BRA	_00309_DS_
                                           _00886_DS_:
                                           ;	.line	495; output.c	lcdCommand(0x80);
002070   0e80     movlw   0x80             	MOVLW	0x80
002072   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002074   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
002076   f028
002078   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	496; output.c	lcdString(msgs[numTela][idioma]);
00207a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00207c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00207e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002080   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002082   0e00     movlw   0x00             	MOVLW	0x00
002084   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002086   0e06     movlw   0x06             	MOVLW	0x06
002088   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00208a   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
00208c   f027
00208e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002090   cff3     movff   0xff3, 0x005     	MOVFF	PRODL, r0x05
002092   f005
002094   0e04     movlw   0x04             	MOVLW	0x04
002096   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002098   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
00209a   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
00209c   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
00209e   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0020a0   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0020a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020a4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0020a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020a8   0e00     movlw   0x00             	MOVLW	0x00
0020aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020ac   0e03     movlw   0x03             	MOVLW	0x03
0020ae   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020b0   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0020b2   f027
0020b4   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0020b6   cff3     movff   0xff3, 0x007     	MOVFF	PRODL, r0x07
0020b8   f007
0020ba   0e04     movlw   0x04             	MOVLW	0x04
0020bc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0020be   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0020c0   2604     addwf   0x04, 0x1, 0x0   	ADDWF	r0x04, F
0020c2   5007     movf    0x07, 0x0, 0x0   	MOVF	r0x07, W
0020c4   2205     addwfc  0x05, 0x1, 0x0   	ADDWFC	r0x05, F
0020c6   c004     movff   0x004, 0xfe9     	MOVFF	r0x04, FSR0L
0020c8   ffe9
0020ca   c005     movff   0x005, 0xfea     	MOVFF	r0x05, FSR0H
0020cc   ffea
0020ce   cfee     movff   0xfee, 0x004     	MOVFF	POSTINC0, r0x04
0020d0   f004
0020d2   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
0020d4   f005
0020d6   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0020d8   f006
0020da   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
0020dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020de   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
0020e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020e2   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0020e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020e6   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0020e8   f027
0020ea   0e03     movlw   0x03             	MOVLW	0x03
0020ec   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	497; output.c	lcdCommand(0xC0);
0020ee   0ec0     movlw   0xc0             	MOVLW	0xc0
0020f0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0020f2   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0020f4   f028
0020f6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	498; output.c	lcdString("                ");
0020f8   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
0020fa   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0020fc   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
0020fe   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
002100   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
002102   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
002104   5006     movf    0x06, 0x0, 0x0   	MOVF	r0x06, W
002106   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002108   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
00210a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00210c   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00210e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002110   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
002112   f027
002114   0e03     movlw   0x03             	MOVLW	0x03
002116   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00309_DS_:
                                           ;	.line	501; output.c	if (numTela == SECURITY_RESET) {
002118   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00211a   0a20     xorlw   0x20             	XORLW	0x20
00211c   e102     bnz     0x002122         	BNZ	_00887_DS_
00211e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002120   e001     bz      0x002124         	BZ	_00888_DS_
                                           _00887_DS_:
002122   d17d     bra     0x00241e         	BRA	_00360_DS_
                                           _00888_DS_:
                                           ;	.line	502; output.c	lcdCommand(0x80);
002124   0e80     movlw   0x80             	MOVLW	0x80
002126   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002128   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
00212a   f028
00212c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	503; output.c	lcdString(msgs[numTela][idioma]);
00212e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002130   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002132   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002134   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002136   0e00     movlw   0x00             	MOVLW	0x00
002138   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00213a   0e06     movlw   0x06             	MOVLW	0x06
00213c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00213e   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
002140   f027
002142   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002144   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002146   f001
002148   0e04     movlw   0x04             	MOVLW	0x04
00214a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00214c   0e03     movlw   0x03             	MOVLW	LOW(_msgs)
00214e   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002150   0e02     movlw   0x02             	MOVLW	HIGH(_msgs)
002152   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
002154   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002156   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002158   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00215a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00215c   0e00     movlw   0x00             	MOVLW	0x00
00215e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002160   0e03     movlw   0x03             	MOVLW	0x03
002162   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002164   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
002166   f027
002168   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00216a   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
00216c   f003
00216e   0e04     movlw   0x04             	MOVLW	0x04
002170   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002172   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002174   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
002176   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002178   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
00217a   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
00217c   ffe9
00217e   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
002180   ffea
002182   cfee     movff   0xfee, 0x000     	MOVFF	POSTINC0, r0x00
002184   f000
002186   cfee     movff   0xfee, 0x001     	MOVFF	POSTINC0, r0x01
002188   f001
00218a   cfef     movff   0xfef, 0x002     	MOVFF	INDF0, r0x02
00218c   f002
00218e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002190   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002192   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002194   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002196   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002198   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00219a   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00219c   f027
00219e   0e03     movlw   0x03             	MOVLW	0x03
0021a0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	504; output.c	lcdCommand(0xC0);
0021a2   0ec0     movlw   0xc0             	MOVLW	0xc0
0021a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021a6   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0021a8   f028
0021aa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	505; output.c	if(getSenha_i() == 0 ){
0021ac   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0021ae   f02f
0021b0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021b2   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0021b4   f001
0021b6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021b8   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
0021ba   e110     bnz     0x0021dc         	BNZ	_00311_DS_
                                           ;	.line	506; output.c	lcdString("                "); 
0021bc   0e00     movlw   0x00             	MOVLW	UPPER(___str_5)
0021be   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021c0   0e38     movlw   0x38             	MOVLW	HIGH(___str_5)
0021c2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021c4   0e14     movlw   0x14             	MOVLW	LOW(___str_5)
0021c6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021c8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0021ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021cc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0021ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021d0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0021d4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0021d6   f027
0021d8   0e03     movlw   0x03             	MOVLW	0x03
0021da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00311_DS_:
                                           ;	.line	508; output.c	if(getSenha_i() == 1 ){
0021dc   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0021de   f02f
0021e0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021e2   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0021e4   f001
0021e6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0021e8   0a01     xorlw   0x01             	XORLW	0x01
0021ea   e102     bnz     0x0021f0         	BNZ	_00889_DS_
0021ec   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0021ee   e001     bz      0x0021f2         	BZ	_00890_DS_
                                           _00889_DS_:
0021f0   d010     bra     0x002212         	BRA	_00313_DS_
                                           _00890_DS_:
                                           ;	.line	509; output.c	lcdString("*               "); 
0021f2   0e00     movlw   0x00             	MOVLW	UPPER(___str_6)
0021f4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0021f6   0e38     movlw   0x38             	MOVLW	HIGH(___str_6)
0021f8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0021fa   0e26     movlw   0x26             	MOVLW	LOW(___str_6)
0021fc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0021fe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002200   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002202   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002204   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002206   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002208   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00220a   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
00220c   f027
00220e   0e03     movlw   0x03             	MOVLW	0x03
002210   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00313_DS_:
                                           ;	.line	511; output.c	if(getSenha_i() == 2 ){ //colocar o nome certo do contador de digitos
002212   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
002214   f02f
002216   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002218   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00221a   f001
00221c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00221e   0a02     xorlw   0x02             	XORLW	0x02
002220   e102     bnz     0x002226         	BNZ	_00891_DS_
002222   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002224   e001     bz      0x002228         	BZ	_00892_DS_
                                           _00891_DS_:
002226   d010     bra     0x002248         	BRA	_00315_DS_
                                           _00892_DS_:
                                           ;	.line	512; output.c	lcdString("**              "); 
002228   0e00     movlw   0x00             	MOVLW	UPPER(___str_7)
00222a   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00222c   0e38     movlw   0x38             	MOVLW	HIGH(___str_7)
00222e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002230   0e38     movlw   0x38             	MOVLW	LOW(___str_7)
002232   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002234   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002236   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002238   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00223a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00223c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00223e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002240   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
002242   f027
002244   0e03     movlw   0x03             	MOVLW	0x03
002246   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00315_DS_:
                                           ;	.line	514; output.c	if(getSenha_i() == 3 ){ //colocar o nome certo do contador de digitos
002248   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
00224a   f02f
00224c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00224e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002250   f001
002252   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002254   0a03     xorlw   0x03             	XORLW	0x03
002256   e102     bnz     0x00225c         	BNZ	_00893_DS_
002258   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00225a   e001     bz      0x00225e         	BZ	_00894_DS_
                                           _00893_DS_:
00225c   d010     bra     0x00227e         	BRA	_00317_DS_
                                           _00894_DS_:
                                           ;	.line	515; output.c	lcdString("***            "); 
00225e   0e00     movlw   0x00             	MOVLW	UPPER(___str_8)
002260   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002262   0e38     movlw   0x38             	MOVLW	HIGH(___str_8)
002264   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002266   0e4a     movlw   0x4a             	MOVLW	LOW(___str_8)
002268   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00226a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00226c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00226e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002270   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002272   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002274   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002276   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
002278   f027
00227a   0e03     movlw   0x03             	MOVLW	0x03
00227c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00317_DS_:
                                           ;	.line	517; output.c	if(getSenha_i() == 4 ){ //colocar o nome certo do contador de digitos
00227e   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
002280   f02f
002282   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002284   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002286   f001
002288   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00228a   0a04     xorlw   0x04             	XORLW	0x04
00228c   e102     bnz     0x002292         	BNZ	_00895_DS_
00228e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002290   e001     bz      0x002294         	BZ	_00896_DS_
                                           _00895_DS_:
002292   d010     bra     0x0022b4         	BRA	_00319_DS_
                                           _00896_DS_:
                                           ;	.line	518; output.c	lcdString("****           "); 
002294   0e00     movlw   0x00             	MOVLW	UPPER(___str_9)
002296   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002298   0e38     movlw   0x38             	MOVLW	HIGH(___str_9)
00229a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00229c   0e5a     movlw   0x5a             	MOVLW	LOW(___str_9)
00229e   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0022a0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0022a2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022a4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022a6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022aa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022ac   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0022ae   f027
0022b0   0e03     movlw   0x03             	MOVLW	0x03
0022b2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00319_DS_:
                                           ;	.line	520; output.c	if(getSenha_i() == 5 ){ //colocar o nome certo do contador de digitos
0022b4   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
0022b6   f02f
0022b8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0022ba   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0022bc   f001
0022be   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022c0   0a05     xorlw   0x05             	XORLW	0x05
0022c2   e102     bnz     0x0022c8         	BNZ	_00897_DS_
0022c4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022c6   e001     bz      0x0022ca         	BZ	_00898_DS_
                                           _00897_DS_:
0022c8   d010     bra     0x0022ea         	BRA	_00321_DS_
                                           _00898_DS_:
                                           ;	.line	521; output.c	lcdString("*****          "); 
0022ca   0e00     movlw   0x00             	MOVLW	UPPER(___str_10)
0022cc   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0022ce   0e38     movlw   0x38             	MOVLW	HIGH(___str_10)
0022d0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0022d2   0e6a     movlw   0x6a             	MOVLW	LOW(___str_10)
0022d4   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0022d6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0022d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022da   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0022dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022de   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0022e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022e2   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0022e4   f027
0022e6   0e03     movlw   0x03             	MOVLW	0x03
0022e8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00321_DS_:
                                           ;	.line	523; output.c	lcdCommand(0xC0);
0022ea   0ec0     movlw   0xc0             	MOVLW	0xc0
0022ec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0022ee   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
0022f0   f028
0022f2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	524; output.c	if(getSenha_try() == 3){
0022f4   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
0022f6   f02f
0022f8   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0022fa   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0022fc   f001
0022fe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002300   0a03     xorlw   0x03             	XORLW	0x03
002302   e102     bnz     0x002308         	BNZ	_00899_DS_
002304   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002306   e001     bz      0x00230a         	BZ	_00900_DS_
                                           _00899_DS_:
002308   d043     bra     0x002390         	BRA	_00328_DS_
                                           _00900_DS_:
                                           ;	.line	525; output.c	lcdCommand(0xC0);
00230a   0ec0     movlw   0xc0             	MOVLW	0xc0
00230c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00230e   ecf3     call    0x0051e6, 0x0    	CALL	_lcdCommand
002310   f028
002312   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	526; output.c	if (getLanguage() == 0) {
002314   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
002316   f02f
002318   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00231a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00231c   e110     bnz     0x00233e         	BNZ	_00323_DS_
                                           ;	.line	527; output.c	lcdString("Senha incorreta!");
00231e   0e00     movlw   0x00             	MOVLW	UPPER(___str_11)
002320   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
002322   0e38     movlw   0x38             	MOVLW	HIGH(___str_11)
002324   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002326   0e7a     movlw   0x7a             	MOVLW	LOW(___str_11)
002328   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00232a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00232c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00232e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002330   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002332   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002334   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002336   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
002338   f027
00233a   0e03     movlw   0x03             	MOVLW	0x03
00233c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00323_DS_:
                                           ;	.line	529; output.c	if (getLanguage() == 1) {
00233e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
002340   f02f
002342   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002344   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002346   0a01     xorlw   0x01             	XORLW	0x01
002348   e110     bnz     0x00236a         	BNZ	_00325_DS_
                                           ;	.line	530; output.c	lcdString("Wrong password! ");
00234a   0e00     movlw   0x00             	MOVLW	UPPER(___str_12)
00234c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00234e   0e38     movlw   0x38             	MOVLW	HIGH(___str_12)
002350   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002352   0e8c     movlw   0x8c             	MOVLW	LOW(___str_12)
002354   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002356   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002358   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00235a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00235c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00235e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002360   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002362   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
002364   f027
002366   0e03     movlw   0x03             	MOVLW	0x03
002368   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00325_DS_:
00236a   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	532; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
00236c   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
00236e   0102     movlb   0x2              	BANKSEL	(_i + 1)
002370   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00356_DS_:
                                           ;	.line	533; output.c	Delay2ms(); 
002372   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
002374   f02d
002376   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	532; output.c	for (i = 0; i <= 1500; i++) { //delay para leitur da frase de 5s
002378   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
00237a   d002     bra     0x002380         	BRA	_100119_DS_
00237c   0102     movlb   0x2              	BANKSEL	(_i + 1)
00237e   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _100119_DS_:
002380   0e05     movlw   0x05             	MOVLW	0x05
002382   0102     movlb   0x2              	BANKSEL	(_i + 1)
002384   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
002386   e103     bnz     0x00238e         	BNZ	_00903_DS_
002388   0edd     movlw   0xdd             	MOVLW	0xdd
00238a   0102     movlb   0x2              	BANKSEL	_i
00238c   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00903_DS_:
00238e   e3f1     bnc     0x002372         	BNC	_00356_DS_
                                           _00328_DS_:
                                           ;	.line	536; output.c	if(getTestResult()){
002390   ec23     call    0x005e46, 0x0    	CALL	_getTestResult
002392   f02f
002394   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002396   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002398   f001
00239a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00239c   1001     iorwf   0x01, 0x0, 0x0   	IORWF	r0x01, W
00239e   b4d8     btfsc   0xd8, 0x2, 0x0   	BTFSC	STATUS, 2
0023a0   d03e     bra     0x00241e         	BRA	_00360_DS_
                                           ;	.line	537; output.c	if (getLanguage() == 0) {
0023a2   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
0023a4   f02f
0023a6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0023a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023aa   e110     bnz     0x0023cc         	BNZ	_00330_DS_
                                           ;	.line	538; output.c	lcdString("ReiniciandoTchau");
0023ac   0e00     movlw   0x00             	MOVLW	UPPER(___str_48)
0023ae   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0023b0   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_48)
0023b2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023b4   0eb8     movlw   0xb8             	MOVLW	LOW(___str_48)
0023b6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0023b8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0023ba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023bc   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023c0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023c4   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0023c6   f027
0023c8   0e03     movlw   0x03             	MOVLW	0x03
0023ca   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00330_DS_:
                                           ;	.line	540; output.c	if (getLanguage() == 1) {
0023cc   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
0023ce   f02f
0023d0   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0023d2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023d4   0a01     xorlw   0x01             	XORLW	0x01
0023d6   e110     bnz     0x0023f8         	BNZ	_00332_DS_
                                           ;	.line	541; output.c	lcdString("RestartingByebye");
0023d8   0e00     movlw   0x00             	MOVLW	UPPER(___str_49)
0023da   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0023dc   0e3a     movlw   0x3a             	MOVLW	HIGH(___str_49)
0023de   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0023e0   0eca     movlw   0xca             	MOVLW	LOW(___str_49)
0023e2   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0023e4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0023e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023e8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0023ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023ec   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0023ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0023f0   ec7e     call    0x004efc, 0x0    	CALL	_lcdString
0023f2   f027
0023f4   0e03     movlw   0x03             	MOVLW	0x03
0023f6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00332_DS_:
0023f8   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	543; output.c	for (i = 0; i <= 1500; i++){
0023fa   6bf0     clrf    0xf0, 0x1        	CLRF	_i, B
0023fc   0102     movlb   0x2              	BANKSEL	(_i + 1)
0023fe   6bf1     clrf    0xf1, 0x1        	CLRF	(_i + 1), B
                                           _00358_DS_:
                                           ;	.line	544; output.c	Delay2ms();
002400   ecd3     call    0x005ba6, 0x0    	CALL	_Delay2ms
002402   f02d
002404   0102     movlb   0x2              	BANKSEL	_i
                                           ;	.line	543; output.c	for (i = 0; i <= 1500; i++){
002406   3ff0     incfsz  0xf0, 0x1, 0x1   	INCFSZ	_i, F, B
002408   d002     bra     0x00240e         	BRA	_110120_DS_
00240a   0102     movlb   0x2              	BANKSEL	(_i + 1)
00240c   2bf1     incf    0xf1, 0x1, 0x1   	INCF	(_i + 1), F, B
                                           _110120_DS_:
00240e   0e05     movlw   0x05             	MOVLW	0x05
002410   0102     movlb   0x2              	BANKSEL	(_i + 1)
002412   5df1     subwf   0xf1, 0x0, 0x1   	SUBWF	(_i + 1), W, B
002414   e103     bnz     0x00241c         	BNZ	_00906_DS_
002416   0edd     movlw   0xdd             	MOVLW	0xdd
002418   0102     movlb   0x2              	BANKSEL	_i
00241a   5df0     subwf   0xf0, 0x0, 0x1   	SUBWF	_i, W, B
                                           _00906_DS_:
00241c   e3f1     bnc     0x002400         	BNC	_00358_DS_
                                           _00360_DS_:
00241e   cfe4     movff   0xfe4, 0x007     	MOVFF	PREINC1, r0x07
002420   f007
002422   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
002424   f006
002426   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
002428   f005
00242a   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
00242c   f004
00242e   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
002430   f003
002432   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
002434   f002
002436   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
002438   f001
00243a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00243c   f000
00243e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
002440   ffd9
002442   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_output__outputInit	code
                                           _outputInit:
                                           ;	.line	53; output.c	void outputInit(void) {
0037e8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0037ea   ffe5
0037ec   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0037ee   ffd9
                                           ;	.line	54; output.c	lcdInit();
0037f0   ec37     call    0x004c6e, 0x0    	CALL	_lcdInit
0037f2   f026
                                           ;	.line	55; output.c	ADread = 19;
0037f4   0e13     movlw   0x13             	MOVLW	0x13
0037f6   0102     movlb   0x2              	BANKSEL	_ADread
0037f8   6fee     movwf   0xee, 0x1        	MOVWF	_ADread, B
0037fa   0102     movlb   0x2              	BANKSEL	(_ADread + 1)
0037fc   6bef     clrf    0xef, 0x1        	CLRF	(_ADread + 1), B
0037fe   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
003800   ffd9
003802   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           ___str_0:
003804   0020     dw      0x0020           	DB	0x20, 0x00
                                           ; ; Starting pCode block
                                           ___str_1:
003806   7528     btg     0x28, 0x2, 0x1   	DB	0x28, 0x75, 0x6e, 0x69, 0x29, 0x00
003808   696e     setf    0x6e, 0x1        
00380a   0029     dw      0x0029           
                                           ; ; Starting pCode block
                                           ___str_2:
00380c   002f     dw      0x002f           	DB	0x2f, 0x00
                                           ; ; Starting pCode block
                                           ___str_3:
00380e   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x00
003810   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_4:
003812   003a     dw      0x003a           	DB	0x3a, 0x00
                                           ; ; Starting pCode block
                                           ___str_5:
003814   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003816   2020     addwfc  0x20, 0x0, 0x0   
003818   2020     addwfc  0x20, 0x0, 0x0   
00381a   2020     addwfc  0x20, 0x0, 0x0   
00381c   2020     addwfc  0x20, 0x0, 0x0   
00381e   2020     addwfc  0x20, 0x0, 0x0   
003820   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003822   2020     addwfc  0x20, 0x0, 0x0   
003824   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_6:
003826   202a     addwfc  0x2a, 0x0, 0x0   	DB	0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003828   2020     addwfc  0x20, 0x0, 0x0   
00382a   2020     addwfc  0x20, 0x0, 0x0   
00382c   2020     addwfc  0x20, 0x0, 0x0   
00382e   2020     addwfc  0x20, 0x0, 0x0   
003830   2020     addwfc  0x20, 0x0, 0x0   
003832   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003834   2020     addwfc  0x20, 0x0, 0x0   
003836   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_7:
003838   2a2a     incf    0x2a, 0x1, 0x0   	DB	0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00383a   2020     addwfc  0x20, 0x0, 0x0   
00383c   2020     addwfc  0x20, 0x0, 0x0   
00383e   2020     addwfc  0x20, 0x0, 0x0   
003840   2020     addwfc  0x20, 0x0, 0x0   
003842   2020     addwfc  0x20, 0x0, 0x0   
003844   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003846   2020     addwfc  0x20, 0x0, 0x0   
003848   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_8:
00384a   2a2a     incf    0x2a, 0x1, 0x0   	DB	0x2a, 0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00384c   202a     addwfc  0x2a, 0x0, 0x0   
00384e   2020     addwfc  0x20, 0x0, 0x0   
003850   2020     addwfc  0x20, 0x0, 0x0   
003852   2020     addwfc  0x20, 0x0, 0x0   
003854   2020     addwfc  0x20, 0x0, 0x0   
003856   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x00
003858   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_9:
00385a   2a2a     incf    0x2a, 0x1, 0x0   	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00385c   2a2a     incf    0x2a, 0x1, 0x0   
00385e   2020     addwfc  0x20, 0x0, 0x0   
003860   2020     addwfc  0x20, 0x0, 0x0   
003862   2020     addwfc  0x20, 0x0, 0x0   
003864   2020     addwfc  0x20, 0x0, 0x0   
003866   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x00
003868   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_10:
00386a   2a2a     incf    0x2a, 0x1, 0x0   	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00386c   2a2a     incf    0x2a, 0x1, 0x0   
00386e   202a     addwfc  0x2a, 0x0, 0x0   
003870   2020     addwfc  0x20, 0x0, 0x0   
003872   2020     addwfc  0x20, 0x0, 0x0   
003874   2020     addwfc  0x20, 0x0, 0x0   
003876   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x00
003878   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_11:
00387a   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x6e, 0x68, 0x61, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72
00387c   686e     setf    0x6e, 0x0        
00387e   2061     addwfc  0x61, 0x0, 0x0   
003880   6e69     movwf   0x69, 0x0        
003882   6f63     movwf   0x63, 0x1        
003884   7272     btg     0x72, 0x1, 0x0   
003886   7465     btg     0x65, 0x2, 0x0   	DB	0x65, 0x74, 0x61, 0x21, 0x00
003888   2161     addwfc  0x61, 0x0, 0x1   
00388a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_12:
00388c   7257     btg     0x57, 0x1, 0x0   	DB	0x57, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f
00388e   6e6f     movwf   0x6f, 0x0        
003890   2067     addwfc  0x67, 0x0, 0x0   
003892   6170     cpfslt  0x70, 0x1        
003894   7373     btg     0x73, 0x1, 0x1   
003896   6f77     movwf   0x77, 0x1        
003898   6472     cpfsgt  0x72, 0x0        	DB	0x72, 0x64, 0x21, 0x20, 0x00
00389a   2021     addwfc  0x21, 0x0, 0x0   
00389c   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_13:
00389e   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x28, 0x00
0038a0   2820     incf    0x20, 0x0, 0x0   
0038a2   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_14:
0038a4   002c     dw      0x002c           	DB	0x2c, 0x00
                                           ; ; Starting pCode block
                                           ___str_15:
0038a6   2029     addwfc  0x29, 0x0, 0x0   	DB	0x29, 0x20, 0x00
0038a8   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_16:
0038aa   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x00
0038ac   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_17:
0038ae   4320     rrncf   0x20, 0x1, 0x1   	DB	0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x20, 0x74
0038b0   6e6f     movwf   0x6f, 0x0        
0038b2   6966     setf    0x66, 0x1        
0038b4   7567     btg     0x67, 0x2, 0x1   
0038b6   6172     cpfslt  0x72, 0x1        
0038b8   7420     btg     0x20, 0x2, 0x0   
0038ba   6d65     negf    0x65, 0x1        	DB	0x65, 0x6d, 0x70, 0x6f, 0x00
0038bc   6f70     movwf   0x70, 0x1        
0038be   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_18:
0038c0   5320     movf    0x20, 0x1, 0x1   	DB	0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x20
0038c2   7465     btg     0x65, 0x2, 0x0   
0038c4   7420     btg     0x20, 0x2, 0x0   
0038c6   6d69     negf    0x69, 0x1        
0038c8   3a65     swapf   0x65, 0x1, 0x0   
0038ca   2020     addwfc  0x20, 0x0, 0x0   
0038cc   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x00
0038ce   2020     addwfc  0x20, 0x0, 0x0   
0038d0   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_19:
0038d2   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
0038d4   2020     addwfc  0x20, 0x0, 0x0   
0038d6   2020     addwfc  0x20, 0x0, 0x0   
0038d8   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_20:
0038da   432a     rrncf   0x2a, 0x1, 0x1   	DB	0x2a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x20, 0x74
0038dc   6e6f     movwf   0x6f, 0x0        
0038de   6966     setf    0x66, 0x1        
0038e0   7567     btg     0x67, 0x2, 0x1   
0038e2   6172     cpfslt  0x72, 0x1        
0038e4   7420     btg     0x20, 0x2, 0x0   
0038e6   6d65     negf    0x65, 0x1        	DB	0x65, 0x6d, 0x70, 0x6f, 0x00
0038e8   6f70     movwf   0x70, 0x1        
0038ea   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_21:
0038ec   532a     movf    0x2a, 0x1, 0x1   	DB	0x2a, 0x53, 0x65, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x20
0038ee   7465     btg     0x65, 0x2, 0x0   
0038f0   7420     btg     0x20, 0x2, 0x0   
0038f2   6d69     negf    0x69, 0x1        
0038f4   3a65     swapf   0x65, 0x1, 0x0   
0038f6   2020     addwfc  0x20, 0x0, 0x0   
0038f8   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
0038fa   2020     addwfc  0x20, 0x0, 0x0   
0038fc   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_22:
0038fe   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
003900   2020     addwfc  0x20, 0x0, 0x0   
003902   2020     addwfc  0x20, 0x0, 0x0   
003904   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_23:
003906   6f50     movwf   0x50, 0x1        	DB	0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x20, 0x20, 0x20
003908   7472     btg     0x72, 0x2, 0x0   
00390a   6775     tstfsz  0x75, 0x1        
00390c   6575     cpfsgt  0x75, 0x1        
00390e   2073     addwfc  0x73, 0x0, 0x0   
003910   2020     addwfc  0x20, 0x0, 0x0   
003912   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003914   2020     addwfc  0x20, 0x0, 0x0   
003916   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_24:
003918   6e45     movwf   0x45, 0x0        	DB	0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x20, 0x20, 0x20, 0x20
00391a   6c67     negf    0x67, 0x0        
00391c   7369     btg     0x69, 0x1, 0x1   
00391e   2068     addwfc  0x68, 0x0, 0x0   
003920   2020     addwfc  0x20, 0x0, 0x0   
003922   2020     addwfc  0x20, 0x0, 0x0   
003924   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003926   2020     addwfc  0x20, 0x0, 0x0   
003928   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_25:
00392a   502a     movf    0x2a, 0x0, 0x0   	DB	0x2a, 0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x20, 0x20
00392c   726f     btg     0x6f, 0x1, 0x0   
00392e   7574     btg     0x74, 0x2, 0x1   
003930   7567     btg     0x67, 0x2, 0x1   
003932   7365     btg     0x65, 0x1, 0x1   
003934   2020     addwfc  0x20, 0x0, 0x0   
003936   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003938   2020     addwfc  0x20, 0x0, 0x0   
00393a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_26:
00393c   452a     rlncf   0x2a, 0x0, 0x1   	DB	0x2a, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x20, 0x20, 0x20
00393e   676e     tstfsz  0x6e, 0x1        
003940   696c     setf    0x6c, 0x1        
003942   6873     setf    0x73, 0x0        
003944   2020     addwfc  0x20, 0x0, 0x0   
003946   2020     addwfc  0x20, 0x0, 0x0   
003948   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
00394a   2020     addwfc  0x20, 0x0, 0x0   
00394c   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_27:
00394e   4820     infsnz  0x20, 0x0, 0x0   	DB	0x20, 0x48, 0x6f, 0x72, 0x61, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003950   726f     btg     0x6f, 0x1, 0x0   
003952   2061     addwfc  0x61, 0x0, 0x0   
003954   2020     addwfc  0x20, 0x0, 0x0   
003956   2020     addwfc  0x20, 0x0, 0x0   
003958   2020     addwfc  0x20, 0x0, 0x0   
00395a   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
00395c   2020     addwfc  0x20, 0x0, 0x0   
00395e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_28:
003960   4820     infsnz  0x20, 0x0, 0x0   	DB	0x20, 0x48, 0x6f, 0x75, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003962   756f     btg     0x6f, 0x2, 0x1   
003964   2072     addwfc  0x72, 0x0, 0x0   
003966   2020     addwfc  0x20, 0x0, 0x0   
003968   2020     addwfc  0x20, 0x0, 0x0   
00396a   2020     addwfc  0x20, 0x0, 0x0   
00396c   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
00396e   2020     addwfc  0x20, 0x0, 0x0   
003970   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_29:
003972   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
003974   2020     addwfc  0x20, 0x0, 0x0   
003976   2020     addwfc  0x20, 0x0, 0x0   
003978   2020     addwfc  0x20, 0x0, 0x0   
00397a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_30:
00397c   482a     infsnz  0x2a, 0x0, 0x0   	DB	0x2a, 0x48, 0x6f, 0x72, 0x61, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
00397e   726f     btg     0x6f, 0x1, 0x0   
003980   2061     addwfc  0x61, 0x0, 0x0   
003982   2020     addwfc  0x20, 0x0, 0x0   
003984   2020     addwfc  0x20, 0x0, 0x0   
003986   2020     addwfc  0x20, 0x0, 0x0   
003988   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
00398a   2020     addwfc  0x20, 0x0, 0x0   
00398c   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_31:
00398e   482a     infsnz  0x2a, 0x0, 0x0   	DB	0x2a, 0x48, 0x6f, 0x75, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003990   756f     btg     0x6f, 0x2, 0x1   
003992   2072     addwfc  0x72, 0x0, 0x0   
003994   2020     addwfc  0x20, 0x0, 0x0   
003996   2020     addwfc  0x20, 0x0, 0x0   
003998   2020     addwfc  0x20, 0x0, 0x0   
00399a   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
00399c   2020     addwfc  0x20, 0x0, 0x0   
00399e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_32:
0039a0   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
0039a2   2020     addwfc  0x20, 0x0, 0x0   
0039a4   2020     addwfc  0x20, 0x0, 0x0   
0039a6   2020     addwfc  0x20, 0x0, 0x0   
0039a8   0020     dw      0x0020           
                                           ; ; Starting pCode block
                                           ___str_33:
0039aa   4820     infsnz  0x20, 0x0, 0x0   	DB	0x20, 0x48, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x20, 0x73
0039ac   6261     cpfseq  0x61, 0x0        
0039ae   6c69     negf    0x69, 0x0        
0039b0   7469     btg     0x69, 0x2, 0x0   
0039b2   7261     btg     0x61, 0x1, 0x0   
0039b4   7320     btg     0x20, 0x1, 0x1   
0039b6   6e65     movwf   0x65, 0x0        	DB	0x65, 0x6e, 0x68, 0x61, 0x00
0039b8   6168     cpfslt  0x68, 0x1        
0039ba   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_34:
0039bc   4520     rlncf   0x20, 0x0, 0x1   	DB	0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73
0039be   616e     cpfslt  0x6e, 0x1        
0039c0   6c62     negf    0x62, 0x0        
0039c2   2065     addwfc  0x65, 0x0, 0x0   
0039c4   6170     cpfslt  0x70, 0x1        
0039c6   7373     btg     0x73, 0x1, 0x1   
0039c8   6f77     movwf   0x77, 0x1        	DB	0x77, 0x6f, 0x72, 0x64, 0x00
0039ca   6472     cpfsgt  0x72, 0x0        
0039cc   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_35:
0039ce   2a2a     incf    0x2a, 0x1, 0x0   	DB	0x2a, 0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0039d0   202a     addwfc  0x2a, 0x0, 0x0   
0039d2   2020     addwfc  0x20, 0x0, 0x0   
0039d4   2020     addwfc  0x20, 0x0, 0x0   
0039d6   2020     addwfc  0x20, 0x0, 0x0   
0039d8   2020     addwfc  0x20, 0x0, 0x0   
0039da   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
0039dc   2020     addwfc  0x20, 0x0, 0x0   
0039de   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_36:
0039e0   2a2a     incf    0x2a, 0x1, 0x0   	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0039e2   2a2a     incf    0x2a, 0x1, 0x0   
0039e4   2020     addwfc  0x20, 0x0, 0x0   
0039e6   2020     addwfc  0x20, 0x0, 0x0   
0039e8   2020     addwfc  0x20, 0x0, 0x0   
0039ea   2020     addwfc  0x20, 0x0, 0x0   
0039ec   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
0039ee   2020     addwfc  0x20, 0x0, 0x0   
0039f0   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_37:
0039f2   2a2a     incf    0x2a, 0x1, 0x0   	DB	0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0039f4   2a2a     incf    0x2a, 0x1, 0x0   
0039f6   202a     addwfc  0x2a, 0x0, 0x0   
0039f8   2020     addwfc  0x20, 0x0, 0x0   
0039fa   2020     addwfc  0x20, 0x0, 0x0   
0039fc   2020     addwfc  0x20, 0x0, 0x0   
0039fe   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003a00   2020     addwfc  0x20, 0x0, 0x0   
003a02   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_38:
003a04   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x6e, 0x68, 0x61, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x61
003a06   686e     setf    0x6e, 0x0        
003a08   2061     addwfc  0x61, 0x0, 0x0   
003a0a   6c61     negf    0x61, 0x0        
003a0c   6574     cpfsgt  0x74, 0x1        
003a0e   6172     cpfslt  0x72, 0x1        
003a10   6164     cpfslt  0x64, 0x1        	DB	0x64, 0x61, 0x21, 0x20, 0x00
003a12   2021     addwfc  0x21, 0x0, 0x0   
003a14   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_39:
003a16   6150     cpfslt  0x50, 0x1        	DB	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x68, 0x61
003a18   7373     btg     0x73, 0x1, 0x1   
003a1a   6f77     movwf   0x77, 0x1        
003a1c   6472     cpfsgt  0x72, 0x0        
003a1e   6320     cpfseq  0x20, 0x1        
003a20   6168     cpfslt  0x68, 0x1        
003a22   676e     tstfsz  0x6e, 0x1        	DB	0x6e, 0x67, 0x65, 0x64, 0x21, 0x00
003a24   6465     cpfsgt  0x65, 0x0        
003a26   0021     dw      0x0021           
                                           ; ; Starting pCode block
                                           ___str_40:
003a28   6e49     movwf   0x49, 0x0        	DB	0x49, 0x6e, 0x73, 0x69, 0x72, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x61, 0x6d
003a2a   6973     setf    0x73, 0x1        
003a2c   6172     cpfslt  0x72, 0x1        
003a2e   6e20     movwf   0x20, 0x0        
003a30   766f     btg     0x6f, 0x3, 0x0   
003a32   6d61     negf    0x61, 0x1        
003a34   6e65     movwf   0x65, 0x0        	DB	0x65, 0x6e, 0x74, 0x65, 0x00
003a36   6574     cpfsgt  0x74, 0x1        
003a38   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_41:
003a3a   6c50     negf    0x50, 0x0        	DB	0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x2d, 0x65, 0x6e
003a3c   6165     cpfslt  0x65, 0x1        
003a3e   6573     cpfsgt  0x73, 0x1        
003a40   7220     btg     0x20, 0x1, 0x0   
003a42   2d65     decfsz  0x65, 0x0, 0x1   
003a44   6e65     movwf   0x65, 0x0        
003a46   6574     cpfsgt  0x74, 0x1        	DB	0x74, 0x65, 0x72, 0x20, 0x00
003a48   2072     addwfc  0x72, 0x0, 0x0   
003a4a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_42:
003a4c   482a     infsnz  0x2a, 0x0, 0x0   	DB	0x2a, 0x48, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x20, 0x73
003a4e   6261     cpfseq  0x61, 0x0        
003a50   6c69     negf    0x69, 0x0        
003a52   7469     btg     0x69, 0x2, 0x0   
003a54   7261     btg     0x61, 0x1, 0x0   
003a56   7320     btg     0x20, 0x1, 0x1   
003a58   6e65     movwf   0x65, 0x0        	DB	0x65, 0x6e, 0x68, 0x61, 0x00
003a5a   6168     cpfslt  0x68, 0x1        
003a5c   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_43:
003a5e   452a     rlncf   0x2a, 0x0, 0x1   	DB	0x2a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73
003a60   616e     cpfslt  0x6e, 0x1        
003a62   6c62     negf    0x62, 0x0        
003a64   2065     addwfc  0x65, 0x0, 0x0   
003a66   6170     cpfslt  0x70, 0x1        
003a68   7373     btg     0x73, 0x1, 0x1   
003a6a   6f77     movwf   0x77, 0x1        	DB	0x77, 0x6f, 0x72, 0x64, 0x00
003a6c   6472     cpfsgt  0x72, 0x0        
003a6e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_44:
003a70   4420     rlncf   0x20, 0x0, 0x0   	DB	0x20, 0x44, 0x65, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72
003a72   7365     btg     0x65, 0x1, 0x1   
003a74   6261     cpfseq  0x61, 0x0        
003a76   6c69     negf    0x69, 0x0        
003a78   7469     btg     0x69, 0x2, 0x0   
003a7a   7261     btg     0x61, 0x1, 0x0   
003a7c   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003a7e   2020     addwfc  0x20, 0x0, 0x0   
003a80   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_45:
003a82   4420     rlncf   0x20, 0x0, 0x0   	DB	0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x20, 0x20, 0x20
003a84   7369     btg     0x69, 0x1, 0x1   
003a86   6261     cpfseq  0x61, 0x0        
003a88   656c     cpfsgt  0x6c, 0x1        
003a8a   2020     addwfc  0x20, 0x0, 0x0   
003a8c   2020     addwfc  0x20, 0x0, 0x0   
003a8e   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003a90   2020     addwfc  0x20, 0x0, 0x0   
003a92   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_46:
003a94   442a     rlncf   0x2a, 0x0, 0x0   	DB	0x2a, 0x44, 0x65, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72
003a96   7365     btg     0x65, 0x1, 0x1   
003a98   6261     cpfseq  0x61, 0x0        
003a9a   6c69     negf    0x69, 0x0        
003a9c   7469     btg     0x69, 0x2, 0x0   
003a9e   7261     btg     0x61, 0x1, 0x0   
003aa0   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003aa2   2020     addwfc  0x20, 0x0, 0x0   
003aa4   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_47:
003aa6   442a     rlncf   0x2a, 0x0, 0x0   	DB	0x2a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x20, 0x20, 0x20
003aa8   7369     btg     0x69, 0x1, 0x1   
003aaa   6261     cpfseq  0x61, 0x0        
003aac   656c     cpfsgt  0x6c, 0x1        
003aae   2020     addwfc  0x20, 0x0, 0x0   
003ab0   2020     addwfc  0x20, 0x0, 0x0   
003ab2   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003ab4   2020     addwfc  0x20, 0x0, 0x0   
003ab6   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_48:
003ab8   6552     cpfsgt  0x52, 0x1        	DB	0x52, 0x65, 0x69, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x64, 0x6f, 0x54
003aba   6e69     movwf   0x69, 0x0        
003abc   6369     cpfseq  0x69, 0x1        
003abe   6169     cpfslt  0x69, 0x1        
003ac0   646e     cpfsgt  0x6e, 0x0        
003ac2   546f     subfwb  0x6f, 0x0, 0x0   
003ac4   6863     setf    0x63, 0x0        	DB	0x63, 0x68, 0x61, 0x75, 0x00
003ac6   7561     btg     0x61, 0x2, 0x1   
003ac8   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_49:
003aca   6552     cpfsgt  0x52, 0x1        	DB	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79
003acc   7473     btg     0x73, 0x2, 0x0   
003ace   7261     btg     0x61, 0x1, 0x0   
003ad0   6974     setf    0x74, 0x1        
003ad2   676e     tstfsz  0x6e, 0x1        
003ad4   7942     btg     0x42, 0x4, 0x1   
003ad6   6265     cpfseq  0x65, 0x0        	DB	0x65, 0x62, 0x79, 0x65, 0x00
003ad8   6579     cpfsgt  0x79, 0x1        
003ada   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_50:
003adc   654c     cpfsgt  0x4c, 0x1        	DB	0x4c, 0x65, 0x69, 0x74, 0x75, 0x72, 0x61, 0x3a, 0x00
003ade   7469     btg     0x69, 0x2, 0x0   
003ae0   7275     btg     0x75, 0x1, 0x0   
003ae2   3a61     swapf   0x61, 0x1, 0x0   
003ae4   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_51:
003ae6   6552     cpfsgt  0x52, 0x1        	DB	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x00
003ae8   6461     cpfsgt  0x61, 0x0        
003aea   6e69     movwf   0x69, 0x0        
003aec   3a67     swapf   0x67, 0x1, 0x0   
003aee   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_52:
003af0   6e49     movwf   0x49, 0x0        	DB	0x49, 0x6e, 0x73, 0x65, 0x72, 0x69, 0x72, 0x20, 0x73, 0x65, 0x6e, 0x68
003af2   6573     cpfsgt  0x73, 0x1        
003af4   6972     setf    0x72, 0x1        
003af6   2072     addwfc  0x72, 0x0, 0x0   
003af8   6573     cpfsgt  0x73, 0x1        
003afa   686e     setf    0x6e, 0x0        
003afc   3a61     swapf   0x61, 0x1, 0x0   	DB	0x61, 0x3a, 0x20, 0x20, 0x00
003afe   2020     addwfc  0x20, 0x0, 0x0   
003b00   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_53:
003b02   6e49     movwf   0x49, 0x0        	DB	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77
003b04   6573     cpfsgt  0x73, 0x1        
003b06   7472     btg     0x72, 0x2, 0x0   
003b08   7020     btg     0x20, 0x0, 0x0   
003b0a   7361     btg     0x61, 0x1, 0x1   
003b0c   7773     btg     0x73, 0x3, 0x1   
003b0e   726f     btg     0x6f, 0x1, 0x0   	DB	0x6f, 0x72, 0x64, 0x3a, 0x00
003b10   3a64     swapf   0x64, 0x1, 0x0   
003b12   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_54:
003b14   6f43     movwf   0x43, 0x1        	DB	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x20, 0x61, 0x6c
003b16   666e     tstfsz  0x6e, 0x0        
003b18   6769     tstfsz  0x69, 0x1        
003b1a   7275     btg     0x75, 0x1, 0x0   
003b1c   2061     addwfc  0x61, 0x0, 0x0   
003b1e   6c61     negf    0x61, 0x0        
003b20   7261     btg     0x61, 0x1, 0x0   	DB	0x61, 0x72, 0x6d, 0x65, 0x00
003b22   656d     cpfsgt  0x6d, 0x1        
003b24   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_55:
003b26   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x20, 0x20
003b28   2074     addwfc  0x74, 0x0, 0x0   
003b2a   6c61     negf    0x61, 0x0        
003b2c   7261     btg     0x61, 0x1, 0x0   
003b2e   206d     addwfc  0x6d, 0x0, 0x0   
003b30   2020     addwfc  0x20, 0x0, 0x0   
003b32   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003b34   2020     addwfc  0x20, 0x0, 0x0   
003b36   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_56:
003b38   412a     rrncf   0x2a, 0x0, 0x1   	DB	0x2a, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x65, 0x73, 0x20, 0x28, 0x42, 0x2f
003b3a   616c     cpfslt  0x6c, 0x1        
003b3c   6d72     negf    0x72, 0x1        
003b3e   7365     btg     0x65, 0x1, 0x1   
003b40   2820     incf    0x20, 0x0, 0x0   
003b42   2f42     decfsz  0x42, 0x1, 0x1   
003b44   2941     incf    0x41, 0x0, 0x1   	DB	0x41, 0x29, 0x20, 0x20, 0x00
003b46   2020     addwfc  0x20, 0x0, 0x0   
003b48   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_57:
003b4a   412a     rrncf   0x2a, 0x0, 0x1   	DB	0x2a, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x20, 0x28, 0x4c, 0x2f, 0x48
003b4c   616c     cpfslt  0x6c, 0x1        
003b4e   6d72     negf    0x72, 0x1        
003b50   2073     addwfc  0x73, 0x0, 0x0   
003b52   4c28     dcfsnz  0x28, 0x0, 0x0   
003b54   482f     infsnz  0x2f, 0x0, 0x0   
003b56   2029     addwfc  0x29, 0x0, 0x0   	DB	0x29, 0x20, 0x20, 0x20, 0x00
003b58   2020     addwfc  0x20, 0x0, 0x0   
003b5a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_58:
003b5c   6142     cpfslt  0x42, 0x1        	DB	0x42, 0x61, 0x69, 0x78, 0x6f, 0x3a, 0x20, 0x20, 0x20, 0x41, 0x6c, 0x74
003b5e   7869     btg     0x69, 0x4, 0x0   
003b60   3a6f     swapf   0x6f, 0x1, 0x0   
003b62   2020     addwfc  0x20, 0x0, 0x0   
003b64   4120     rrncf   0x20, 0x0, 0x1   
003b66   746c     btg     0x6c, 0x2, 0x0   
003b68   3a6f     swapf   0x6f, 0x1, 0x0   	DB	0x6f, 0x3a, 0x20, 0x20, 0x00
003b6a   2020     addwfc  0x20, 0x0, 0x0   
003b6c   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_59:
003b6e   6f4c     movwf   0x4c, 0x1        	DB	0x4c, 0x6f, 0x77, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x48, 0x69, 0x67, 0x68
003b70   3a77     swapf   0x77, 0x1, 0x0   
003b72   2020     addwfc  0x20, 0x0, 0x0   
003b74   2020     addwfc  0x20, 0x0, 0x0   
003b76   6948     setf    0x48, 0x1        
003b78   6867     setf    0x67, 0x0        
003b7a   203a     addwfc  0x3a, 0x0, 0x0   	DB	0x3a, 0x20, 0x20, 0x20, 0x00
003b7c   2020     addwfc  0x20, 0x0, 0x0   
003b7e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_60:
003b80   4120     rrncf   0x20, 0x0, 0x1   	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x65, 0x73, 0x20, 0x28, 0x42, 0x2f
003b82   616c     cpfslt  0x6c, 0x1        
003b84   6d72     negf    0x72, 0x1        
003b86   7365     btg     0x65, 0x1, 0x1   
003b88   2820     incf    0x20, 0x0, 0x0   
003b8a   2f42     decfsz  0x42, 0x1, 0x1   
003b8c   2941     incf    0x41, 0x0, 0x1   	DB	0x41, 0x29, 0x20, 0x20, 0x00
003b8e   2020     addwfc  0x20, 0x0, 0x0   
003b90   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_61:
003b92   4120     rrncf   0x20, 0x0, 0x1   	DB	0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x20, 0x28, 0x4c, 0x2f, 0x48
003b94   616c     cpfslt  0x6c, 0x1        
003b96   6d72     negf    0x72, 0x1        
003b98   2073     addwfc  0x73, 0x0, 0x0   
003b9a   4c28     dcfsnz  0x28, 0x0, 0x0   
003b9c   482f     infsnz  0x2f, 0x0, 0x0   
003b9e   2029     addwfc  0x29, 0x0, 0x0   	DB	0x29, 0x20, 0x20, 0x20, 0x00
003ba0   2020     addwfc  0x20, 0x0, 0x0   
003ba2   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_62:
003ba4   6554     cpfsgt  0x54, 0x1        	DB	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x20, 0x61, 0x71, 0x75, 0x69, 0x73, 0x69
003ba6   706d     btg     0x6d, 0x0, 0x0   
003ba8   206f     addwfc  0x6f, 0x0, 0x0   
003baa   7161     btg     0x61, 0x0, 0x1   
003bac   6975     setf    0x75, 0x1        
003bae   6973     setf    0x73, 0x1        
003bb0   e3e7     bnc     0x003b80         	DB	0xe7, 0xe3, 0x6f, 0x3a, 0x00
003bb2   3a6f     swapf   0x6f, 0x1, 0x0   
003bb4   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_63:
003bb6   6954     setf    0x54, 0x1        	DB	0x54, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69
003bb8   656d     cpfsgt  0x6d, 0x1        
003bba   6120     cpfslt  0x20, 0x1        
003bbc   7163     btg     0x63, 0x0, 0x1   
003bbe   6975     setf    0x75, 0x1        
003bc0   6973     setf    0x73, 0x1        
003bc2   6974     setf    0x74, 0x1        	DB	0x74, 0x69, 0x6f, 0x6e, 0x00
003bc4   6e6f     movwf   0x6f, 0x0        
003bc6   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_64:
003bc8   6f43     movwf   0x43, 0x1        	DB	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x20, 0x69, 0x64
003bca   666e     tstfsz  0x6e, 0x0        
003bcc   6769     tstfsz  0x69, 0x1        
003bce   7275     btg     0x75, 0x1, 0x0   
003bd0   2061     addwfc  0x61, 0x0, 0x0   
003bd2   6469     cpfsgt  0x69, 0x0        
003bd4   6f69     movwf   0x69, 0x1        	DB	0x69, 0x6f, 0x6d, 0x61, 0x00
003bd6   616d     cpfslt  0x6d, 0x1        
003bd8   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_65:
003bda   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65
003bdc   2074     addwfc  0x74, 0x0, 0x0   
003bde   616c     cpfslt  0x6c, 0x1        
003be0   676e     tstfsz  0x6e, 0x1        
003be2   6175     cpfslt  0x75, 0x1        
003be4   6567     cpfsgt  0x67, 0x1        
003be6   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003be8   2020     addwfc  0x20, 0x0, 0x0   
003bea   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_66:
003bec   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x6c, 0x65, 0x63, 0x69, 0x6f, 0x6e, 0x61, 0x20, 0x69, 0x64
003bee   656c     cpfsgt  0x6c, 0x1        
003bf0   6963     setf    0x63, 0x1        
003bf2   6e6f     movwf   0x6f, 0x0        
003bf4   2061     addwfc  0x61, 0x0, 0x0   
003bf6   6469     cpfsgt  0x69, 0x0        
003bf8   6f69     movwf   0x69, 0x1        	DB	0x69, 0x6f, 0x6d, 0x61, 0x00
003bfa   616d     cpfslt  0x6d, 0x1        
003bfc   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_67:
003bfe   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75
003c00   656c     cpfsgt  0x6c, 0x1        
003c02   7463     btg     0x63, 0x2, 0x0   
003c04   6c20     negf    0x20, 0x0        
003c06   6e61     movwf   0x61, 0x0        
003c08   7567     btg     0x67, 0x2, 0x1   
003c0a   6761     tstfsz  0x61, 0x1        	DB	0x61, 0x67, 0x65, 0x20, 0x00
003c0c   2065     addwfc  0x65, 0x0, 0x0   
003c0e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_68:
003c10   6144     cpfslt  0x44, 0x1        	DB	0x44, 0x61, 0x74, 0x61, 0x20, 0x20, 0x2f, 0x20, 0x20, 0x48, 0x6f, 0x72
003c12   6174     cpfslt  0x74, 0x1        
003c14   2020     addwfc  0x20, 0x0, 0x0   
003c16   202f     addwfc  0x2f, 0x0, 0x0   
003c18   4820     infsnz  0x20, 0x0, 0x0   
003c1a   726f     btg     0x6f, 0x1, 0x0   
003c1c   3a61     swapf   0x61, 0x1, 0x0   	DB	0x61, 0x3a, 0x20, 0x20, 0x00
003c1e   2020     addwfc  0x20, 0x0, 0x0   
003c20   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_69:
003c22   6144     cpfslt  0x44, 0x1        	DB	0x44, 0x61, 0x74, 0x65, 0x20, 0x20, 0x2f, 0x20, 0x20, 0x54, 0x69, 0x6d
003c24   6574     cpfsgt  0x74, 0x1        
003c26   2020     addwfc  0x20, 0x0, 0x0   
003c28   202f     addwfc  0x2f, 0x0, 0x0   
003c2a   5420     subfwb  0x20, 0x0, 0x0   
003c2c   6d69     negf    0x69, 0x1        
003c2e   2065     addwfc  0x65, 0x0, 0x0   	DB	0x65, 0x20, 0x20, 0x20, 0x00
003c30   2020     addwfc  0x20, 0x0, 0x0   
003c32   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_70:
003c34   442a     rlncf   0x2a, 0x0, 0x0   	DB	0x2a, 0x44, 0x61, 0x74, 0x61, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003c36   7461     btg     0x61, 0x2, 0x0   
003c38   2061     addwfc  0x61, 0x0, 0x0   
003c3a   2020     addwfc  0x20, 0x0, 0x0   
003c3c   2020     addwfc  0x20, 0x0, 0x0   
003c3e   2020     addwfc  0x20, 0x0, 0x0   
003c40   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003c42   2020     addwfc  0x20, 0x0, 0x0   
003c44   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_71:
003c46   442a     rlncf   0x2a, 0x0, 0x0   	DB	0x2a, 0x44, 0x61, 0x74, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003c48   7461     btg     0x61, 0x2, 0x0   
003c4a   2065     addwfc  0x65, 0x0, 0x0   
003c4c   2020     addwfc  0x20, 0x0, 0x0   
003c4e   2020     addwfc  0x20, 0x0, 0x0   
003c50   2020     addwfc  0x20, 0x0, 0x0   
003c52   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003c54   2020     addwfc  0x20, 0x0, 0x0   
003c56   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_72:
003c58   4420     rlncf   0x20, 0x0, 0x0   	DB	0x20, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003c5a   7461     btg     0x61, 0x2, 0x0   
003c5c   3a61     swapf   0x61, 0x1, 0x0   
003c5e   2020     addwfc  0x20, 0x0, 0x0   
003c60   2020     addwfc  0x20, 0x0, 0x0   
003c62   2020     addwfc  0x20, 0x0, 0x0   
003c64   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003c66   2020     addwfc  0x20, 0x0, 0x0   
003c68   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_73:
003c6a   4420     rlncf   0x20, 0x0, 0x0   	DB	0x20, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003c6c   7461     btg     0x61, 0x2, 0x0   
003c6e   3a65     swapf   0x65, 0x1, 0x0   
003c70   2020     addwfc  0x20, 0x0, 0x0   
003c72   2020     addwfc  0x20, 0x0, 0x0   
003c74   2020     addwfc  0x20, 0x0, 0x0   
003c76   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003c78   2020     addwfc  0x20, 0x0, 0x0   
003c7a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_74:
003c7c   4420     rlncf   0x20, 0x0, 0x0   	DB	0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003c7e   7461     btg     0x61, 0x2, 0x0   
003c80   2061     addwfc  0x61, 0x0, 0x0   
003c82   2020     addwfc  0x20, 0x0, 0x0   
003c84   2020     addwfc  0x20, 0x0, 0x0   
003c86   2020     addwfc  0x20, 0x0, 0x0   
003c88   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003c8a   2020     addwfc  0x20, 0x0, 0x0   
003c8c   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_75:
003c8e   4420     rlncf   0x20, 0x0, 0x0   	DB	0x20, 0x44, 0x61, 0x74, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003c90   7461     btg     0x61, 0x2, 0x0   
003c92   2065     addwfc  0x65, 0x0, 0x0   
003c94   2020     addwfc  0x20, 0x0, 0x0   
003c96   2020     addwfc  0x20, 0x0, 0x0   
003c98   2020     addwfc  0x20, 0x0, 0x0   
003c9a   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003c9c   2020     addwfc  0x20, 0x0, 0x0   
003c9e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_76:
003ca0   4820     infsnz  0x20, 0x0, 0x0   	DB	0x20, 0x48, 0x6f, 0x72, 0x61, 0x73, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20
003ca2   726f     btg     0x6f, 0x1, 0x0   
003ca4   7361     btg     0x61, 0x1, 0x1   
003ca6   203a     addwfc  0x3a, 0x0, 0x0   
003ca8   2020     addwfc  0x20, 0x0, 0x0   
003caa   2020     addwfc  0x20, 0x0, 0x0   
003cac   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003cae   2020     addwfc  0x20, 0x0, 0x0   
003cb0   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_77:
003cb2   5420     subfwb  0x20, 0x0, 0x0   	DB	0x20, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
003cb4   6d69     negf    0x69, 0x1        
003cb6   3a65     swapf   0x65, 0x1, 0x0   
003cb8   2020     addwfc  0x20, 0x0, 0x0   
003cba   2020     addwfc  0x20, 0x0, 0x0   
003cbc   2020     addwfc  0x20, 0x0, 0x0   
003cbe   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003cc0   2020     addwfc  0x20, 0x0, 0x0   
003cc2   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_78:
003cc4   6f43     movwf   0x43, 0x1        	DB	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x67, 0x75, 0x72
003cc6   666e     tstfsz  0x6e, 0x0        
003cc8   6769     tstfsz  0x69, 0x1        
003cca   732e     btg     0x2e, 0x1, 0x1   
003ccc   6765     tstfsz  0x65, 0x1        
003cce   7275     btg     0x75, 0x1, 0x0   
003cd0   6e61     movwf   0x61, 0x0        	DB	0x61, 0x6e, 0xe7, 0x61, 0x00
003cd2   61e7     cpfslt  0xe7, 0x1        
003cd4   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_79:
003cd6   6f43     movwf   0x43, 0x1        	DB	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x20, 0x73, 0x65, 0x63, 0x75
003cd8   666e     tstfsz  0x6e, 0x0        
003cda   6769     tstfsz  0x69, 0x1        
003cdc   202e     addwfc  0x2e, 0x0, 0x0   
003cde   6573     cpfsgt  0x73, 0x1        
003ce0   7563     btg     0x63, 0x2, 0x1   
003ce2   6972     setf    0x72, 0x1        	DB	0x72, 0x69, 0x74, 0x79, 0x00
003ce4   7974     btg     0x74, 0x4, 0x1   
003ce6   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_80:
003ce8   412a     rrncf   0x2a, 0x0, 0x1   	DB	0x2a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x20, 0x73, 0x65, 0x6e
003cea   746c     btg     0x6c, 0x2, 0x0   
003cec   7265     btg     0x65, 0x1, 0x0   
003cee   7261     btg     0x61, 0x1, 0x0   
003cf0   7320     btg     0x20, 0x1, 0x1   
003cf2   6e65     movwf   0x65, 0x0        
003cf4   6168     cpfslt  0x68, 0x1        	DB	0x68, 0x61, 0x20, 0x20, 0x00
003cf6   2020     addwfc  0x20, 0x0, 0x0   
003cf8   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_81:
003cfa   532a     movf    0x2a, 0x1, 0x1   	DB	0x2a, 0x53, 0x65, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72
003cfc   7465     btg     0x65, 0x2, 0x0   
003cfe   7020     btg     0x20, 0x0, 0x0   
003d00   7361     btg     0x61, 0x1, 0x1   
003d02   7773     btg     0x73, 0x3, 0x1   
003d04   726f     btg     0x6f, 0x1, 0x0   
003d06   2064     addwfc  0x64, 0x0, 0x0   	DB	0x64, 0x20, 0x20, 0x20, 0x00
003d08   2020     addwfc  0x20, 0x0, 0x0   
003d0a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_82:
003d0c   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x6e, 0x68, 0x61, 0x20, 0x61, 0x74, 0x75, 0x61, 0x6c, 0x20
003d0e   686e     setf    0x6e, 0x0        
003d10   2061     addwfc  0x61, 0x0, 0x0   
003d12   7461     btg     0x61, 0x2, 0x0   
003d14   6175     cpfslt  0x75, 0x1        
003d16   206c     addwfc  0x6c, 0x0, 0x0   
003d18   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003d1a   2020     addwfc  0x20, 0x0, 0x0   
003d1c   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_83:
003d1e   7543     btg     0x43, 0x2, 0x1   	DB	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73
003d20   7272     btg     0x72, 0x1, 0x0   
003d22   6e65     movwf   0x65, 0x0        
003d24   2074     addwfc  0x74, 0x0, 0x0   
003d26   6170     cpfslt  0x70, 0x1        
003d28   7373     btg     0x73, 0x1, 0x1   
003d2a   6f77     movwf   0x77, 0x1        	DB	0x77, 0x6f, 0x72, 0x64, 0x00
003d2c   6472     cpfsgt  0x72, 0x0        
003d2e   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_84:
003d30   6553     cpfsgt  0x53, 0x1        	DB	0x53, 0x65, 0x6e, 0x68, 0x61, 0x20, 0x6e, 0x6f, 0x76, 0x61, 0x20, 0x20
003d32   686e     setf    0x6e, 0x0        
003d34   2061     addwfc  0x61, 0x0, 0x0   
003d36   6f6e     movwf   0x6e, 0x1        
003d38   6176     cpfslt  0x76, 0x1        
003d3a   2020     addwfc  0x20, 0x0, 0x0   
003d3c   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003d3e   2020     addwfc  0x20, 0x0, 0x0   
003d40   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_85:
003d42   654e     cpfsgt  0x4e, 0x1        	DB	0x4e, 0x65, 0x77, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64
003d44   2077     addwfc  0x77, 0x0, 0x0   
003d46   6170     cpfslt  0x70, 0x1        
003d48   7373     btg     0x73, 0x1, 0x1   
003d4a   6f77     movwf   0x77, 0x1        
003d4c   6472     cpfsgt  0x72, 0x0        
003d4e   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003d50   2020     addwfc  0x20, 0x0, 0x0   
003d52   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_86:
003d54   4120     rrncf   0x20, 0x0, 0x1   	DB	0x20, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x20, 0x73, 0x65, 0x6e
003d56   746c     btg     0x6c, 0x2, 0x0   
003d58   7265     btg     0x65, 0x1, 0x0   
003d5a   7261     btg     0x61, 0x1, 0x0   
003d5c   7320     btg     0x20, 0x1, 0x1   
003d5e   6e65     movwf   0x65, 0x0        
003d60   6168     cpfslt  0x68, 0x1        	DB	0x68, 0x61, 0x20, 0x20, 0x00
003d62   2020     addwfc  0x20, 0x0, 0x0   
003d64   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_87:
003d66   5320     movf    0x20, 0x1, 0x1   	DB	0x20, 0x53, 0x65, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72
003d68   7465     btg     0x65, 0x2, 0x0   
003d6a   7020     btg     0x20, 0x0, 0x0   
003d6c   7361     btg     0x61, 0x1, 0x1   
003d6e   7773     btg     0x73, 0x3, 0x1   
003d70   726f     btg     0x6f, 0x1, 0x0   
003d72   2064     addwfc  0x64, 0x0, 0x0   	DB	0x64, 0x20, 0x20, 0x20, 0x00
003d74   2020     addwfc  0x20, 0x0, 0x0   
003d76   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_88:
003d78   6e49     movwf   0x49, 0x0        	DB	0x49, 0x6e, 0x73, 0x65, 0x72, 0x69, 0x72, 0x20, 0x73, 0x65, 0x6e, 0x68
003d7a   6573     cpfsgt  0x73, 0x1        
003d7c   6972     setf    0x72, 0x1        
003d7e   2072     addwfc  0x72, 0x0, 0x0   
003d80   6573     cpfsgt  0x73, 0x1        
003d82   686e     setf    0x6e, 0x0        
003d84   2061     addwfc  0x61, 0x0, 0x0   	DB	0x61, 0x20, 0x20, 0x20, 0x00
003d86   2020     addwfc  0x20, 0x0, 0x0   
003d88   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_89:
003d8a   6e49     movwf   0x49, 0x0        	DB	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77
003d8c   6573     cpfsgt  0x73, 0x1        
003d8e   7472     btg     0x72, 0x2, 0x0   
003d90   7020     btg     0x20, 0x0, 0x0   
003d92   7361     btg     0x61, 0x1, 0x1   
003d94   7773     btg     0x73, 0x3, 0x1   
003d96   726f     btg     0x6f, 0x1, 0x0   	DB	0x6f, 0x72, 0x20, 0x20, 0x00
003d98   2020     addwfc  0x20, 0x0, 0x0   
003d9a   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_90:
003d9c   482a     infsnz  0x2a, 0x0, 0x0   	DB	0x2a, 0x48, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x20, 0x20
003d9e   6261     cpfseq  0x61, 0x0        
003da0   6c69     negf    0x69, 0x0        
003da2   7469     btg     0x69, 0x2, 0x0   
003da4   7261     btg     0x61, 0x1, 0x0   
003da6   2020     addwfc  0x20, 0x0, 0x0   
003da8   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003daa   2020     addwfc  0x20, 0x0, 0x0   
003dac   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_91:
003dae   452a     rlncf   0x2a, 0x0, 0x1   	DB	0x2a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20
003db0   616e     cpfslt  0x6e, 0x1        
003db2   6c62     negf    0x62, 0x0        
003db4   2065     addwfc  0x65, 0x0, 0x0   
003db6   2020     addwfc  0x20, 0x0, 0x0   
003db8   2020     addwfc  0x20, 0x0, 0x0   
003dba   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003dbc   2020     addwfc  0x20, 0x0, 0x0   
003dbe   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_92:
003dc0   4820     infsnz  0x20, 0x0, 0x0   	DB	0x20, 0x48, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x20, 0x20
003dc2   6261     cpfseq  0x61, 0x0        
003dc4   6c69     negf    0x69, 0x0        
003dc6   7469     btg     0x69, 0x2, 0x0   
003dc8   7261     btg     0x61, 0x1, 0x0   
003dca   2020     addwfc  0x20, 0x0, 0x0   
003dcc   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003dce   2020     addwfc  0x20, 0x0, 0x0   
003dd0   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_93:
003dd2   4520     rlncf   0x20, 0x0, 0x1   	DB	0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20
003dd4   616e     cpfslt  0x6e, 0x1        
003dd6   6c62     negf    0x62, 0x0        
003dd8   2065     addwfc  0x65, 0x0, 0x0   
003dda   2020     addwfc  0x20, 0x0, 0x0   
003ddc   2020     addwfc  0x20, 0x0, 0x0   
003dde   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003de0   2020     addwfc  0x20, 0x0, 0x0   
003de2   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_94:
003de4   6552     cpfsgt  0x52, 0x1        	DB	0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x73, 0x69, 0x73
003de6   6573     cpfsgt  0x73, 0x1        
003de8   2074     addwfc  0x74, 0x0, 0x0   
003dea   6f64     movwf   0x64, 0x1        
003dec   7320     btg     0x20, 0x1, 0x1   
003dee   7369     btg     0x69, 0x1, 0x1   
003df0   6574     cpfsgt  0x74, 0x1        	DB	0x74, 0x65, 0x6d, 0x61, 0x00
003df2   616d     cpfslt  0x6d, 0x1        
003df4   0000     nop                      
                                           ; ; Starting pCode block
                                           ___str_95:
003df6   7953     btg     0x53, 0x4, 0x1   	DB	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74
003df8   7473     btg     0x73, 0x2, 0x0   
003dfa   6d65     negf    0x65, 0x1        
003dfc   7220     btg     0x20, 0x1, 0x0   
003dfe   7365     btg     0x65, 0x1, 0x1   
003e00   7465     btg     0x65, 0x2, 0x0   
003e02   2020     addwfc  0x20, 0x0, 0x0   	DB	0x20, 0x20, 0x20, 0x20, 0x00
003e04   2020     addwfc  0x20, 0x0, 0x0   
003e06   0000     nop                      


                                           ; Statistics:
                                           ; code size:	 9662 (0x25be) bytes ( 7.37%)
                                           ;           	 4831 (0x12df) words
                                           ; udata size:	    4 (0x0004) bytes ( 0.31%)
                                           ; access size:	    8 (0x0008) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_varInit
                                           	global	_getState
                                           	global	_setState
                                           	global	_getTime
                                           	global	_setTime
                                           	global	_getMult
                                           	global	_setMult
                                           	global	_getAlarmLevel
                                           	global	_setAlarmLevel
                                           	global	_getLanguage
                                           	global	_setLanguage
                                           	global	_getSenhaStatus
                                           	global	_enableSenha
                                           	global	_getSenha_i
                                           	global	_getSenha_try
                                           	global	_getTestResult
                                           	global	_setTestResult
                                           	global	_testSenha
                                           	global	_setSenha
                                           	global	_delay40us
                                           	global	_delay2ms

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__mulint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1

                                           udata_var_0	udata
                                           _state	res	1

                                           udata_var_1	udata
                                           _language	res	1

                                           udata_var_2	udata
                                           _time	res	2

                                           udata_var_3	udata
                                           _alarmLevel_H	res	2

                                           udata_var_4	udata
                                           _alarmLevel_L	res	2

                                           udata_var_5	udata
                                           _senha_enable	res	2

                                           udata_var_6	udata
                                           _senha_i	res	2

                                           udata_var_7	udata
                                           _senha_result	res	2

                                           udata_var_8	udata
                                           _senha_try	res	2

                                           udata_var_9	udata
                                           _multiplicador	res	2

                                           udata_var_10	udata
                                           _senha_save	res	10

                                           udata_var_11	udata
                                           _senha_count	res	10

                                           udata_var_12	udata
                                           _senha_new	res	10

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_var__setSenha	code
                                           _setSenha:
                                           ;	.line	149; var.c	int setSenha(char senha){
003e08   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
003e0a   ffe5
003e0c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
003e0e   ffd9
003e10   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
003e12   ffe5
003e14   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
003e16   ffe5
003e18   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
003e1a   ffe5
003e1c   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
003e1e   ffe5
003e20   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
003e22   ffe5
003e24   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
003e26   ffe5
003e28   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
003e2a   ffe5
003e2c   0e02     movlw   0x02             	MOVLW	0x02
003e2e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
003e30   f000
003e32   0102     movlb   0x2              	BANKSEL	_senha_try
                                           ;	.line	152; var.c	senha_try = 0;
003e34   6bfe     clrf    0xfe, 0x1        	CLRF	_senha_try, B
003e36   0102     movlb   0x2              	BANKSEL	(_senha_try + 1)
003e38   6bff     clrf    0xff, 0x1        	CLRF	(_senha_try + 1), B
                                           ;	.line	153; var.c	if(senha != 0 && senha_i>4){
003e3a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003e3c   e02a     bz      0x003e92         	BZ	_00299_DS_
003e3e   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
003e40   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
003e42   0f80     addlw   0x80             	ADDLW	0x80
003e44   0f80     addlw   0x80             	ADDLW	0x80
003e46   e103     bnz     0x003e4e         	BNZ	_00347_DS_
003e48   0e05     movlw   0x05             	MOVLW	0x05
003e4a   0102     movlb   0x2              	BANKSEL	_senha_i
003e4c   5dfa     subwf   0xfa, 0x0, 0x1   	SUBWF	_senha_i, W, B
                                           _00347_DS_:
003e4e   e321     bnc     0x003e92         	BNC	_00299_DS_
003e50   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	154; var.c	senha_count[senha_i - 5] = senha;
003e52   51fa     movf    0xfa, 0x0, 0x1   	MOVF	_senha_i, W, B
003e54   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003e56   0efb     movlw   0xfb             	MOVLW	0xfb
003e58   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
                                           ; ;multiply lit val:0x02 by variable r0x01 and store in r0x01
003e5a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003e5c   0d02     mullw   0x02             	MULLW	0x02
003e5e   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
003e60   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
003e62   0802     sublw   0x02             	SUBLW	0x02
003e64   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
003e66   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
003e68   f001
003e6a   0eda     movlw   0xda             	MOVLW	LOW(_senha_count)
003e6c   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003e6e   0e02     movlw   0x02             	MOVLW	HIGH(_senha_count)
003e70   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003e72   c000     movff   0x000, 0x003     	MOVFF	r0x00, r0x03
003e74   f003
003e76   6a04     clrf    0x04, 0x0        	CLRF	r0x04
003e78   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003e7a   ffe9
003e7c   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
003e7e   ffea
003e80   c003     movff   0x003, 0xfee     	MOVFF	r0x03, POSTINC0
003e82   ffee
003e84   c004     movff   0x004, 0xfef     	MOVFF	r0x04, INDF0
003e86   ffef
003e88   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	155; var.c	senha_i++;
003e8a   3ffa     incfsz  0xfa, 0x1, 0x1   	INCFSZ	_senha_i, F, B
003e8c   d002     bra     0x003e92         	BRA	_10298_DS_
003e8e   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
003e90   2bfb     incf    0xfb, 0x1, 0x1   	INCF	(_senha_i + 1), F, B
                                           _10298_DS_:
                                           _00299_DS_:
                                           ;	.line	158; var.c	if(senha != 0 && senha_i<5 ){
003e92   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003e94   e02c     bz      0x003eee         	BZ	_00302_DS_
003e96   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
003e98   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
003e9a   0f80     addlw   0x80             	ADDLW	0x80
003e9c   0f80     addlw   0x80             	ADDLW	0x80
003e9e   e103     bnz     0x003ea6         	BNZ	_00348_DS_
003ea0   0e05     movlw   0x05             	MOVLW	0x05
003ea2   0102     movlb   0x2              	BANKSEL	_senha_i
003ea4   5dfa     subwf   0xfa, 0x0, 0x1   	SUBWF	_senha_i, W, B
                                           _00348_DS_:
003ea6   e223     bc      0x003eee         	BC	_00302_DS_
003ea8   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
                                           ;	.line	159; var.c	senha_new[senha_i] = senha;
003eaa   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
003eac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003eae   0102     movlb   0x2              	BANKSEL	_senha_i
003eb0   51fa     movf    0xfa, 0x0, 0x1   	MOVF	_senha_i, W, B
003eb2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003eb4   0e00     movlw   0x00             	MOVLW	0x00
003eb6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003eb8   0e02     movlw   0x02             	MOVLW	0x02
003eba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003ebc   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
003ebe   f027
003ec0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003ec2   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
003ec4   f002
003ec6   0e04     movlw   0x04             	MOVLW	0x04
003ec8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003eca   0ee4     movlw   0xe4             	MOVLW	LOW(_senha_new)
003ecc   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003ece   0e02     movlw   0x02             	MOVLW	HIGH(_senha_new)
003ed0   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
003ed2   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003ed4   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
003ed6   ffe9
003ed8   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
003eda   ffea
003edc   c000     movff   0x000, 0xfee     	MOVFF	r0x00, POSTINC0
003ede   ffee
003ee0   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
003ee2   ffef
003ee4   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	160; var.c	senha_i++;
003ee6   3ffa     incfsz  0xfa, 0x1, 0x1   	INCFSZ	_senha_i, F, B
003ee8   d002     bra     0x003eee         	BRA	_20299_DS_
003eea   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
003eec   2bfb     incf    0xfb, 0x1, 0x1   	INCF	(_senha_i + 1), F, B
                                           _20299_DS_:
                                           _00302_DS_:
003eee   0102     movlb   0x2              	BANKSEL	_senha_result
                                           ;	.line	163; var.c	senha_result = 0;
003ef0   6bfc     clrf    0xfc, 0x1        	CLRF	_senha_result, B
003ef2   0102     movlb   0x2              	BANKSEL	(_senha_result + 1)
003ef4   6bfd     clrf    0xfd, 0x1        	CLRF	(_senha_result + 1), B
003ef6   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	164; var.c	if(senha_i==10){
003ef8   51fa     movf    0xfa, 0x0, 0x1   	MOVF	_senha_i, W, B
003efa   0a0a     xorlw   0x0a             	XORLW	0x0a
003efc   e103     bnz     0x003f04         	BNZ	_00349_DS_
003efe   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
003f00   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
003f02   e001     bz      0x003f06         	BZ	_00350_DS_
                                           _00349_DS_:
003f04   d06c     bra     0x003fde         	BRA	_00309_DS_
                                           _00350_DS_:
003f06   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	165; var.c	senha_i=0;
003f08   6bfa     clrf    0xfa, 0x1        	CLRF	_senha_i, B
003f0a   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
003f0c   6bfb     clrf    0xfb, 0x1        	CLRF	(_senha_i + 1), B
                                           ;	.line	166; var.c	for(i=0;i<5;i++){
003f0e   6a00     clrf    0x00, 0x0        	CLRF	r0x00
003f10   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003f12   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00310_DS_:
                                           ;	.line	167; var.c	if(senha_new[i] != senha_count[i]){
003f14   0ee4     movlw   0xe4             	MOVLW	LOW(_senha_new)
003f16   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
003f18   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003f1a   0e02     movlw   0x02             	MOVLW	HIGH(_senha_new)
003f1c   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003f1e   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003f20   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
003f22   ffe9
003f24   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
003f26   ffea
003f28   cfee     movff   0xfee, 0x003     	MOVFF	POSTINC0, r0x03
003f2a   f003
003f2c   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
003f2e   f004
003f30   0eda     movlw   0xda             	MOVLW	LOW(_senha_count)
003f32   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
003f34   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003f36   0e02     movlw   0x02             	MOVLW	HIGH(_senha_count)
003f38   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003f3a   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003f3c   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
003f3e   ffe9
003f40   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
003f42   ffea
003f44   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
003f46   f005
003f48   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
003f4a   f006
003f4c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003f4e   1805     xorwf   0x05, 0x0, 0x0   	XORWF	r0x05, W
003f50   e103     bnz     0x003f58         	BNZ	_00352_DS_
003f52   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003f54   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
003f56   e00c     bz      0x003f70         	BZ	_00311_DS_
                                           _00352_DS_:
003f58   0102     movlb   0x2              	BANKSEL	_senha_result
                                           ;	.line	168; var.c	senha_result = 0;
003f5a   6bfc     clrf    0xfc, 0x1        	CLRF	_senha_result, B
003f5c   0102     movlb   0x2              	BANKSEL	(_senha_result + 1)
003f5e   6bfd     clrf    0xfd, 0x1        	CLRF	(_senha_result + 1), B
                                           ;	.line	169; var.c	senha_try++;
003f60   0e01     movlw   0x01             	MOVLW	0x01
003f62   0102     movlb   0x2              	BANKSEL	_senha_try
003f64   6ffe     movwf   0xfe, 0x1        	MOVWF	_senha_try, B
003f66   0102     movlb   0x2              	BANKSEL	(_senha_try + 1)
003f68   6bff     clrf    0xff, 0x1        	CLRF	(_senha_try + 1), B
                                           ;	.line	170; var.c	return 1;
003f6a   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
003f6c   0e01     movlw   0x01             	MOVLW	0x01
003f6e   d039     bra     0x003fe2         	BRA	_00314_DS_
                                           _00311_DS_:
                                           ;	.line	166; var.c	for(i=0;i<5;i++){
003f70   0e02     movlw   0x02             	MOVLW	0x02
003f72   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003f74   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003f76   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003f78   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003f7a   0e05     movlw   0x05             	MOVLW	0x05
003f7c   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003f7e   e3ca     bnc     0x003f14         	BNC	_00310_DS_
                                           ;	.line	174; var.c	for(i=0;i<5;i++){
003f80   6a00     clrf    0x00, 0x0        	CLRF	r0x00
003f82   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003f84   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00312_DS_:
                                           ;	.line	175; var.c	senha_save[i] = senha_new[i];
003f86   0ed0     movlw   0xd0             	MOVLW	LOW(_senha_save)
003f88   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
003f8a   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003f8c   0e02     movlw   0x02             	MOVLW	HIGH(_senha_save)
003f8e   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003f90   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
003f92   0ee4     movlw   0xe4             	MOVLW	LOW(_senha_new)
003f94   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
003f96   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
003f98   0e02     movlw   0x02             	MOVLW	HIGH(_senha_new)
003f9a   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
003f9c   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
003f9e   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
003fa0   ffe9
003fa2   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
003fa4   ffea
003fa6   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
003fa8   f005
003faa   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
003fac   f006
003fae   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
003fb0   ffe9
003fb2   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
003fb4   ffea
003fb6   c005     movff   0x005, 0xfee     	MOVFF	r0x05, POSTINC0
003fb8   ffee
003fba   c006     movff   0x006, 0xfef     	MOVFF	r0x06, INDF0
003fbc   ffef
                                           ;	.line	174; var.c	for(i=0;i<5;i++){
003fbe   0e02     movlw   0x02             	MOVLW	0x02
003fc0   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003fc2   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
003fc4   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003fc6   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
003fc8   0e05     movlw   0x05             	MOVLW	0x05
003fca   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
003fcc   e3dc     bnc     0x003f86         	BNC	_00312_DS_
                                           ;	.line	177; var.c	senha_result=1;
003fce   0e01     movlw   0x01             	MOVLW	0x01
003fd0   0102     movlb   0x2              	BANKSEL	_senha_result
003fd2   6ffc     movwf   0xfc, 0x1        	MOVWF	_senha_result, B
003fd4   0102     movlb   0x2              	BANKSEL	(_senha_result + 1)
003fd6   6bfd     clrf    0xfd, 0x1        	CLRF	(_senha_result + 1), B
                                           ;	.line	178; var.c	return 1;
003fd8   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
003fda   0e01     movlw   0x01             	MOVLW	0x01
003fdc   d002     bra     0x003fe2         	BRA	_00314_DS_
                                           _00309_DS_:
                                           ;	.line	180; var.c	return 0;
003fde   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
003fe0   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00314_DS_:
003fe2   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
003fe4   f006
003fe6   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
003fe8   f005
003fea   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
003fec   f004
003fee   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
003ff0   f003
003ff2   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
003ff4   f002
003ff6   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
003ff8   f001
003ffa   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
003ffc   f000
003ffe   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004000   ffd9
004002   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__testSenha	code
                                           _testSenha:
                                           ;	.line	120; var.c	int testSenha(char senha){
004004   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004006   ffe5
004008   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00400a   ffd9
00400c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00400e   ffe5
004010   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004012   ffe5
004014   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004016   ffe5
004018   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00401a   ffe5
00401c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00401e   ffe5
004020   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
004022   ffe5
004024   c006     movff   0x006, 0xfe5     	MOVFF	r0x06, POSTDEC1
004026   ffe5
004028   0e02     movlw   0x02             	MOVLW	0x02
00402a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00402c   f000
00402e   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
                                           ;	.line	123; var.c	if(senha_i<5){
004030   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
004032   0f80     addlw   0x80             	ADDLW	0x80
004034   0f80     addlw   0x80             	ADDLW	0x80
004036   e103     bnz     0x00403e         	BNZ	_00286_DS_
004038   0e05     movlw   0x05             	MOVLW	0x05
00403a   0102     movlb   0x2              	BANKSEL	_senha_i
00403c   5dfa     subwf   0xfa, 0x0, 0x1   	SUBWF	_senha_i, W, B
                                           _00286_DS_:
00403e   e230     bc      0x0040a0         	BC	_00255_DS_
004040   0102     movlb   0x2              	BANKSEL	_senha_result
                                           ;	.line	124; var.c	senha_result=0;
004042   6bfc     clrf    0xfc, 0x1        	CLRF	_senha_result, B
004044   0102     movlb   0x2              	BANKSEL	(_senha_result + 1)
004046   6bfd     clrf    0xfd, 0x1        	CLRF	(_senha_result + 1), B
                                           ;	.line	125; var.c	if(senha != 0){
004048   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00404a   e01e     bz      0x004088         	BZ	_00251_DS_
00404c   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	126; var.c	senha_i++;
00404e   3ffa     incfsz  0xfa, 0x1, 0x1   	INCFSZ	_senha_i, F, B
004050   d002     bra     0x004056         	BRA	_30300_DS_
004052   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
004054   2bfb     incf    0xfb, 0x1, 0x1   	INCF	(_senha_i + 1), F, B
                                           _30300_DS_:
004056   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	127; var.c	senha_count[senha_i - 1] = senha;
004058   51fa     movf    0xfa, 0x0, 0x1   	MOVF	_senha_i, W, B
00405a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00405c   0601     decf    0x01, 0x1, 0x0   	DECF	r0x01, F
                                           ; ;multiply lit val:0x02 by variable r0x01 and store in r0x01
00405e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
004060   0d02     mullw   0x02             	MULLW	0x02
004062   50f4     movf    0xf4, 0x0, 0x0   	MOVF	PRODH, W
004064   be01     btfsc   0x01, 0x7, 0x0   	BTFSC	r0x01, 7
004066   0802     sublw   0x02             	SUBLW	0x02
004068   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00406a   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00406c   f001
00406e   0eda     movlw   0xda             	MOVLW	LOW(_senha_count)
004070   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
004072   0e02     movlw   0x02             	MOVLW	HIGH(_senha_count)
004074   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
004076   6a03     clrf    0x03, 0x0        	CLRF	r0x03
004078   c001     movff   0x001, 0xfe9     	MOVFF	r0x01, FSR0L
00407a   ffe9
00407c   c002     movff   0x002, 0xfea     	MOVFF	r0x02, FSR0H
00407e   ffea
004080   c000     movff   0x000, 0xfee     	MOVFF	r0x00, POSTINC0
004082   ffee
004084   c003     movff   0x003, 0xfef     	MOVFF	r0x03, INDF0
004086   ffef
                                           _00251_DS_:
004088   0102     movlb   0x2              	BANKSEL	_senha_try
                                           ;	.line	129; var.c	if(senha_try==3){
00408a   51fe     movf    0xfe, 0x0, 0x1   	MOVF	_senha_try, W, B
00408c   0a03     xorlw   0x03             	XORLW	0x03
00408e   e108     bnz     0x0040a0         	BNZ	_00255_DS_
004090   0102     movlb   0x2              	BANKSEL	(_senha_try + 1)
004092   51ff     movf    0xff, 0x0, 0x1   	MOVF	(_senha_try + 1), W, B
004094   e001     bz      0x004098         	BZ	_00288_DS_
                                           _00287_DS_:
004096   d004     bra     0x0040a0         	BRA	_00255_DS_
                                           _00288_DS_:
004098   0102     movlb   0x2              	BANKSEL	_senha_try
                                           ;	.line	130; var.c	senha_try=0;
00409a   6bfe     clrf    0xfe, 0x1        	CLRF	_senha_try, B
00409c   0102     movlb   0x2              	BANKSEL	(_senha_try + 1)
00409e   6bff     clrf    0xff, 0x1        	CLRF	(_senha_try + 1), B
                                           _00255_DS_:
0040a0   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	133; var.c	if(senha_i==5){
0040a2   51fa     movf    0xfa, 0x0, 0x1   	MOVF	_senha_i, W, B
0040a4   0a05     xorlw   0x05             	XORLW	0x05
0040a6   e103     bnz     0x0040ae         	BNZ	_00289_DS_
0040a8   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
0040aa   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
0040ac   e001     bz      0x0040b0         	BZ	_00290_DS_
                                           _00289_DS_:
0040ae   d049     bra     0x004142         	BRA	_00260_DS_
                                           _00290_DS_:
                                           ;	.line	134; var.c	for(i=0;i<5;i++){
0040b0   6a00     clrf    0x00, 0x0        	CLRF	r0x00
0040b2   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0040b4   6a02     clrf    0x02, 0x0        	CLRF	r0x02
                                           _00261_DS_:
                                           ;	.line	135; var.c	if(senha_count[i] != senha_save[i]){
0040b6   0eda     movlw   0xda             	MOVLW	LOW(_senha_count)
0040b8   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
0040ba   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0040bc   0e02     movlw   0x02             	MOVLW	HIGH(_senha_count)
0040be   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0040c0   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
0040c2   c003     movff   0x003, 0xfe9     	MOVFF	r0x03, FSR0L
0040c4   ffe9
0040c6   c004     movff   0x004, 0xfea     	MOVFF	r0x04, FSR0H
0040c8   ffea
0040ca   cfee     movff   0xfee, 0x003     	MOVFF	POSTINC0, r0x03
0040cc   f003
0040ce   cfef     movff   0xfef, 0x004     	MOVFF	INDF0, r0x04
0040d0   f004
0040d2   0ed0     movlw   0xd0             	MOVLW	LOW(_senha_save)
0040d4   2401     addwf   0x01, 0x0, 0x0   	ADDWF	r0x01, W
0040d6   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
0040d8   0e02     movlw   0x02             	MOVLW	HIGH(_senha_save)
0040da   2002     addwfc  0x02, 0x0, 0x0   	ADDWFC	r0x02, W
0040dc   6e06     movwf   0x06, 0x0        	MOVWF	r0x06
0040de   c005     movff   0x005, 0xfe9     	MOVFF	r0x05, FSR0L
0040e0   ffe9
0040e2   c006     movff   0x006, 0xfea     	MOVFF	r0x06, FSR0H
0040e4   ffea
0040e6   cfee     movff   0xfee, 0x005     	MOVFF	POSTINC0, r0x05
0040e8   f005
0040ea   cfef     movff   0xfef, 0x006     	MOVFF	INDF0, r0x06
0040ec   f006
0040ee   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0040f0   1805     xorwf   0x05, 0x0, 0x0   	XORWF	r0x05, W
0040f2   e103     bnz     0x0040fa         	BNZ	_00292_DS_
0040f4   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0040f6   1806     xorwf   0x06, 0x0, 0x0   	XORWF	r0x06, W
0040f8   e00c     bz      0x004112         	BZ	_00262_DS_
                                           _00292_DS_:
0040fa   0102     movlb   0x2              	BANKSEL	_senha_try
                                           ;	.line	136; var.c	senha_try++;
0040fc   3ffe     incfsz  0xfe, 0x1, 0x1   	INCFSZ	_senha_try, F, B
0040fe   d002     bra     0x004104         	BRA	_40301_DS_
004100   0102     movlb   0x2              	BANKSEL	(_senha_try + 1)
004102   2bff     incf    0xff, 0x1, 0x1   	INCF	(_senha_try + 1), F, B
                                           _40301_DS_:
004104   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	137; var.c	senha_i=0;
004106   6bfa     clrf    0xfa, 0x1        	CLRF	_senha_i, B
004108   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
00410a   6bfb     clrf    0xfb, 0x1        	CLRF	(_senha_i + 1), B
                                           ;	.line	138; var.c	return 0;
00410c   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
00410e   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
004110   d01a     bra     0x004146         	BRA	_00263_DS_
                                           _00262_DS_:
                                           ;	.line	134; var.c	for(i=0;i<5;i++){
004112   0e02     movlw   0x02             	MOVLW	0x02
004114   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
004116   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
004118   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
00411a   2a00     incf    0x00, 0x1, 0x0   	INCF	r0x00, F
00411c   0e05     movlw   0x05             	MOVLW	0x05
00411e   5c00     subwf   0x00, 0x0, 0x0   	SUBWF	r0x00, W
004120   e3ca     bnc     0x0040b6         	BNC	_00261_DS_
004122   0102     movlb   0x2              	BANKSEL	_senha_try
                                           ;	.line	142; var.c	senha_try = 0;
004124   6bfe     clrf    0xfe, 0x1        	CLRF	_senha_try, B
004126   0102     movlb   0x2              	BANKSEL	(_senha_try + 1)
004128   6bff     clrf    0xff, 0x1        	CLRF	(_senha_try + 1), B
00412a   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	143; var.c	senha_i = 0;
00412c   6bfa     clrf    0xfa, 0x1        	CLRF	_senha_i, B
00412e   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
004130   6bfb     clrf    0xfb, 0x1        	CLRF	(_senha_i + 1), B
                                           ;	.line	144; var.c	senha_result = 1;
004132   0e01     movlw   0x01             	MOVLW	0x01
004134   0102     movlb   0x2              	BANKSEL	_senha_result
004136   6ffc     movwf   0xfc, 0x1        	MOVWF	_senha_result, B
004138   0102     movlb   0x2              	BANKSEL	(_senha_result + 1)
00413a   6bfd     clrf    0xfd, 0x1        	CLRF	(_senha_result + 1), B
                                           ;	.line	145; var.c	return 1;
00413c   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
00413e   0e01     movlw   0x01             	MOVLW	0x01
004140   d002     bra     0x004146         	BRA	_00263_DS_
                                           _00260_DS_:
                                           ;	.line	147; var.c	return 0;
004142   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
004144   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00263_DS_:
004146   cfe4     movff   0xfe4, 0x006     	MOVFF	PREINC1, r0x06
004148   f006
00414a   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
00414c   f005
00414e   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
004150   f004
004152   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004154   f003
004156   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004158   f002
00415a   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
00415c   f001
00415e   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004160   f000
004162   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004164   ffd9
004166   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__setTestResult	code
                                           _setTestResult:
                                           ;	.line	117; var.c	void setTestResult(int x){
005d94   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005d96   ffe5
005d98   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005d9a   ffd9
005d9c   0e02     movlw   0x02             	MOVLW	0x02
005d9e   cfdb     movff   0xfdb, 0x2fc     	MOVFF	PLUSW2, _senha_result
005da0   f2fc
005da2   0e03     movlw   0x03             	MOVLW	0x03
005da4   cfdb     movff   0xfdb, 0x2fd     	MOVFF	PLUSW2, (_senha_result + 1)
005da6   f2fd
                                           ;	.line	118; var.c	senha_result = x;
005da8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005daa   ffd9
005dac   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getTestResult	code
                                           _getTestResult:
                                           ;	.line	114; var.c	int getTestResult(){
005e46   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005e48   ffe5
005e4a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005e4c   ffd9
                                           ;	.line	115; var.c	return senha_result;
005e4e   c2fd     movff   0x2fd, 0xff3     	MOVFF	(_senha_result + 1), PRODL
005e50   fff3
005e52   0102     movlb   0x2              	BANKSEL	_senha_result
005e54   51fc     movf    0xfc, 0x0, 0x1   	MOVF	_senha_result, W, B
005e56   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005e58   ffd9
005e5a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getSenha_try	code
                                           _getSenha_try:
                                           ;	.line	111; var.c	int getSenha_try(){
005e5c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005e5e   ffe5
005e60   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005e62   ffd9
                                           ;	.line	112; var.c	return senha_try;
005e64   c2ff     movff   0x2ff, 0xff3     	MOVFF	(_senha_try + 1), PRODL
005e66   fff3
005e68   0102     movlb   0x2              	BANKSEL	_senha_try
005e6a   51fe     movf    0xfe, 0x0, 0x1   	MOVF	_senha_try, W, B
005e6c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005e6e   ffd9
005e70   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getSenha_i	code
                                           _getSenha_i:
                                           ;	.line	108; var.c	int getSenha_i(){
005e72   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005e74   ffe5
005e76   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005e78   ffd9
                                           ;	.line	109; var.c	return senha_i;
005e7a   c2fb     movff   0x2fb, 0xff3     	MOVFF	(_senha_i + 1), PRODL
005e7c   fff3
005e7e   0102     movlb   0x2              	BANKSEL	_senha_i
005e80   51fa     movf    0xfa, 0x0, 0x1   	MOVF	_senha_i, W, B
005e82   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005e84   ffd9
005e86   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__enableSenha	code
                                           _enableSenha:
                                           ;	.line	105; var.c	void enableSenha(int x){
005dae   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005db0   ffe5
005db2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005db4   ffd9
005db6   0e02     movlw   0x02             	MOVLW	0x02
005db8   cfdb     movff   0xfdb, 0x2f8     	MOVFF	PLUSW2, _senha_enable
005dba   f2f8
005dbc   0e03     movlw   0x03             	MOVLW	0x03
005dbe   cfdb     movff   0xfdb, 0x2f9     	MOVFF	PLUSW2, (_senha_enable + 1)
005dc0   f2f9
                                           ;	.line	106; var.c	senha_enable = x;
005dc2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005dc4   ffd9
005dc6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getSenhaStatus	code
                                           _getSenhaStatus:
                                           ;	.line	102; var.c	int getSenhaStatus(){
005e88   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005e8a   ffe5
005e8c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005e8e   ffd9
                                           ;	.line	103; var.c	return senha_enable;
005e90   c2f9     movff   0x2f9, 0xff3     	MOVFF	(_senha_enable + 1), PRODL
005e92   fff3
005e94   0102     movlb   0x2              	BANKSEL	_senha_enable
005e96   51f8     movf    0xf8, 0x0, 0x1   	MOVF	_senha_enable, W, B
005e98   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005e9a   ffd9
005e9c   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__setLanguage	code
                                           _setLanguage:
                                           ;	.line	95; var.c	void setLanguage(char newLanguage){
005d0e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005d10   ffe5
005d12   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005d14   ffd9
005d16   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005d18   ffe5
005d1a   0e02     movlw   0x02             	MOVLW	0x02
005d1c   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005d1e   f000
                                           ;	.line	98; var.c	language = newLanguage%2;
005d20   0e01     movlw   0x01             	MOVLW	0x01
005d22   1400     andwf   0x00, 0x0, 0x0   	ANDWF	r0x00, W
005d24   0100     movlb   0x0              	BANKSEL	_language
005d26   6f8d     movwf   0x8d, 0x1        	MOVWF	_language, B
005d28   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005d2a   f000
005d2c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005d2e   ffd9
005d30   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getLanguage	code
                                           _getLanguage:
                                           ;	.line	92; var.c	char getLanguage(void){
005ef0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005ef2   ffe5
005ef4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005ef6   ffd9
005ef8   0100     movlb   0x0              	BANKSEL	_language
                                           ;	.line	93; var.c	return language;
005efa   518d     movf    0x8d, 0x0, 0x1   	MOVF	_language, W, B
005efc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005efe   ffd9
005f00   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__setAlarmLevel	code
                                           _setAlarmLevel:
                                           ;	.line	82; var.c	void setAlarmLevel(int newAlarmLevel, int valor) {
005544   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005546   ffe5
005548   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00554a   ffd9
00554c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00554e   ffe5
005550   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005552   ffe5
005554   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
005556   ffe5
005558   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00555a   ffe5
00555c   0e02     movlw   0x02             	MOVLW	0x02
00555e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
005560   f000
005562   0e03     movlw   0x03             	MOVLW	0x03
005564   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
005566   f001
005568   0e04     movlw   0x04             	MOVLW	0x04
00556a   cfdb     movff   0xfdb, 0x002     	MOVFF	PLUSW2, r0x02
00556c   f002
00556e   0e05     movlw   0x05             	MOVLW	0x05
005570   cfdb     movff   0xfdb, 0x003     	MOVFF	PLUSW2, r0x03
005572   f003
                                           ;	.line	83; var.c	if(valor == 2){
005574   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
005576   0a02     xorlw   0x02             	XORLW	0x02
005578   e102     bnz     0x00557e         	BNZ	_00202_DS_
00557a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00557c   e001     bz      0x005580         	BZ	_00203_DS_
                                           _00202_DS_:
00557e   d004     bra     0x005588         	BRA	_00191_DS_
                                           _00203_DS_:
                                           ;	.line	84; var.c	alarmLevel_H = newAlarmLevel;
005580   c000     movff   0x000, 0x2f4     	MOVFF	r0x00, _alarmLevel_H
005582   f2f4
005584   c001     movff   0x001, 0x2f5     	MOVFF	r0x01, (_alarmLevel_H + 1)
005586   f2f5
                                           _00191_DS_:
                                           ;	.line	86; var.c	if(valor == 1){
005588   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00558a   0a01     xorlw   0x01             	XORLW	0x01
00558c   e102     bnz     0x005592         	BNZ	_00204_DS_
00558e   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
005590   e001     bz      0x005594         	BZ	_00205_DS_
                                           _00204_DS_:
005592   d004     bra     0x00559c         	BRA	_00194_DS_
                                           _00205_DS_:
                                           ;	.line	87; var.c	alarmLevel_L = newAlarmLevel;
005594   c000     movff   0x000, 0x2f6     	MOVFF	r0x00, _alarmLevel_L
005596   f2f6
005598   c001     movff   0x001, 0x2f7     	MOVFF	r0x01, (_alarmLevel_L + 1)
00559a   f2f7
                                           _00194_DS_:
00559c   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
00559e   f003
0055a0   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0055a2   f002
0055a4   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0055a6   f001
0055a8   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0055aa   f000
0055ac   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0055ae   ffd9
0055b0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getAlarmLevel	code
                                           _getAlarmLevel:
                                           ;	.line	73; var.c	int getAlarmLevel(int valor) {
00588c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00588e   ffe5
005890   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005892   ffd9
005894   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005896   ffe5
005898   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
00589a   ffe5
00589c   0e02     movlw   0x02             	MOVLW	0x02
00589e   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0058a0   f000
0058a2   0e03     movlw   0x03             	MOVLW	0x03
0058a4   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
0058a6   f001
                                           ;	.line	74; var.c	if(valor == 2)
0058a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0058aa   0a02     xorlw   0x02             	XORLW	0x02
0058ac   e102     bnz     0x0058b2         	BNZ	_00182_DS_
0058ae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0058b0   e001     bz      0x0058b4         	BZ	_00183_DS_
                                           _00182_DS_:
0058b2   d005     bra     0x0058be         	BRA	_00170_DS_
                                           _00183_DS_:
                                           ;	.line	75; var.c	return alarmLevel_H;
0058b4   c2f5     movff   0x2f5, 0xff3     	MOVFF	(_alarmLevel_H + 1), PRODL
0058b6   fff3
0058b8   0102     movlb   0x2              	BANKSEL	_alarmLevel_H
0058ba   51f4     movf    0xf4, 0x0, 0x1   	MOVF	_alarmLevel_H, W, B
0058bc   d00d     bra     0x0058d8         	BRA	_00174_DS_
                                           _00170_DS_:
                                           ;	.line	76; var.c	if(valor == 1)
0058be   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0058c0   0a01     xorlw   0x01             	XORLW	0x01
0058c2   e102     bnz     0x0058c8         	BNZ	_00184_DS_
0058c4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0058c6   e001     bz      0x0058ca         	BZ	_00185_DS_
                                           _00184_DS_:
0058c8   d005     bra     0x0058d4         	BRA	_00172_DS_
                                           _00185_DS_:
                                           ;	.line	77; var.c	return alarmLevel_L;
0058ca   c2f7     movff   0x2f7, 0xff3     	MOVFF	(_alarmLevel_L + 1), PRODL
0058cc   fff3
0058ce   0102     movlb   0x2              	BANKSEL	_alarmLevel_L
0058d0   51f6     movf    0xf6, 0x0, 0x1   	MOVF	_alarmLevel_L, W, B
0058d2   d002     bra     0x0058d8         	BRA	_00174_DS_
                                           _00172_DS_:
                                           ;	.line	79; var.c	return 0;
0058d4   6af3     clrf    0xf3, 0x0        	CLRF	PRODL
0058d6   6ae8     clrf    0xe8, 0x0        	CLRF	WREG
                                           _00174_DS_:
0058d8   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0058da   f001
0058dc   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0058de   f000
0058e0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0058e2   ffd9
0058e4   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__setMult	code
                                           _setMult:
                                           ;	.line	68; var.c	void setMult(int mult){
005dc8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005dca   ffe5
005dcc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005dce   ffd9
005dd0   0e02     movlw   0x02             	MOVLW	0x02
005dd2   cfdb     movff   0xfdb, 0x080     	MOVFF	PLUSW2, _multiplicador
005dd4   f080
005dd6   0e03     movlw   0x03             	MOVLW	0x03
005dd8   cfdb     movff   0xfdb, 0x081     	MOVFF	PLUSW2, (_multiplicador + 1)
005dda   f081
                                           ;	.line	69; var.c	multiplicador = mult;
005ddc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005dde   ffd9
005de0   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getMult	code
                                           _getMult:
                                           ;	.line	65; var.c	int getMult(){
005e9e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005ea0   ffe5
005ea2   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005ea4   ffd9
                                           ;	.line	66; var.c	return multiplicador;
005ea6   c081     movff   0x081, 0xff3     	MOVFF	(_multiplicador + 1), PRODL
005ea8   fff3
005eaa   0100     movlb   0x0              	BANKSEL	_multiplicador
005eac   5180     movf    0x80, 0x0, 0x1   	MOVF	_multiplicador, W, B
005eae   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005eb0   ffd9
005eb2   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__setTime	code
                                           _setTime:
                                           ;	.line	62; var.c	void setTime(int newTime) {
005de2   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005de4   ffe5
005de6   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005de8   ffd9
005dea   0e02     movlw   0x02             	MOVLW	0x02
005dec   cfdb     movff   0xfdb, 0x2f2     	MOVFF	PLUSW2, _time
005dee   f2f2
005df0   0e03     movlw   0x03             	MOVLW	0x03
005df2   cfdb     movff   0xfdb, 0x2f3     	MOVFF	PLUSW2, (_time + 1)
005df4   f2f3
                                           ;	.line	63; var.c	time = newTime;
005df6   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005df8   ffd9
005dfa   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getTime	code
                                           _getTime:
                                           ;	.line	59; var.c	int getTime(void) {
005eb4   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005eb6   ffe5
005eb8   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005eba   ffd9
                                           ;	.line	60; var.c	return time;
005ebc   c2f3     movff   0x2f3, 0xff3     	MOVFF	(_time + 1), PRODL
005ebe   fff3
005ec0   0102     movlb   0x2              	BANKSEL	_time
005ec2   51f2     movf    0xf2, 0x0, 0x1   	MOVF	_time, W, B
005ec4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005ec6   ffd9
005ec8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__setState	code
                                           _setState:
                                           ;	.line	54; var.c	void setState(char newState) {
005eca   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005ecc   ffe5
005ece   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005ed0   ffd9
005ed2   0e02     movlw   0x02             	MOVLW	0x02
005ed4   cfdb     movff   0xfdb, 0x08c     	MOVFF	PLUSW2, _state
005ed6   f08c
                                           ;	.line	55; var.c	state = newState;
005ed8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005eda   ffd9
005edc   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__getState	code
                                           _getState:
                                           ;	.line	51; var.c	char getState(void) {
005f02   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005f04   ffe5
005f06   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005f08   ffd9
005f0a   0100     movlb   0x0              	BANKSEL	_state
                                           ;	.line	52; var.c	return state;
005f0c   518c     movf    0x8c, 0x0, 0x1   	MOVF	_state, W, B
005f0e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005f10   ffd9
005f12   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__varInit	code
                                           _varInit:
                                           ;	.line	34; var.c	void varInit(void) {
004684   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004686   ffe5
004688   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00468a   ffd9
00468c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00468e   ffe5
004690   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004692   ffe5
004694   0100     movlb   0x0              	BANKSEL	_state
                                           ;	.line	35; var.c	state = 0;
004696   6b8c     clrf    0x8c, 0x1        	CLRF	_state, B
                                           ;	.line	36; var.c	time = 1000;
004698   0ee8     movlw   0xe8             	MOVLW	0xe8
00469a   0102     movlb   0x2              	BANKSEL	_time
00469c   6ff2     movwf   0xf2, 0x1        	MOVWF	_time, B
00469e   0e03     movlw   0x03             	MOVLW	0x03
0046a0   0102     movlb   0x2              	BANKSEL	(_time + 1)
0046a2   6ff3     movwf   0xf3, 0x1        	MOVWF	(_time + 1), B
                                           ;	.line	37; var.c	alarmLevel_L = 20;
0046a4   0e14     movlw   0x14             	MOVLW	0x14
0046a6   0102     movlb   0x2              	BANKSEL	_alarmLevel_L
0046a8   6ff6     movwf   0xf6, 0x1        	MOVWF	_alarmLevel_L, B
0046aa   0102     movlb   0x2              	BANKSEL	(_alarmLevel_L + 1)
0046ac   6bf7     clrf    0xf7, 0x1        	CLRF	(_alarmLevel_L + 1), B
                                           ;	.line	38; var.c	alarmLevel_H = 80;
0046ae   0e50     movlw   0x50             	MOVLW	0x50
0046b0   0102     movlb   0x2              	BANKSEL	_alarmLevel_H
0046b2   6ff4     movwf   0xf4, 0x1        	MOVWF	_alarmLevel_H, B
0046b4   0102     movlb   0x2              	BANKSEL	(_alarmLevel_H + 1)
0046b6   6bf5     clrf    0xf5, 0x1        	CLRF	(_alarmLevel_H + 1), B
0046b8   0100     movlb   0x0              	BANKSEL	_language
                                           ;	.line	39; var.c	language = 0;
0046ba   6b8d     clrf    0x8d, 0x1        	CLRF	_language, B
                                           ;	.line	40; var.c	multiplicador = 10;
0046bc   0e0a     movlw   0x0a             	MOVLW	0x0a
0046be   0100     movlb   0x0              	BANKSEL	_multiplicador
0046c0   6f80     movwf   0x80, 0x1        	MOVWF	_multiplicador, B
0046c2   0100     movlb   0x0              	BANKSEL	(_multiplicador + 1)
0046c4   6b81     clrf    0x81, 0x1        	CLRF	(_multiplicador + 1), B
0046c6   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	41; var.c	for(senha_i=0;senha_i<5;senha_i++){
0046c8   6bfa     clrf    0xfa, 0x1        	CLRF	_senha_i, B
0046ca   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
0046cc   6bfb     clrf    0xfb, 0x1        	CLRF	(_senha_i + 1), B
                                           _00124_DS_:
0046ce   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
                                           ;	.line	42; var.c	senha_save[senha_i]= 5 ;
0046d0   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
0046d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0046d4   0102     movlb   0x2              	BANKSEL	_senha_i
0046d6   51fa     movf    0xfa, 0x0, 0x1   	MOVF	_senha_i, W, B
0046d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0046da   0e00     movlw   0x00             	MOVLW	0x00
0046dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0046de   0e02     movlw   0x02             	MOVLW	0x02
0046e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0046e2   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
0046e4   f027
0046e6   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0046e8   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
0046ea   f001
0046ec   0e04     movlw   0x04             	MOVLW	0x04
0046ee   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0046f0   0ed0     movlw   0xd0             	MOVLW	LOW(_senha_save)
0046f2   2600     addwf   0x00, 0x1, 0x0   	ADDWF	r0x00, F
0046f4   0e02     movlw   0x02             	MOVLW	HIGH(_senha_save)
0046f6   2201     addwfc  0x01, 0x1, 0x0   	ADDWFC	r0x01, F
0046f8   c000     movff   0x000, 0xfe9     	MOVFF	r0x00, FSR0L
0046fa   ffe9
0046fc   c001     movff   0x001, 0xfea     	MOVFF	r0x01, FSR0H
0046fe   ffea
004700   0e05     movlw   0x05             	MOVLW	0x05
004702   6eee     movwf   0xee, 0x0        	MOVWF	POSTINC0
004704   0e00     movlw   0x00             	MOVLW	0x00
004706   6eef     movwf   0xef, 0x0        	MOVWF	INDF0
004708   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	41; var.c	for(senha_i=0;senha_i<5;senha_i++){
00470a   3ffa     incfsz  0xfa, 0x1, 0x1   	INCFSZ	_senha_i, F, B
00470c   d002     bra     0x004712         	BRA	_50302_DS_
00470e   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
004710   2bfb     incf    0xfb, 0x1, 0x1   	INCF	(_senha_i + 1), F, B
                                           _50302_DS_:
004712   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
004714   51fb     movf    0xfb, 0x0, 0x1   	MOVF	(_senha_i + 1), W, B
004716   0f80     addlw   0x80             	ADDLW	0x80
004718   0f80     addlw   0x80             	ADDLW	0x80
00471a   e103     bnz     0x004722         	BNZ	_00134_DS_
00471c   0e05     movlw   0x05             	MOVLW	0x05
00471e   0102     movlb   0x2              	BANKSEL	_senha_i
004720   5dfa     subwf   0xfa, 0x0, 0x1   	SUBWF	_senha_i, W, B
                                           _00134_DS_:
004722   e3d5     bnc     0x0046ce         	BNC	_00124_DS_
                                           ;	.line	44; var.c	senha_enable = 1;
004724   0e01     movlw   0x01             	MOVLW	0x01
004726   0102     movlb   0x2              	BANKSEL	_senha_enable
004728   6ff8     movwf   0xf8, 0x1        	MOVWF	_senha_enable, B
00472a   0102     movlb   0x2              	BANKSEL	(_senha_enable + 1)
00472c   6bf9     clrf    0xf9, 0x1        	CLRF	(_senha_enable + 1), B
00472e   0102     movlb   0x2              	BANKSEL	_senha_i
                                           ;	.line	45; var.c	senha_i = 0;
004730   6bfa     clrf    0xfa, 0x1        	CLRF	_senha_i, B
004732   0102     movlb   0x2              	BANKSEL	(_senha_i + 1)
004734   6bfb     clrf    0xfb, 0x1        	CLRF	(_senha_i + 1), B
004736   0102     movlb   0x2              	BANKSEL	_senha_try
                                           ;	.line	46; var.c	senha_try = 0;
004738   6bfe     clrf    0xfe, 0x1        	CLRF	_senha_try, B
00473a   0102     movlb   0x2              	BANKSEL	(_senha_try + 1)
00473c   6bff     clrf    0xff, 0x1        	CLRF	(_senha_try + 1), B
00473e   0102     movlb   0x2              	BANKSEL	_senha_result
                                           ;	.line	47; var.c	senha_result = 0;
004740   6bfc     clrf    0xfc, 0x1        	CLRF	_senha_result, B
004742   0102     movlb   0x2              	BANKSEL	(_senha_result + 1)
004744   6bfd     clrf    0xfd, 0x1        	CLRF	(_senha_result + 1), B
004746   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004748   f001
00474a   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
00474c   f000
00474e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004750   ffd9
004752   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__delay2ms	code
                                           _delay2ms:
                                           ;	.line	27; var.c	void delay2ms(void) {
005bd8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005bda   ffe5
005bdc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005bde   ffd9
005be0   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005be2   ffe5
005be4   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005be6   ffe5
                                           ;	.line	29; var.c	for (i = 0; i < 50; i++) {
005be8   0e32     movlw   0x32             	MOVLW	0x32
005bea   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00117_DS_:
                                           ;	.line	30; var.c	delay40us();
005bec   ec34     call    0x005c68, 0x0    	CALL	_delay40us
005bee   f02e
005bf0   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
005bf2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005bf4   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
005bf6   f000
                                           ;	.line	29; var.c	for (i = 0; i < 50; i++) {
005bf8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005bfa   e1f8     bnz     0x005bec         	BNZ	_00117_DS_
005bfc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005bfe   f001
005c00   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005c02   f000
005c04   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005c06   ffd9
005c08   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_var__delay40us	code
                                           _delay40us:
                                           ;	.line	22; var.c	void delay40us(void) {
005c68   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005c6a   ffe5
005c6c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005c6e   ffd9
005c70   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005c72   ffe5
005c74   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005c76   ffe5
                                           ;	.line	24; var.c	for (i = 0; i < 10; i++); //valor aproximado
005c78   0e0a     movlw   0x0a             	MOVLW	0x0a
005c7a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
                                           _00108_DS_:
005c7c   0400     decf    0x00, 0x0, 0x0   	DECF	r0x00, W
005c7e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
005c80   c001     movff   0x001, 0x000     	MOVFF	r0x01, r0x00
005c82   f000
005c84   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
005c86   e1fa     bnz     0x005c7c         	BNZ	_00108_DS_
005c88   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
005c8a   f001
005c8c   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005c8e   f000
005c90   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005c92   ffd9
005c94   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	 1696 (0x06a0) bytes ( 1.29%)
                                           ;           	  848 (0x0350) words
                                           ; udata size:	   48 (0x0030) bytes ( 3.75%)
                                           ; access size:	    7 (0x0007) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_eventInit
                                           	global	_eventRead

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_kpRead
                                           	extern	_kpInit

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1

                                           udata_event_0	udata
                                           _key_ant	res	2

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_event__eventRead	code
                                           _eventRead:
                                           ;	.line	12; event.c	unsigned int eventRead(void) {
004dba   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
004dbc   ffe5
004dbe   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
004dc0   ffd9
004dc2   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
004dc4   ffe5
004dc6   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
004dc8   ffe5
004dca   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
004dcc   ffe5
004dce   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
004dd0   ffe5
004dd2   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
004dd4   ffe5
004dd6   c005     movff   0x005, 0xfe5     	MOVFF	r0x05, POSTDEC1
004dd8   ffe5
                                           ;	.line	14; event.c	int ev = EV_NOEVENT;
004dda   0e05     movlw   0x05             	MOVLW	0x05
004ddc   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
004dde   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           ;	.line	15; event.c	key = kpRead();
004de0   ec6f     call    0x005ede, 0x0    	CALL	_kpRead
004de2   f02f
004de4   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
004de6   6a03     clrf    0x03, 0x0        	CLRF	r0x03
                                           ;	.line	16; event.c	if (key != key_ant) {
004de8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
004dea   6e04     movwf   0x04, 0x0        	MOVWF	r0x04
004dec   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
004dee   6e05     movwf   0x05, 0x0        	MOVWF	r0x05
004df0   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
004df2   0100     movlb   0x0              	BANKSEL	_key_ant
004df4   1982     xorwf   0x82, 0x0, 0x1   	XORWF	_key_ant, W, B
004df6   e104     bnz     0x004e00         	BNZ	_00143_DS_
004df8   5005     movf    0x05, 0x0, 0x0   	MOVF	r0x05, W
004dfa   0100     movlb   0x0              	BANKSEL	(_key_ant + 1)
004dfc   1983     xorwf   0x83, 0x0, 0x1   	XORWF	(_key_ant + 1), W, B
004dfe   e018     bz      0x004e30         	BZ	_00121_DS_
                                           _00143_DS_:
                                           ;	.line	17; event.c	if (BitTst(key, 3)) {
004e00   a602     btfss   0x02, 0x3, 0x0   	BTFSS	r0x02, 3
004e02   d003     bra     0x004e0a         	BRA	_00111_DS_
                                           ;	.line	18; event.c	ev = EV_RIGHT;
004e04   0e03     movlw   0x03             	MOVLW	0x03
004e06   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
004e08   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00111_DS_:
                                           ;	.line	21; event.c	if (BitTst(key, 7)) {
004e0a   ae02     btfss   0x02, 0x7, 0x0   	BTFSS	r0x02, 7
004e0c   d003     bra     0x004e14         	BRA	_00113_DS_
                                           ;	.line	22; event.c	ev = EV_LEFT;
004e0e   0e02     movlw   0x02             	MOVLW	0x02
004e10   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
004e12   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00113_DS_:
                                           ;	.line	25; event.c	if (BitTst(key, 1)) {
004e14   a202     btfss   0x02, 0x1, 0x0   	BTFSS	r0x02, 1
004e16   d003     bra     0x004e1e         	BRA	_00115_DS_
                                           ;	.line	26; event.c	ev = EV_ENTER;
004e18   0e04     movlw   0x04             	MOVLW	0x04
004e1a   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
004e1c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00115_DS_:
                                           ;	.line	29; event.c	if (BitTst(key, 5)) {
004e1e   aa02     btfss   0x02, 0x5, 0x0   	BTFSS	r0x02, 5
004e20   d003     bra     0x004e28         	BRA	_00117_DS_
                                           ;	.line	30; event.c	ev = EV_DOWN;
004e22   0e01     movlw   0x01             	MOVLW	0x01
004e24   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
004e26   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00117_DS_:
                                           ;	.line	33; event.c	if (BitTst(key, 4)) {
004e28   a802     btfss   0x02, 0x4, 0x0   	BTFSS	r0x02, 4
004e2a   d002     bra     0x004e30         	BRA	_00121_DS_
                                           ;	.line	34; event.c	ev = EV_UP;
004e2c   6a00     clrf    0x00, 0x0        	CLRF	r0x00
004e2e   6a01     clrf    0x01, 0x0        	CLRF	r0x01
                                           _00121_DS_:
                                           ;	.line	38; event.c	key_ant = key;
004e30   c002     movff   0x002, 0x082     	MOVFF	r0x02, _key_ant
004e32   f082
004e34   c003     movff   0x003, 0x083     	MOVFF	r0x03, (_key_ant + 1)
004e36   f083
                                           ;	.line	39; event.c	return ev;
004e38   c001     movff   0x001, 0xff3     	MOVFF	r0x01, PRODL
004e3a   fff3
004e3c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
004e3e   cfe4     movff   0xfe4, 0x005     	MOVFF	PREINC1, r0x05
004e40   f005
004e42   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
004e44   f004
004e46   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
004e48   f003
004e4a   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
004e4c   f002
004e4e   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
004e50   f001
004e52   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
004e54   f000
004e56   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
004e58   ffd9
004e5a   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_event__eventInit	code
                                           _eventInit:
                                           ;	.line	7; event.c	void eventInit(void) {
005dfc   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005dfe   ffe5
005e00   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005e02   ffd9
                                           ;	.line	8; event.c	kpInit();
005e04   ecb7     call    0x005b6e, 0x0    	CALL	_kpInit
005e06   f02d
005e08   0100     movlb   0x0              	BANKSEL	_key_ant
                                           ;	.line	9; event.c	key_ant = 0;
005e0a   6b82     clrf    0x82, 0x1        	CLRF	_key_ant, B
005e0c   0100     movlb   0x0              	BANKSEL	(_key_ant + 1)
005e0e   6b83     clrf    0x83, 0x1        	CLRF	(_key_ant + 1), B
005e10   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005e12   ffd9
005e14   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	  188 (0x00bc) bytes ( 0.14%)
                                           ;           	   94 (0x005e) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.16%)
                                           ; access size:	    6 (0x0006) bytes


                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.6.0 #9615 (MINGW64)
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           	radix	dec


                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_smInit
                                           	global	_getPeriodo
                                           	global	_smLoop
                                           	global	_changeEvento

                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_varInit
                                           	extern	_getState
                                           	extern	_setState
                                           	extern	_getTime
                                           	extern	_setTime
                                           	extern	_getMult
                                           	extern	_setMult
                                           	extern	_getAlarmLevel
                                           	extern	_setAlarmLevel
                                           	extern	_getLanguage
                                           	extern	_setLanguage
                                           	extern	_getSenhaStatus
                                           	extern	_enableSenha
                                           	extern	_getSenha_i
                                           	extern	_getSenha_try
                                           	extern	_getTestResult
                                           	extern	_setTestResult
                                           	extern	_testSenha
                                           	extern	_setSenha
                                           	extern	_eventRead
                                           	extern	_outputPrint
                                           	extern	_rtcGetMinutes
                                           	extern	_rtcGetHours
                                           	extern	_rtcGetDate
                                           	extern	_rtcGetMonth
                                           	extern	_rtcGetYear
                                           	extern	_rtcPutMinutes
                                           	extern	_rtcPutHours
                                           	extern	_rtcPutDate
                                           	extern	_rtcPutMonth
                                           	extern	_rtcPutYear
                                           	extern	__mulint
                                           	extern	__divsint
                                           	extern	__modsint

                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3


                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1

                                           udata_stateMachine_0	udata
                                           _senha	res	1

                                           udata_stateMachine_1	udata
                                           _hora	res	1

                                           udata_stateMachine_2	udata
                                           _min	res	1

                                           udata_stateMachine_3	udata
                                           _dia	res	1

                                           udata_stateMachine_4	udata
                                           _mes	res	1

                                           udata_stateMachine_5	udata
                                           _ano	res	1

                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_stateMachine__smLoop	code
                                           _smLoop:
                                           ;	.line	56; stateMachine.c	void smLoop(void) {
002444   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
002446   ffe5
002448   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00244a   ffd9
00244c   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
00244e   ffe5
002450   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
002452   ffe5
002454   c002     movff   0x002, 0xfe5     	MOVFF	r0x02, POSTDEC1
002456   ffe5
002458   c003     movff   0x003, 0xfe5     	MOVFF	r0x03, POSTDEC1
00245a   ffe5
00245c   c004     movff   0x004, 0xfe5     	MOVFF	r0x04, POSTDEC1
00245e   ffe5
                                           ;	.line	60; stateMachine.c	evento = eventRead();
002460   ecdd     call    0x004dba, 0x0    	CALL	_eventRead
002462   f026
002464   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
002466   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
002468   f001
                                           ;	.line	61; stateMachine.c	changeEvento(evento); //atribui um valor para cara evento(usado pela senha))
00246a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00246c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00246e   ec73     call    0x0058e6, 0x0    	CALL	_changeEvento
002470   f02c
002472   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	63; stateMachine.c	switch (getState()) {
002474   ec81     call    0x005f02, 0x0    	CALL	_getState
002476   f02f
002478   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00247a   0e22     movlw   0x22             	MOVLW	0x22
00247c   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
00247e   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002480   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002482   f01b
002484   6afa     clrf    0xfa, 0x0        	CLRF	PCLATH
002486   6afb     clrf    0xfb, 0x0        	CLRF	PCLATU
002488   3401     rlcf    0x01, 0x0, 0x0   	RLCF	r0x01, W
00248a   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
00248c   34e8     rlcf    0xe8, 0x0, 0x0   	RLCF	WREG, W
00248e   36fa     rlcf    0xfa, 0x1, 0x0   	RLCF	PCLATH, F
002490   0bfc     andlw   0xfc             	ANDLW	0xfc
002492   0fa2     addlw   0xa2             	ADDLW	LOW(_01007_DS_)
002494   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002496   0e24     movlw   0x24             	MOVLW	HIGH(_01007_DS_)
002498   22fa     addwfc  0xfa, 0x1, 0x0   	ADDWFC	PCLATH, F
00249a   0e00     movlw   0x00             	MOVLW	UPPER(_01007_DS_)
00249c   22fb     addwfc  0xfb, 0x1, 0x0   	ADDWFC	PCLATU, F
00249e   50e4     movf    0xe4, 0x0, 0x0   	MOVF	PREINC1, W
0024a0   6ef9     movwf   0xf9, 0x0        	MOVWF	PCL
                                           _01007_DS_:
0024a2   ef95     goto    0x00252a         	GOTO	_00190_DS_
0024a4   f012
0024a6   efb5     goto    0x00256a         	GOTO	_00193_DS_
0024a8   f012
0024aa   eff8     goto    0x0025f0         	GOTO	_00199_DS_
0024ac   f012
0024ae   ef1e     goto    0x00263c         	GOTO	_00209_DS_
0024b0   f013
0024b2   ef3f     goto    0x00267e         	GOTO	_00218_DS_
0024b4   f013
0024b6   efe0     goto    0x0027c0         	GOTO	_00232_DS_
0024b8   f013
0024ba   ef79     goto    0x0028f2         	GOTO	_00246_DS_
0024bc   f014
0024be   ef1a     goto    0x002a34         	GOTO	_00260_DS_
0024c0   f015
0024c2   efb3     goto    0x002b66         	GOTO	_00274_DS_
0024c4   f015
0024c6   efd4     goto    0x002ba8         	GOTO	_00283_DS_
0024c8   f015
0024ca   ef17     goto    0x002c2e         	GOTO	_00294_DS_
0024cc   f016
0024ce   ef57     goto    0x002cae         	GOTO	_00305_DS_
0024d0   f016
0024d2   efc5     goto    0x002d8a         	GOTO	_00318_DS_
0024d4   f016
0024d6   efeb     goto    0x002dd6         	GOTO	_00328_DS_
0024d8   f016
0024da   ef0e     goto    0x002e1c         	GOTO	_00335_DS_
0024dc   f017
0024de   ef34     goto    0x002e68         	GOTO	_00345_DS_
0024e0   f017
0024e2   ef55     goto    0x002eaa         	GOTO	_00354_DS_
0024e4   f017
0024e6   efbd     goto    0x002f7a         	GOTO	_00367_DS_
0024e8   f017
0024ea   ef2b     goto    0x003056         	GOTO	_00382_DS_
0024ec   f018
0024ee   ef94     goto    0x003128         	GOTO	_00395_DS_
0024f0   f018
0024f2   efb5     goto    0x00316a         	GOTO	_00404_DS_
0024f4   f018
0024f6   ef26     goto    0x00324c         	GOTO	_00419_DS_
0024f8   f019
0024fa   ef9b     goto    0x003336         	GOTO	_00434_DS_
0024fc   f019
0024fe   ef0b     goto    0x003416         	GOTO	_00449_DS_
002500   f01a
002502   ef2f     goto    0x00345e         	GOTO	_00459_DS_
002504   f01a
002506   ef4e     goto    0x00349c         	GOTO	_00468_DS_
002508   f01a
00250a   ef7b     goto    0x0034f6         	GOTO	_00473_DS_
00250c   f01a
00250e   efdb     goto    0x0035b6         	GOTO	_00488_DS_
002510   f01a
002512   effa     goto    0x0035f4         	GOTO	_00497_DS_
002514   f01a
002516   ef1f     goto    0x00363e         	GOTO	_00502_DS_
002518   f01b
00251a   ef46     goto    0x00368c         	GOTO	_00511_DS_
00251c   f01b
00251e   ef6d     goto    0x0036da         	GOTO	_00520_DS_
002520   f01b
002522   ef99     goto    0x003732         	GOTO	_00530_DS_
002524   f01b
002526   efd5     goto    0x0035aa         	GOTO	_00487_DS_
002528   f01a
                                           _00190_DS_:
                                           ;	.line	65; stateMachine.c	hora = rtcGetHours();
00252a   ec0c     call    0x005a18, 0x0    	CALL	_rtcGetHours
00252c   f02d
00252e   0100     movlb   0x0              	BANKSEL	_hora
002530   6f8f     movwf   0x8f, 0x1        	MOVWF	_hora, B
                                           ;	.line	66; stateMachine.c	min = rtcGetMinutes();
002532   ec2f     call    0x005a5e, 0x0    	CALL	_rtcGetMinutes
002534   f02d
002536   0100     movlb   0x0              	BANKSEL	_min
002538   6f90     movwf   0x90, 0x1        	MOVWF	_min, B
                                           ;	.line	67; stateMachine.c	dia = rtcGetDate();
00253a   ece9     call    0x0059d2, 0x0    	CALL	_rtcGetDate
00253c   f02c
00253e   0100     movlb   0x0              	BANKSEL	_dia
002540   6f91     movwf   0x91, 0x1        	MOVWF	_dia, B
                                           ;	.line	68; stateMachine.c	mes = rtcGetMonth();
002542   ec75     call    0x005aea, 0x0    	CALL	_rtcGetMonth
002544   f02d
002546   0100     movlb   0x0              	BANKSEL	_mes
002548   6f92     movwf   0x92, 0x1        	MOVWF	_mes, B
                                           ;	.line	69; stateMachine.c	ano = rtcGetYear();
00254a   ecc6     call    0x00598c, 0x0    	CALL	_rtcGetYear
00254c   f02c
00254e   0100     movlb   0x0              	BANKSEL	_ano
002550   6f93     movwf   0x93, 0x1        	MOVWF	_ano, B
                                           ;	.line	71; stateMachine.c	if (evento == EV_ENTER) {
002552   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002554   0a04     xorlw   0x04             	XORLW	0x04
002556   e002     bz      0x00255c         	BZ	_01009_DS_
002558   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00255a   f01b
                                           _01009_DS_:
                                           ;	.line	72; stateMachine.c	setState(SECURITY_CONFIG);
00255c   0e01     movlw   0x01             	MOVLW	0x01
00255e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002560   ec65     call    0x005eca, 0x0    	CALL	_setState
002562   f02f
002564   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	75; stateMachine.c	break;
002566   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002568   f01b
                                           _00193_DS_:
                                           ;	.line	82; stateMachine.c	if(getSenha_try() == 3){
00256a   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
00256c   f02f
00256e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002570   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002572   f002
002574   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002576   0a03     xorlw   0x03             	XORLW	0x03
002578   e102     bnz     0x00257e         	BNZ	_01010_DS_
00257a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00257c   e001     bz      0x002580         	BZ	_01011_DS_
                                           _01010_DS_:
00257e   d005     bra     0x00258a         	BRA	_00195_DS_
                                           _01011_DS_:
                                           ;	.line	83; stateMachine.c	setState(STATE_OP);
002580   0e00     movlw   0x00             	MOVLW	0x00
002582   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002584   ec65     call    0x005eca, 0x0    	CALL	_setState
002586   f02f
002588   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00195_DS_:
                                           ;	.line	85; stateMachine.c	if (!getSenhaStatus() || testSenha(senha) == 1) {
00258a   ec44     call    0x005e88, 0x0    	CALL	_getSenhaStatus
00258c   f02f
00258e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002590   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002592   f002
002594   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002596   1002     iorwf   0x02, 0x0, 0x0   	IORWF	r0x02, W
002598   e010     bz      0x0025ba         	BZ	_00196_DS_
00259a   0100     movlb   0x0              	BANKSEL	_senha
00259c   518e     movf    0x8e, 0x0, 0x1   	MOVF	_senha, W, B
00259e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025a0   ec02     call    0x004004, 0x0    	CALL	_testSenha
0025a2   f020
0025a4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0025a6   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0025a8   f002
0025aa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0025ac   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0025ae   0a01     xorlw   0x01             	XORLW	0x01
0025b0   e102     bnz     0x0025b6         	BNZ	_01012_DS_
0025b2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0025b4   e002     bz      0x0025ba         	BZ	_00196_DS_
                                           _01012_DS_:
0025b6   efd3     goto    0x0037a6         	GOTO	_00535_DS_
0025b8   f01b
                                           _00196_DS_:
                                           ;	.line	86; stateMachine.c	outputPrint(getState(), getLanguage());
0025ba   ec81     call    0x005f02, 0x0    	CALL	_getState
0025bc   f02f
0025be   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0025c0   6a02     clrf    0x02, 0x0        	CLRF	r0x02
0025c2   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
0025c4   f02f
0025c6   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
0025c8   6a04     clrf    0x04, 0x0        	CLRF	r0x04
0025ca   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
0025cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025ce   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0025d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025d2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0025d4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025d6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0025d8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025da   ec02     call    0x000004, 0x0    	CALL	_outputPrint
0025dc   f000
0025de   0e04     movlw   0x04             	MOVLW	0x04
0025e0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	87; stateMachine.c	setState(STATE_ALARME);    
0025e2   0e02     movlw   0x02             	MOVLW	0x02
0025e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025e6   ec65     call    0x005eca, 0x0    	CALL	_setState
0025e8   f02f
0025ea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	90; stateMachine.c	break;    
0025ec   efd3     goto    0x0037a6         	GOTO	_00535_DS_
0025ee   f01b
                                           _00199_DS_:
                                           ;	.line	94; stateMachine.c	if (evento == EV_ENTER) {
0025f0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0025f2   0a04     xorlw   0x04             	XORLW	0x04
0025f4   e105     bnz     0x002600         	BNZ	_00201_DS_
                                           ;	.line	95; stateMachine.c	setState(CONFIG_ALARME);
0025f6   0e03     movlw   0x03             	MOVLW	0x03
0025f8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0025fa   ec65     call    0x005eca, 0x0    	CALL	_setState
0025fc   f02f
0025fe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00201_DS_:
                                           ;	.line	97; stateMachine.c	if (evento == EV_LEFT || evento == EV_RIGHT) {
002600   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002602   0a02     xorlw   0x02             	XORLW	0x02
002604   e003     bz      0x00260c         	BZ	_00202_DS_
002606   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002608   0a03     xorlw   0x03             	XORLW	0x03
00260a   e105     bnz     0x002616         	BNZ	_00203_DS_
                                           _00202_DS_:
                                           ;	.line	98; stateMachine.c	setState(STATE_OP);
00260c   0e00     movlw   0x00             	MOVLW	0x00
00260e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002610   ec65     call    0x005eca, 0x0    	CALL	_setState
002612   f02f
002614   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00203_DS_:
                                           ;	.line	100; stateMachine.c	if (evento == EV_DOWN) {
002616   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002618   0a01     xorlw   0x01             	XORLW	0x01
00261a   e105     bnz     0x002626         	BNZ	_00206_DS_
                                           ;	.line	101; stateMachine.c	setState(STATE_IDIOMA);
00261c   0e0c     movlw   0x0c             	MOVLW	0x0c
00261e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002620   ec65     call    0x005eca, 0x0    	CALL	_setState
002622   f02f
002624   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00206_DS_:
                                           ;	.line	103; stateMachine.c	if (evento == EV_UP) {
002626   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002628   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00262a   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00262c   f01b
                                           ;	.line	104; stateMachine.c	setState(STATE_RESET);
00262e   0e1f     movlw   0x1f             	MOVLW	0x1f
002630   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002632   ec65     call    0x005eca, 0x0    	CALL	_setState
002634   f02f
002636   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	106; stateMachine.c	break;       
002638   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00263a   f01b
                                           _00209_DS_:
                                           ;	.line	110; stateMachine.c	if (evento == EV_ENTER) {
00263c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00263e   0a04     xorlw   0x04             	XORLW	0x04
002640   e105     bnz     0x00264c         	BNZ	_00211_DS_
                                           ;	.line	111; stateMachine.c	setState(ALARME_ALTO_DEC);
002642   0e04     movlw   0x04             	MOVLW	0x04
002644   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002646   ec65     call    0x005eca, 0x0    	CALL	_setState
002648   f02f
00264a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00211_DS_:
                                           ;	.line	113; stateMachine.c	if (evento == EV_LEFT || evento == EV_RIGHT) {
00264c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00264e   0a02     xorlw   0x02             	XORLW	0x02
002650   e003     bz      0x002658         	BZ	_00212_DS_
002652   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002654   0a03     xorlw   0x03             	XORLW	0x03
002656   e105     bnz     0x002662         	BNZ	_00213_DS_
                                           _00212_DS_:
                                           ;	.line	114; stateMachine.c	setState(STATE_ALARME);
002658   0e02     movlw   0x02             	MOVLW	0x02
00265a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00265c   ec65     call    0x005eca, 0x0    	CALL	_setState
00265e   f02f
002660   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00213_DS_:
                                           ;	.line	116; stateMachine.c	if (evento == EV_DOWN || evento == EV_UP) {
002662   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002664   0a01     xorlw   0x01             	XORLW	0x01
002666   e004     bz      0x002670         	BZ	_00215_DS_
002668   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00266a   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
00266c   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00266e   f01b
                                           _00215_DS_:
                                           ;	.line	117; stateMachine.c	setState(STATE_TEMPO);
002670   0e08     movlw   0x08             	MOVLW	0x08
002672   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002674   ec65     call    0x005eca, 0x0    	CALL	_setState
002676   f02f
002678   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	119; stateMachine.c	break;
00267a   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00267c   f01b
                                           _00218_DS_:
                                           ;	.line	123; stateMachine.c	if (evento == EV_UP && getAlarmLevel(2)<=90) {
00267e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002680   e12d     bnz     0x0026dc         	BNZ	_00220_DS_
002682   0e00     movlw   0x00             	MOVLW	0x00
002684   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002686   0e02     movlw   0x02             	MOVLW	0x02
002688   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00268a   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
00268c   f02c
00268e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002690   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002692   f002
002694   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002696   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002698   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00269a   0f80     addlw   0x80             	ADDLW	0x80
00269c   0f80     addlw   0x80             	ADDLW	0x80
00269e   e102     bnz     0x0026a4         	BNZ	_01030_DS_
0026a0   0e5b     movlw   0x5b             	MOVLW	0x5b
0026a2   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01030_DS_:
0026a4   e21b     bc      0x0026dc         	BC	_00220_DS_
                                           ;	.line	124; stateMachine.c	setAlarmLevel(getAlarmLevel(2) + 10, 2);
0026a6   0e00     movlw   0x00             	MOVLW	0x00
0026a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026aa   0e02     movlw   0x02             	MOVLW	0x02
0026ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026ae   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
0026b0   f02c
0026b2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0026b4   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0026b6   f002
0026b8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0026ba   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0026bc   0e0a     movlw   0x0a             	MOVLW	0x0a
0026be   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0026c0   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
0026c2   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
0026c4   0e00     movlw   0x00             	MOVLW	0x00
0026c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026c8   0e02     movlw   0x02             	MOVLW	0x02
0026ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026cc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0026ce   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0026d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026d4   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
0026d6   f02a
0026d8   0e04     movlw   0x04             	MOVLW	0x04
0026da   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00220_DS_:
                                           ;	.line	126; stateMachine.c	if (evento == EV_DOWN && getAlarmLevel(2)>=10  && (getAlarmLevel(1)+10) < getAlarmLevel(2)) {
0026dc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0026de   0a01     xorlw   0x01             	XORLW	0x01
0026e0   e001     bz      0x0026e4         	BZ	_01032_DS_
0026e2   d052     bra     0x002788         	BRA	_00223_DS_
                                           _01032_DS_:
0026e4   0e00     movlw   0x00             	MOVLW	0x00
0026e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026e8   0e02     movlw   0x02             	MOVLW	0x02
0026ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0026ec   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
0026ee   f02c
0026f0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0026f2   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0026f4   f002
0026f6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0026f8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0026fa   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0026fc   0f80     addlw   0x80             	ADDLW	0x80
0026fe   0f80     addlw   0x80             	ADDLW	0x80
002700   e102     bnz     0x002706         	BNZ	_01033_DS_
002702   0e0a     movlw   0x0a             	MOVLW	0x0a
002704   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01033_DS_:
002706   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002708   d03f     bra     0x002788         	BRA	_00223_DS_
00270a   0e00     movlw   0x00             	MOVLW	0x00
00270c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00270e   0e01     movlw   0x01             	MOVLW	0x01
002710   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002712   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002714   f02c
002716   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002718   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00271a   f002
00271c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00271e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002720   0e0a     movlw   0x0a             	MOVLW	0x0a
002722   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002724   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002726   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002728   0e00     movlw   0x00             	MOVLW	0x00
00272a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00272c   0e02     movlw   0x02             	MOVLW	0x02
00272e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002730   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002732   f02c
002734   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002736   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
002738   f004
00273a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00273c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00273e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002740   0f80     addlw   0x80             	ADDLW	0x80
002742   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
002744   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002746   0f80     addlw   0x80             	ADDLW	0x80
002748   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
00274a   e102     bnz     0x002750         	BNZ	_01034_DS_
00274c   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00274e   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01034_DS_:
002750   e21b     bc      0x002788         	BC	_00223_DS_
                                           ;	.line	127; stateMachine.c	setAlarmLevel(getAlarmLevel(2) - 10, 2);
002752   0e00     movlw   0x00             	MOVLW	0x00
002754   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002756   0e02     movlw   0x02             	MOVLW	0x02
002758   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00275a   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
00275c   f02c
00275e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002760   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002762   f002
002764   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002766   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002768   0ef6     movlw   0xf6             	MOVLW	0xf6
00276a   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00276c   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
00276e   0602     decf    0x02, 0x1, 0x0   	DECF	r0x02, F
002770   0e00     movlw   0x00             	MOVLW	0x00
002772   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002774   0e02     movlw   0x02             	MOVLW	0x02
002776   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002778   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00277a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00277c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00277e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002780   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
002782   f02a
002784   0e04     movlw   0x04             	MOVLW	0x04
002786   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00223_DS_:
                                           ;	.line	130; stateMachine.c	if (evento == EV_RIGHT) {
002788   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00278a   0a03     xorlw   0x03             	XORLW	0x03
00278c   e105     bnz     0x002798         	BNZ	_00227_DS_
                                           ;	.line	131; stateMachine.c	setState(ALARME_ALTO_UNI);
00278e   0e05     movlw   0x05             	MOVLW	0x05
002790   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002792   ec65     call    0x005eca, 0x0    	CALL	_setState
002794   f02f
002796   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00227_DS_:
                                           ;	.line	134; stateMachine.c	if (evento == EV_LEFT) {
002798   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00279a   0a02     xorlw   0x02             	XORLW	0x02
00279c   e105     bnz     0x0027a8         	BNZ	_00229_DS_
                                           ;	.line	135; stateMachine.c	setState(ALARME_BAIXO_UNI);
00279e   0e07     movlw   0x07             	MOVLW	0x07
0027a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027a2   ec65     call    0x005eca, 0x0    	CALL	_setState
0027a4   f02f
0027a6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00229_DS_:
                                           ;	.line	137; stateMachine.c	if (evento == EV_ENTER) {
0027a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0027aa   0a04     xorlw   0x04             	XORLW	0x04
0027ac   e002     bz      0x0027b2         	BZ	_01040_DS_
0027ae   efd3     goto    0x0037a6         	GOTO	_00535_DS_
0027b0   f01b
                                           _01040_DS_:
                                           ;	.line	138; stateMachine.c	setState(CONFIG_ALARME);
0027b2   0e03     movlw   0x03             	MOVLW	0x03
0027b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027b6   ec65     call    0x005eca, 0x0    	CALL	_setState
0027b8   f02f
0027ba   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	140; stateMachine.c	break;
0027bc   efd3     goto    0x0037a6         	GOTO	_00535_DS_
0027be   f01b
                                           _00232_DS_:
                                           ;	.line	144; stateMachine.c	if (evento == EV_UP && getAlarmLevel(2)<100) {
0027c0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0027c2   e12b     bnz     0x00281a         	BNZ	_00234_DS_
0027c4   0e00     movlw   0x00             	MOVLW	0x00
0027c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027c8   0e02     movlw   0x02             	MOVLW	0x02
0027ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027cc   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
0027ce   f02c
0027d0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0027d2   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0027d4   f002
0027d6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0027d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0027da   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0027dc   0f80     addlw   0x80             	ADDLW	0x80
0027de   0f80     addlw   0x80             	ADDLW	0x80
0027e0   e102     bnz     0x0027e6         	BNZ	_01041_DS_
0027e2   0e64     movlw   0x64             	MOVLW	0x64
0027e4   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01041_DS_:
0027e6   e219     bc      0x00281a         	BC	_00234_DS_
                                           ;	.line	145; stateMachine.c	setAlarmLevel(getAlarmLevel(2) + 1, 2);
0027e8   0e00     movlw   0x00             	MOVLW	0x00
0027ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027ec   0e02     movlw   0x02             	MOVLW	0x02
0027ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0027f0   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
0027f2   f02c
0027f4   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0027f6   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0027f8   f002
0027fa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0027fc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0027fe   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
002800   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002802   0e00     movlw   0x00             	MOVLW	0x00
002804   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002806   0e02     movlw   0x02             	MOVLW	0x02
002808   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00280a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00280c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00280e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002810   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002812   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
002814   f02a
002816   0e04     movlw   0x04             	MOVLW	0x04
002818   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00234_DS_:
                                           ;	.line	147; stateMachine.c	if (evento == EV_DOWN && getAlarmLevel(2)>0 && getAlarmLevel(1)<getAlarmLevel(2)) {
00281a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00281c   0a01     xorlw   0x01             	XORLW	0x01
00281e   e001     bz      0x002822         	BZ	_01043_DS_
002820   d04c     bra     0x0028ba         	BRA	_00237_DS_
                                           _01043_DS_:
002822   0e00     movlw   0x00             	MOVLW	0x00
002824   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002826   0e02     movlw   0x02             	MOVLW	0x02
002828   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00282a   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
00282c   f02c
00282e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002830   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002832   f002
002834   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002836   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002838   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00283a   0f80     addlw   0x80             	ADDLW	0x80
00283c   0f80     addlw   0x80             	ADDLW	0x80
00283e   e102     bnz     0x002844         	BNZ	_01044_DS_
002840   0e01     movlw   0x01             	MOVLW	0x01
002842   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01044_DS_:
002844   e33a     bnc     0x0028ba         	BNC	_00237_DS_
002846   0e00     movlw   0x00             	MOVLW	0x00
002848   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00284a   0e01     movlw   0x01             	MOVLW	0x01
00284c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00284e   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002850   f02c
002852   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002854   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002856   f002
002858   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00285a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00285c   0e00     movlw   0x00             	MOVLW	0x00
00285e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002860   0e02     movlw   0x02             	MOVLW	0x02
002862   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002864   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002866   f02c
002868   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
00286a   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
00286c   f004
00286e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002870   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002872   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002874   0f80     addlw   0x80             	ADDLW	0x80
002876   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
002878   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00287a   0f80     addlw   0x80             	ADDLW	0x80
00287c   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
00287e   e102     bnz     0x002884         	BNZ	_01045_DS_
002880   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002882   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01045_DS_:
002884   e21a     bc      0x0028ba         	BC	_00237_DS_
                                           ;	.line	148; stateMachine.c	setAlarmLevel(getAlarmLevel(2) - 1, 2);
002886   0e00     movlw   0x00             	MOVLW	0x00
002888   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00288a   0e02     movlw   0x02             	MOVLW	0x02
00288c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00288e   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002890   f02c
002892   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002894   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002896   f002
002898   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00289a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00289c   0eff     movlw   0xff             	MOVLW	0xff
00289e   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0028a0   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
0028a2   0e00     movlw   0x00             	MOVLW	0x00
0028a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028a6   0e02     movlw   0x02             	MOVLW	0x02
0028a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028aa   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0028ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028ae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0028b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028b2   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
0028b4   f02a
0028b6   0e04     movlw   0x04             	MOVLW	0x04
0028b8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00237_DS_:
                                           ;	.line	151; stateMachine.c	if (evento == EV_RIGHT) {
0028ba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028bc   0a03     xorlw   0x03             	XORLW	0x03
0028be   e105     bnz     0x0028ca         	BNZ	_00241_DS_
                                           ;	.line	152; stateMachine.c	setState(ALARME_BAIXO_DEC);
0028c0   0e06     movlw   0x06             	MOVLW	0x06
0028c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028c4   ec65     call    0x005eca, 0x0    	CALL	_setState
0028c6   f02f
0028c8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00241_DS_:
                                           ;	.line	154; stateMachine.c	if (evento == EV_LEFT) {
0028ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028cc   0a02     xorlw   0x02             	XORLW	0x02
0028ce   e105     bnz     0x0028da         	BNZ	_00243_DS_
                                           ;	.line	155; stateMachine.c	setState(ALARME_ALTO_DEC);
0028d0   0e04     movlw   0x04             	MOVLW	0x04
0028d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028d4   ec65     call    0x005eca, 0x0    	CALL	_setState
0028d6   f02f
0028d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00243_DS_:
                                           ;	.line	157; stateMachine.c	if (evento == EV_ENTER) {
0028da   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028dc   0a04     xorlw   0x04             	XORLW	0x04
0028de   e002     bz      0x0028e4         	BZ	_01051_DS_
0028e0   efd3     goto    0x0037a6         	GOTO	_00535_DS_
0028e2   f01b
                                           _01051_DS_:
                                           ;	.line	158; stateMachine.c	setState(CONFIG_ALARME);
0028e4   0e03     movlw   0x03             	MOVLW	0x03
0028e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028e8   ec65     call    0x005eca, 0x0    	CALL	_setState
0028ea   f02f
0028ec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	160; stateMachine.c	break;
0028ee   efd3     goto    0x0037a6         	GOTO	_00535_DS_
0028f0   f01b
                                           _00246_DS_:
                                           ;	.line	164; stateMachine.c	if (evento == EV_UP && getAlarmLevel(1)<=90 && getAlarmLevel(1) <(getAlarmLevel(2)-10)) {
0028f2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0028f4   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
0028f6   d052     bra     0x00299c         	BRA	_00248_DS_
0028f8   0e00     movlw   0x00             	MOVLW	0x00
0028fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0028fc   0e01     movlw   0x01             	MOVLW	0x01
0028fe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002900   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002902   f02c
002904   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002906   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002908   f002
00290a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00290c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00290e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002910   0f80     addlw   0x80             	ADDLW	0x80
002912   0f80     addlw   0x80             	ADDLW	0x80
002914   e102     bnz     0x00291a         	BNZ	_01052_DS_
002916   0e5b     movlw   0x5b             	MOVLW	0x5b
002918   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01052_DS_:
00291a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00291c   d03f     bra     0x00299c         	BRA	_00248_DS_
00291e   0e00     movlw   0x00             	MOVLW	0x00
002920   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002922   0e01     movlw   0x01             	MOVLW	0x01
002924   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002926   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002928   f02c
00292a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00292c   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00292e   f002
002930   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002932   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002934   0e00     movlw   0x00             	MOVLW	0x00
002936   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002938   0e02     movlw   0x02             	MOVLW	0x02
00293a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00293c   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
00293e   f02c
002940   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002942   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
002944   f004
002946   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002948   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00294a   0ef6     movlw   0xf6             	MOVLW	0xf6
00294c   2603     addwf   0x03, 0x1, 0x0   	ADDWF	r0x03, F
00294e   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002950   0604     decf    0x04, 0x1, 0x0   	DECF	r0x04, F
002952   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002954   0f80     addlw   0x80             	ADDLW	0x80
002956   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
002958   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
00295a   0f80     addlw   0x80             	ADDLW	0x80
00295c   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
00295e   e102     bnz     0x002964         	BNZ	_01053_DS_
002960   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002962   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01053_DS_:
002964   e21b     bc      0x00299c         	BC	_00248_DS_
                                           ;	.line	165; stateMachine.c	setAlarmLevel(getAlarmLevel(1) + 10, 1);
002966   0e00     movlw   0x00             	MOVLW	0x00
002968   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00296a   0e01     movlw   0x01             	MOVLW	0x01
00296c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00296e   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002970   f02c
002972   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002974   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002976   f002
002978   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00297a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
00297c   0e0a     movlw   0x0a             	MOVLW	0x0a
00297e   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002980   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002982   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002984   0e00     movlw   0x00             	MOVLW	0x00
002986   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002988   0e01     movlw   0x01             	MOVLW	0x01
00298a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00298c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00298e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002990   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002992   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002994   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
002996   f02a
002998   0e04     movlw   0x04             	MOVLW	0x04
00299a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00248_DS_:
                                           ;	.line	167; stateMachine.c	if (evento == EV_DOWN && getAlarmLevel(1)>=10) {
00299c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00299e   0a01     xorlw   0x01             	XORLW	0x01
0029a0   e12d     bnz     0x0029fc         	BNZ	_00252_DS_
0029a2   0e00     movlw   0x00             	MOVLW	0x00
0029a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029a6   0e01     movlw   0x01             	MOVLW	0x01
0029a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029aa   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
0029ac   f02c
0029ae   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0029b0   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0029b2   f002
0029b4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0029b6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0029b8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0029ba   0f80     addlw   0x80             	ADDLW	0x80
0029bc   0f80     addlw   0x80             	ADDLW	0x80
0029be   e102     bnz     0x0029c4         	BNZ	_01056_DS_
0029c0   0e0a     movlw   0x0a             	MOVLW	0x0a
0029c2   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01056_DS_:
0029c4   e31b     bnc     0x0029fc         	BNC	_00252_DS_
                                           ;	.line	168; stateMachine.c	setAlarmLevel(getAlarmLevel(1) - 10, 1);
0029c6   0e00     movlw   0x00             	MOVLW	0x00
0029c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029ca   0e01     movlw   0x01             	MOVLW	0x01
0029cc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029ce   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
0029d0   f02c
0029d2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0029d4   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0029d6   f002
0029d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0029da   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0029dc   0ef6     movlw   0xf6             	MOVLW	0xf6
0029de   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
0029e0   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0029e2   0602     decf    0x02, 0x1, 0x0   	DECF	r0x02, F
0029e4   0e00     movlw   0x00             	MOVLW	0x00
0029e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029e8   0e01     movlw   0x01             	MOVLW	0x01
0029ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029ec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0029ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029f0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0029f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0029f4   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
0029f6   f02a
0029f8   0e04     movlw   0x04             	MOVLW	0x04
0029fa   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00252_DS_:
                                           ;	.line	171; stateMachine.c	if (evento == EV_RIGHT) {
0029fc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0029fe   0a03     xorlw   0x03             	XORLW	0x03
002a00   e105     bnz     0x002a0c         	BNZ	_00255_DS_
                                           ;	.line	172; stateMachine.c	setState(ALARME_BAIXO_UNI);
002a02   0e07     movlw   0x07             	MOVLW	0x07
002a04   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a06   ec65     call    0x005eca, 0x0    	CALL	_setState
002a08   f02f
002a0a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00255_DS_:
                                           ;	.line	174; stateMachine.c	if (evento == EV_LEFT) {
002a0c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002a0e   0a02     xorlw   0x02             	XORLW	0x02
002a10   e105     bnz     0x002a1c         	BNZ	_00257_DS_
                                           ;	.line	175; stateMachine.c	setState(ALARME_ALTO_UNI);
002a12   0e05     movlw   0x05             	MOVLW	0x05
002a14   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a16   ec65     call    0x005eca, 0x0    	CALL	_setState
002a18   f02f
002a1a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00257_DS_:
                                           ;	.line	177; stateMachine.c	if (evento == EV_ENTER) {
002a1c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002a1e   0a04     xorlw   0x04             	XORLW	0x04
002a20   e002     bz      0x002a26         	BZ	_01062_DS_
002a22   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002a24   f01b
                                           _01062_DS_:
                                           ;	.line	178; stateMachine.c	setState(CONFIG_ALARME);
002a26   0e03     movlw   0x03             	MOVLW	0x03
002a28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a2a   ec65     call    0x005eca, 0x0    	CALL	_setState
002a2c   f02f
002a2e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	180; stateMachine.c	break;
002a30   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002a32   f01b
                                           _00260_DS_:
                                           ;	.line	184; stateMachine.c	if (evento == EV_UP && getAlarmLevel(1)<100 && getAlarmLevel(1) <getAlarmLevel(2)) {
002a34   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002a36   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
002a38   d04b     bra     0x002ad0         	BRA	_00262_DS_
002a3a   0e00     movlw   0x00             	MOVLW	0x00
002a3c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a3e   0e01     movlw   0x01             	MOVLW	0x01
002a40   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a42   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002a44   f02c
002a46   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002a48   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002a4a   f002
002a4c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002a4e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002a50   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002a52   0f80     addlw   0x80             	ADDLW	0x80
002a54   0f80     addlw   0x80             	ADDLW	0x80
002a56   e102     bnz     0x002a5c         	BNZ	_01063_DS_
002a58   0e64     movlw   0x64             	MOVLW	0x64
002a5a   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01063_DS_:
002a5c   e239     bc      0x002ad0         	BC	_00262_DS_
002a5e   0e00     movlw   0x00             	MOVLW	0x00
002a60   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a62   0e01     movlw   0x01             	MOVLW	0x01
002a64   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a66   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002a68   f02c
002a6a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002a6c   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002a6e   f002
002a70   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002a72   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002a74   0e00     movlw   0x00             	MOVLW	0x00
002a76   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a78   0e02     movlw   0x02             	MOVLW	0x02
002a7a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002a7c   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002a7e   f02c
002a80   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
002a82   cff3     movff   0xff3, 0x004     	MOVFF	PRODL, r0x04
002a84   f004
002a86   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002a88   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002a8a   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002a8c   0f80     addlw   0x80             	ADDLW	0x80
002a8e   6ef3     movwf   0xf3, 0x0        	MOVWF	PRODL
002a90   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
002a92   0f80     addlw   0x80             	ADDLW	0x80
002a94   5cf3     subwf   0xf3, 0x0, 0x0   	SUBWF	PRODL, W
002a96   e102     bnz     0x002a9c         	BNZ	_01064_DS_
002a98   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
002a9a   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01064_DS_:
002a9c   e219     bc      0x002ad0         	BC	_00262_DS_
                                           ;	.line	185; stateMachine.c	setAlarmLevel(getAlarmLevel(1) + 1, 1);
002a9e   0e00     movlw   0x00             	MOVLW	0x00
002aa0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002aa2   0e01     movlw   0x01             	MOVLW	0x01
002aa4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002aa6   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002aa8   f02c
002aaa   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002aac   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002aae   f002
002ab0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ab2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002ab4   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
002ab6   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002ab8   0e00     movlw   0x00             	MOVLW	0x00
002aba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002abc   0e01     movlw   0x01             	MOVLW	0x01
002abe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ac0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002ac2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ac4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002ac6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ac8   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
002aca   f02a
002acc   0e04     movlw   0x04             	MOVLW	0x04
002ace   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00262_DS_:
                                           ;	.line	187; stateMachine.c	if (evento == EV_DOWN && getAlarmLevel(1)>0) {
002ad0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002ad2   0a01     xorlw   0x01             	XORLW	0x01
002ad4   e12c     bnz     0x002b2e         	BNZ	_00266_DS_
002ad6   0e00     movlw   0x00             	MOVLW	0x00
002ad8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ada   0e01     movlw   0x01             	MOVLW	0x01
002adc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ade   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002ae0   f02c
002ae2   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002ae4   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002ae6   f002
002ae8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002aea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002aec   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002aee   0f80     addlw   0x80             	ADDLW	0x80
002af0   0f80     addlw   0x80             	ADDLW	0x80
002af2   e102     bnz     0x002af8         	BNZ	_01067_DS_
002af4   0e01     movlw   0x01             	MOVLW	0x01
002af6   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01067_DS_:
002af8   e31a     bnc     0x002b2e         	BNC	_00266_DS_
                                           ;	.line	188; stateMachine.c	setAlarmLevel(getAlarmLevel(1) - 1, 1);
002afa   0e00     movlw   0x00             	MOVLW	0x00
002afc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002afe   0e01     movlw   0x01             	MOVLW	0x01
002b00   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b02   ec46     call    0x00588c, 0x0    	CALL	_getAlarmLevel
002b04   f02c
002b06   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002b08   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002b0a   f002
002b0c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002b0e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002b10   0eff     movlw   0xff             	MOVLW	0xff
002b12   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002b14   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002b16   0e00     movlw   0x00             	MOVLW	0x00
002b18   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b1a   0e01     movlw   0x01             	MOVLW	0x01
002b1c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b1e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002b20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b22   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002b24   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b26   eca2     call    0x005544, 0x0    	CALL	_setAlarmLevel
002b28   f02a
002b2a   0e04     movlw   0x04             	MOVLW	0x04
002b2c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           _00266_DS_:
                                           ;	.line	191; stateMachine.c	if (evento == EV_RIGHT) {
002b2e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b30   0a03     xorlw   0x03             	XORLW	0x03
002b32   e105     bnz     0x002b3e         	BNZ	_00269_DS_
                                           ;	.line	192; stateMachine.c	setState(ALARME_ALTO_DEC);
002b34   0e04     movlw   0x04             	MOVLW	0x04
002b36   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b38   ec65     call    0x005eca, 0x0    	CALL	_setState
002b3a   f02f
002b3c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00269_DS_:
                                           ;	.line	194; stateMachine.c	if (evento == EV_LEFT) {
002b3e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b40   0a02     xorlw   0x02             	XORLW	0x02
002b42   e105     bnz     0x002b4e         	BNZ	_00271_DS_
                                           ;	.line	195; stateMachine.c	setState(ALARME_BAIXO_DEC);
002b44   0e06     movlw   0x06             	MOVLW	0x06
002b46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b48   ec65     call    0x005eca, 0x0    	CALL	_setState
002b4a   f02f
002b4c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00271_DS_:
                                           ;	.line	197; stateMachine.c	if (evento == EV_ENTER) {
002b4e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b50   0a04     xorlw   0x04             	XORLW	0x04
002b52   e002     bz      0x002b58         	BZ	_01073_DS_
002b54   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002b56   f01b
                                           _01073_DS_:
                                           ;	.line	198; stateMachine.c	setState(CONFIG_ALARME);
002b58   0e03     movlw   0x03             	MOVLW	0x03
002b5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b5c   ec65     call    0x005eca, 0x0    	CALL	_setState
002b5e   f02f
002b60   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	200; stateMachine.c	break;            
002b62   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002b64   f01b
                                           _00274_DS_:
                                           ;	.line	204; stateMachine.c	if (evento == EV_ENTER) {
002b66   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b68   0a04     xorlw   0x04             	XORLW	0x04
002b6a   e105     bnz     0x002b76         	BNZ	_00276_DS_
                                           ;	.line	205; stateMachine.c	setState(CONFIG_TEMPO_DEC);
002b6c   0e09     movlw   0x09             	MOVLW	0x09
002b6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b70   ec65     call    0x005eca, 0x0    	CALL	_setState
002b72   f02f
002b74   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00276_DS_:
                                           ;	.line	207; stateMachine.c	if (evento == EV_LEFT || evento == EV_RIGHT) {
002b76   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b78   0a02     xorlw   0x02             	XORLW	0x02
002b7a   e003     bz      0x002b82         	BZ	_00277_DS_
002b7c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b7e   0a03     xorlw   0x03             	XORLW	0x03
002b80   e105     bnz     0x002b8c         	BNZ	_00278_DS_
                                           _00277_DS_:
                                           ;	.line	208; stateMachine.c	setState(STATE_ALARME);
002b82   0e02     movlw   0x02             	MOVLW	0x02
002b84   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b86   ec65     call    0x005eca, 0x0    	CALL	_setState
002b88   f02f
002b8a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00278_DS_:
                                           ;	.line	210; stateMachine.c	if (evento == EV_DOWN || evento == EV_UP) {
002b8c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b8e   0a01     xorlw   0x01             	XORLW	0x01
002b90   e004     bz      0x002b9a         	BZ	_00280_DS_
002b92   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002b94   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
002b96   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002b98   f01b
                                           _00280_DS_:
                                           ;	.line	211; stateMachine.c	setState(CONFIG_ALARME);
002b9a   0e03     movlw   0x03             	MOVLW	0x03
002b9c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002b9e   ec65     call    0x005eca, 0x0    	CALL	_setState
002ba0   f02f
002ba2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	213; stateMachine.c	break;
002ba4   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002ba6   f01b
                                           _00283_DS_:
                                           ;	.line	216; stateMachine.c	if (evento == EV_UP) {
002ba8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002baa   e111     bnz     0x002bce         	BNZ	_00285_DS_
                                           ;	.line	217; stateMachine.c	setTime(getTime() + 10);
002bac   ec5a     call    0x005eb4, 0x0    	CALL	_getTime
002bae   f02f
002bb0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002bb2   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002bb4   f002
002bb6   0e0a     movlw   0x0a             	MOVLW	0x0a
002bb8   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002bba   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
002bbc   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002bbe   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002bc0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bc2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002bc4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bc6   ecf1     call    0x005de2, 0x0    	CALL	_setTime
002bc8   f02e
002bca   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002bcc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00285_DS_:
                                           ;	.line	219; stateMachine.c	if (evento == EV_DOWN) {
002bce   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002bd0   0a01     xorlw   0x01             	XORLW	0x01
002bd2   e111     bnz     0x002bf6         	BNZ	_00287_DS_
                                           ;	.line	220; stateMachine.c	setTime(getTime() - 10);
002bd4   ec5a     call    0x005eb4, 0x0    	CALL	_getTime
002bd6   f02f
002bd8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002bda   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002bdc   f002
002bde   0ef6     movlw   0xf6             	MOVLW	0xf6
002be0   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002be2   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
002be4   0602     decf    0x02, 0x1, 0x0   	DECF	r0x02, F
002be6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002be8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bea   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002bec   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002bee   ecf1     call    0x005de2, 0x0    	CALL	_setTime
002bf0   f02e
002bf2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002bf4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00287_DS_:
                                           ;	.line	223; stateMachine.c	if (evento == EV_RIGHT) {
002bf6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002bf8   0a03     xorlw   0x03             	XORLW	0x03
002bfa   e105     bnz     0x002c06         	BNZ	_00289_DS_
                                           ;	.line	224; stateMachine.c	setState(CONFIG_TEMPO_UNI);
002bfc   0e0a     movlw   0x0a             	MOVLW	0x0a
002bfe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c00   ec65     call    0x005eca, 0x0    	CALL	_setState
002c02   f02f
002c04   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00289_DS_:
                                           ;	.line	226; stateMachine.c	if (evento == EV_LEFT) {
002c06   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c08   0a02     xorlw   0x02             	XORLW	0x02
002c0a   e105     bnz     0x002c16         	BNZ	_00291_DS_
                                           ;	.line	227; stateMachine.c	setState(CONFIG_TEMPO_MULT);
002c0c   0e0b     movlw   0x0b             	MOVLW	0x0b
002c0e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c10   ec65     call    0x005eca, 0x0    	CALL	_setState
002c12   f02f
002c14   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00291_DS_:
                                           ;	.line	229; stateMachine.c	if (evento == EV_ENTER) {
002c16   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c18   0a04     xorlw   0x04             	XORLW	0x04
002c1a   e002     bz      0x002c20         	BZ	_01089_DS_
002c1c   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002c1e   f01b
                                           _01089_DS_:
                                           ;	.line	230; stateMachine.c	setState(STATE_TEMPO);
002c20   0e08     movlw   0x08             	MOVLW	0x08
002c22   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c24   ec65     call    0x005eca, 0x0    	CALL	_setState
002c26   f02f
002c28   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	232; stateMachine.c	break;
002c2a   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002c2c   f01b
                                           _00294_DS_:
                                           ;	.line	236; stateMachine.c	if (evento == EV_UP) {
002c2e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c30   e10f     bnz     0x002c50         	BNZ	_00296_DS_
                                           ;	.line	237; stateMachine.c	setTime(getTime() + 1);
002c32   ec5a     call    0x005eb4, 0x0    	CALL	_getTime
002c34   f02f
002c36   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002c38   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002c3a   f002
002c3c   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
002c3e   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002c40   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002c42   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c44   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002c46   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c48   ecf1     call    0x005de2, 0x0    	CALL	_setTime
002c4a   f02e
002c4c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002c4e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00296_DS_:
                                           ;	.line	239; stateMachine.c	if (evento == EV_DOWN) {
002c50   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c52   0a01     xorlw   0x01             	XORLW	0x01
002c54   e110     bnz     0x002c76         	BNZ	_00298_DS_
                                           ;	.line	240; stateMachine.c	setTime(getTime() - 1);
002c56   ec5a     call    0x005eb4, 0x0    	CALL	_getTime
002c58   f02f
002c5a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002c5c   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002c5e   f002
002c60   0eff     movlw   0xff             	MOVLW	0xff
002c62   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002c64   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002c66   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002c68   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c6a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002c6c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c6e   ecf1     call    0x005de2, 0x0    	CALL	_setTime
002c70   f02e
002c72   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002c74   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00298_DS_:
                                           ;	.line	243; stateMachine.c	if (evento == EV_RIGHT) {
002c76   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c78   0a03     xorlw   0x03             	XORLW	0x03
002c7a   e105     bnz     0x002c86         	BNZ	_00300_DS_
                                           ;	.line	244; stateMachine.c	setState(CONFIG_TEMPO_MULT);
002c7c   0e0b     movlw   0x0b             	MOVLW	0x0b
002c7e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c80   ec65     call    0x005eca, 0x0    	CALL	_setState
002c82   f02f
002c84   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00300_DS_:
                                           ;	.line	246; stateMachine.c	if (evento == EV_LEFT) {
002c86   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c88   0a02     xorlw   0x02             	XORLW	0x02
002c8a   e105     bnz     0x002c96         	BNZ	_00302_DS_
                                           ;	.line	247; stateMachine.c	setState(CONFIG_TEMPO_DEC);
002c8c   0e09     movlw   0x09             	MOVLW	0x09
002c8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002c90   ec65     call    0x005eca, 0x0    	CALL	_setState
002c92   f02f
002c94   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00302_DS_:
                                           ;	.line	249; stateMachine.c	if (evento == EV_ENTER) {
002c96   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002c98   0a04     xorlw   0x04             	XORLW	0x04
002c9a   e002     bz      0x002ca0         	BZ	_01097_DS_
002c9c   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002c9e   f01b
                                           _01097_DS_:
                                           ;	.line	250; stateMachine.c	setState(STATE_TEMPO);
002ca0   0e08     movlw   0x08             	MOVLW	0x08
002ca2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ca4   ec65     call    0x005eca, 0x0    	CALL	_setState
002ca6   f02f
002ca8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	252; stateMachine.c	break;
002caa   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002cac   f01b
                                           _00305_DS_:
                                           ;	.line	256; stateMachine.c	if (evento == EV_UP && getMult() <= 10000) {
002cae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002cb0   e128     bnz     0x002d02         	BNZ	_00307_DS_
002cb2   ec4f     call    0x005e9e, 0x0    	CALL	_getMult
002cb4   f02f
002cb6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002cb8   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002cba   f002
002cbc   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002cbe   0f80     addlw   0x80             	ADDLW	0x80
002cc0   0f59     addlw   0x59             	ADDLW	0x59
002cc2   e102     bnz     0x002cc8         	BNZ	_01098_DS_
002cc4   0e11     movlw   0x11             	MOVLW	0x11
002cc6   5c01     subwf   0x01, 0x0, 0x0   	SUBWF	r0x01, W
                                           _01098_DS_:
002cc8   e21c     bc      0x002d02         	BC	_00307_DS_
                                           ;	.line	257; stateMachine.c	setMult(getMult()*10); //criar funções de get e set do multiplicador
002cca   ec4f     call    0x005e9e, 0x0    	CALL	_getMult
002ccc   f02f
002cce   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002cd0   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002cd2   f002
002cd4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002cd6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cd8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002cda   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cdc   0e00     movlw   0x00             	MOVLW	0x00
002cde   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ce0   0e0a     movlw   0x0a             	MOVLW	0x0a
002ce2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ce4   ec2e     call    0x004e5c, 0x0    	CALL	__mulint
002ce6   f027
002ce8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002cea   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002cec   f002
002cee   0e04     movlw   0x04             	MOVLW	0x04
002cf0   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002cf2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002cf4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cf6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002cf8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002cfa   ece4     call    0x005dc8, 0x0    	CALL	_setMult
002cfc   f02e
002cfe   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002d00   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00307_DS_:
                                           ;	.line	259; stateMachine.c	if (evento == EV_DOWN && getMult() >= 0) {
002d02   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d04   0a01     xorlw   0x01             	XORLW	0x01
002d06   e125     bnz     0x002d52         	BNZ	_00310_DS_
002d08   ec4f     call    0x005e9e, 0x0    	CALL	_getMult
002d0a   f02f
002d0c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002d0e   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002d10   f002
002d12   80d8     bsf     0xd8, 0x0, 0x0   	BSF	STATUS, 0
002d14   ae02     btfss   0x02, 0x7, 0x0   	BTFSS	r0x02, 7
002d16   90d8     bcf     0xd8, 0x0, 0x0   	BCF	STATUS, 0
002d18   e21c     bc      0x002d52         	BC	_00310_DS_
                                           ;	.line	260; stateMachine.c	setMult(getMult()/10);
002d1a   ec4f     call    0x005e9e, 0x0    	CALL	_getMult
002d1c   f02f
002d1e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002d20   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002d22   f002
002d24   0e00     movlw   0x00             	MOVLW	0x00
002d26   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d28   0e0a     movlw   0x0a             	MOVLW	0x0a
002d2a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d2c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002d2e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d30   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002d32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d34   ecf5     call    0x0043ea, 0x0    	CALL	__divsint
002d36   f021
002d38   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002d3a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002d3c   f002
002d3e   0e04     movlw   0x04             	MOVLW	0x04
002d40   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002d42   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002d44   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d46   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002d48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d4a   ece4     call    0x005dc8, 0x0    	CALL	_setMult
002d4c   f02e
002d4e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
002d50   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00310_DS_:
                                           ;	.line	263; stateMachine.c	if (evento == EV_RIGHT) {
002d52   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d54   0a03     xorlw   0x03             	XORLW	0x03
002d56   e105     bnz     0x002d62         	BNZ	_00313_DS_
                                           ;	.line	264; stateMachine.c	setState(CONFIG_TEMPO_DEC);
002d58   0e09     movlw   0x09             	MOVLW	0x09
002d5a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d5c   ec65     call    0x005eca, 0x0    	CALL	_setState
002d5e   f02f
002d60   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00313_DS_:
                                           ;	.line	266; stateMachine.c	if (evento == EV_LEFT) {
002d62   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d64   0a02     xorlw   0x02             	XORLW	0x02
002d66   e105     bnz     0x002d72         	BNZ	_00315_DS_
                                           ;	.line	267; stateMachine.c	setState(CONFIG_TEMPO_UNI);
002d68   0e0a     movlw   0x0a             	MOVLW	0x0a
002d6a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d6c   ec65     call    0x005eca, 0x0    	CALL	_setState
002d6e   f02f
002d70   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00315_DS_:
                                           ;	.line	269; stateMachine.c	if (evento == EV_ENTER) {
002d72   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d74   0a04     xorlw   0x04             	XORLW	0x04
002d76   e002     bz      0x002d7c         	BZ	_01106_DS_
002d78   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002d7a   f01b
                                           _01106_DS_:
                                           ;	.line	270; stateMachine.c	setState(STATE_TEMPO);
002d7c   0e08     movlw   0x08             	MOVLW	0x08
002d7e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d80   ec65     call    0x005eca, 0x0    	CALL	_setState
002d82   f02f
002d84   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	272; stateMachine.c	break;
002d86   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002d88   f01b
                                           _00318_DS_:
                                           ;	.line	276; stateMachine.c	if (evento == EV_UP) {
002d8a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d8c   e105     bnz     0x002d98         	BNZ	_00320_DS_
                                           ;	.line	277; stateMachine.c	setState(STATE_ALARME);
002d8e   0e02     movlw   0x02             	MOVLW	0x02
002d90   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002d92   ec65     call    0x005eca, 0x0    	CALL	_setState
002d94   f02f
002d96   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00320_DS_:
                                           ;	.line	279; stateMachine.c	if (evento == EV_DOWN) {
002d98   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002d9a   0a01     xorlw   0x01             	XORLW	0x01
002d9c   e105     bnz     0x002da8         	BNZ	_00322_DS_
                                           ;	.line	280; stateMachine.c	setState(STATE_PERIODO);
002d9e   0e0e     movlw   0x0e             	MOVLW	0x0e
002da0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002da2   ec65     call    0x005eca, 0x0    	CALL	_setState
002da4   f02f
002da6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00322_DS_:
                                           ;	.line	282; stateMachine.c	if (evento == EV_RIGHT || evento == EV_LEFT) {
002da8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002daa   0a03     xorlw   0x03             	XORLW	0x03
002dac   e003     bz      0x002db4         	BZ	_00323_DS_
002dae   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002db0   0a02     xorlw   0x02             	XORLW	0x02
002db2   e105     bnz     0x002dbe         	BNZ	_00324_DS_
                                           _00323_DS_:
                                           ;	.line	283; stateMachine.c	setState(STATE_OP);
002db4   0e00     movlw   0x00             	MOVLW	0x00
002db6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002db8   ec65     call    0x005eca, 0x0    	CALL	_setState
002dba   f02f
002dbc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00324_DS_:
                                           ;	.line	285; stateMachine.c	if (evento == EV_ENTER) {
002dbe   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002dc0   0a04     xorlw   0x04             	XORLW	0x04
002dc2   e002     bz      0x002dc8         	BZ	_01114_DS_
002dc4   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002dc6   f01b
                                           _01114_DS_:
                                           ;	.line	286; stateMachine.c	setState(CONFIG_IDIOMA);
002dc8   0e0d     movlw   0x0d             	MOVLW	0x0d
002dca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002dcc   ec65     call    0x005eca, 0x0    	CALL	_setState
002dce   f02f
002dd0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	288; stateMachine.c	break;
002dd2   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002dd4   f01b
                                           _00328_DS_:
                                           ;	.line	292; stateMachine.c	if (evento == EV_UP) {
002dd6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002dd8   e109     bnz     0x002dec         	BNZ	_00330_DS_
                                           ;	.line	293; stateMachine.c	setLanguage(getLanguage() + 1);
002dda   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
002ddc   f02f
002dde   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002de0   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
002de2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002de4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002de6   ec87     call    0x005d0e, 0x0    	CALL	_setLanguage
002de8   f02e
002dea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00330_DS_:
                                           ;	.line	295; stateMachine.c	if (evento == EV_DOWN) {
002dec   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002dee   0a01     xorlw   0x01             	XORLW	0x01
002df0   e109     bnz     0x002e04         	BNZ	_00332_DS_
                                           ;	.line	296; stateMachine.c	setLanguage(getLanguage() - 1);
002df2   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
002df4   f02f
002df6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002df8   0601     decf    0x01, 0x1, 0x0   	DECF	r0x01, F
002dfa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002dfc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002dfe   ec87     call    0x005d0e, 0x0    	CALL	_setLanguage
002e00   f02e
002e02   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00332_DS_:
                                           ;	.line	299; stateMachine.c	if (evento == EV_ENTER) {
002e04   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e06   0a04     xorlw   0x04             	XORLW	0x04
002e08   e002     bz      0x002e0e         	BZ	_01118_DS_
002e0a   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002e0c   f01b
                                           _01118_DS_:
                                           ;	.line	300; stateMachine.c	setState(STATE_IDIOMA);
002e0e   0e0c     movlw   0x0c             	MOVLW	0x0c
002e10   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e12   ec65     call    0x005eca, 0x0    	CALL	_setState
002e14   f02f
002e16   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	302; stateMachine.c	break;
002e18   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002e1a   f01b
                                           _00335_DS_:
                                           ;	.line	306; stateMachine.c	if (evento == EV_UP) {
002e1c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e1e   e105     bnz     0x002e2a         	BNZ	_00337_DS_
                                           ;	.line	307; stateMachine.c	setState(STATE_IDIOMA);
002e20   0e0c     movlw   0x0c             	MOVLW	0x0c
002e22   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e24   ec65     call    0x005eca, 0x0    	CALL	_setState
002e26   f02f
002e28   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00337_DS_:
                                           ;	.line	309; stateMachine.c	if (evento == EV_DOWN) {
002e2a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e2c   0a01     xorlw   0x01             	XORLW	0x01
002e2e   e105     bnz     0x002e3a         	BNZ	_00339_DS_
                                           ;	.line	310; stateMachine.c	setState(STATE_SECURITY);
002e30   0e17     movlw   0x17             	MOVLW	0x17
002e32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e34   ec65     call    0x005eca, 0x0    	CALL	_setState
002e36   f02f
002e38   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00339_DS_:
                                           ;	.line	312; stateMachine.c	if (evento == EV_RIGHT || evento == EV_LEFT) {
002e3a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e3c   0a03     xorlw   0x03             	XORLW	0x03
002e3e   e003     bz      0x002e46         	BZ	_00340_DS_
002e40   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e42   0a02     xorlw   0x02             	XORLW	0x02
002e44   e105     bnz     0x002e50         	BNZ	_00341_DS_
                                           _00340_DS_:
                                           ;	.line	313; stateMachine.c	setState(STATE_OP);
002e46   0e00     movlw   0x00             	MOVLW	0x00
002e48   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e4a   ec65     call    0x005eca, 0x0    	CALL	_setState
002e4c   f02f
002e4e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00341_DS_:
                                           ;	.line	315; stateMachine.c	if (evento == EV_ENTER) {
002e50   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e52   0a04     xorlw   0x04             	XORLW	0x04
002e54   e002     bz      0x002e5a         	BZ	_01126_DS_
002e56   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002e58   f01b
                                           _01126_DS_:
                                           ;	.line	316; stateMachine.c	setState(STATE_DATA);
002e5a   0e0f     movlw   0x0f             	MOVLW	0x0f
002e5c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e5e   ec65     call    0x005eca, 0x0    	CALL	_setState
002e60   f02f
002e62   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	318; stateMachine.c	break;
002e64   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002e66   f01b
                                           _00345_DS_:
                                           ;	.line	322; stateMachine.c	if (evento == EV_UP || evento == EV_DOWN) {
002e68   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e6a   e003     bz      0x002e72         	BZ	_00346_DS_
002e6c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e6e   0a01     xorlw   0x01             	XORLW	0x01
002e70   e105     bnz     0x002e7c         	BNZ	_00347_DS_
                                           _00346_DS_:
                                           ;	.line	323; stateMachine.c	setState(STATE_HORA);
002e72   0e13     movlw   0x13             	MOVLW	0x13
002e74   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e76   ec65     call    0x005eca, 0x0    	CALL	_setState
002e78   f02f
002e7a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00347_DS_:
                                           ;	.line	325; stateMachine.c	if (evento == EV_LEFT || evento == EV_RIGHT) {
002e7c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e7e   0a02     xorlw   0x02             	XORLW	0x02
002e80   e003     bz      0x002e88         	BZ	_00349_DS_
002e82   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e84   0a03     xorlw   0x03             	XORLW	0x03
002e86   e105     bnz     0x002e92         	BNZ	_00350_DS_
                                           _00349_DS_:
                                           ;	.line	326; stateMachine.c	setState(STATE_PERIODO);
002e88   0e0e     movlw   0x0e             	MOVLW	0x0e
002e8a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002e8c   ec65     call    0x005eca, 0x0    	CALL	_setState
002e8e   f02f
002e90   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00350_DS_:
                                           ;	.line	328; stateMachine.c	if (evento == EV_ENTER) {
002e92   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002e94   0a04     xorlw   0x04             	XORLW	0x04
002e96   e002     bz      0x002e9c         	BZ	_01134_DS_
002e98   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002e9a   f01b
                                           _01134_DS_:
                                           ;	.line	329; stateMachine.c	setState(CONFIG_DATA_D);
002e9c   0e10     movlw   0x10             	MOVLW	0x10
002e9e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ea0   ec65     call    0x005eca, 0x0    	CALL	_setState
002ea2   f02f
002ea4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	331; stateMachine.c	break;
002ea6   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002ea8   f01b
                                           _00354_DS_:
                                           ;	.line	335; stateMachine.c	if (evento == EV_UP) {
002eaa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002eac   e117     bnz     0x002edc         	BNZ	_00356_DS_
                                           ;	.line	336; stateMachine.c	dia = (dia +1)%31;
002eae   c091     movff   0x091, 0x001     	MOVFF	_dia, r0x01
002eb0   f001
002eb2   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002eb4   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
002eb6   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002eb8   0e00     movlw   0x00             	MOVLW	0x00
002eba   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ebc   0e1f     movlw   0x1f             	MOVLW	0x1f
002ebe   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ec0   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002ec2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ec4   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002ec6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ec8   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
002eca   f022
002ecc   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002ece   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002ed0   f002
002ed2   0e04     movlw   0x04             	MOVLW	0x04
002ed4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002ed6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002ed8   0100     movlb   0x0              	BANKSEL	_dia
002eda   6f91     movwf   0x91, 0x1        	MOVWF	_dia, B
                                           _00356_DS_:
                                           ;	.line	338; stateMachine.c	if (evento == EV_DOWN) {
002edc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002ede   0a01     xorlw   0x01             	XORLW	0x01
002ee0   e11e     bnz     0x002f1e         	BNZ	_00360_DS_
                                           ;	.line	339; stateMachine.c	dia = (dia -1)%32;
002ee2   c091     movff   0x091, 0x001     	MOVFF	_dia, r0x01
002ee4   f001
002ee6   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002ee8   0eff     movlw   0xff             	MOVLW	0xff
002eea   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002eec   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002eee   0e00     movlw   0x00             	MOVLW	0x00
002ef0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ef2   0e20     movlw   0x20             	MOVLW	0x20
002ef4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002ef6   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002ef8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002efa   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002efc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002efe   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
002f00   f022
002f02   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002f04   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002f06   f002
002f08   0e04     movlw   0x04             	MOVLW	0x04
002f0a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002f0c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002f0e   0100     movlb   0x0              	BANKSEL	_dia
002f10   6f91     movwf   0x91, 0x1        	MOVWF	_dia, B
002f12   0100     movlb   0x0              	BANKSEL	_dia
                                           ;	.line	340; stateMachine.c	if(dia == 0){
002f14   5191     movf    0x91, 0x0, 0x1   	MOVF	_dia, W, B
002f16   e103     bnz     0x002f1e         	BNZ	_00360_DS_
                                           ;	.line	341; stateMachine.c	dia = 31;
002f18   0e1f     movlw   0x1f             	MOVLW	0x1f
002f1a   0100     movlb   0x0              	BANKSEL	_dia
002f1c   6f91     movwf   0x91, 0x1        	MOVWF	_dia, B
                                           _00360_DS_:
                                           ;	.line	345; stateMachine.c	if (evento == EV_RIGHT) {
002f1e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002f20   0a03     xorlw   0x03             	XORLW	0x03
002f22   e10b     bnz     0x002f3a         	BNZ	_00362_DS_
                                           _01138_DS_:
002f24   0100     movlb   0x0              	BANKSEL	_dia
                                           ;	.line	346; stateMachine.c	rtcPutDate(dia);
002f26   5191     movf    0x91, 0x0, 0x1   	MOVF	_dia, W, B
002f28   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f2a   ec43     call    0x005686, 0x0    	CALL	_rtcPutDate
002f2c   f02b
002f2e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	347; stateMachine.c	setState(CONFIG_DATA_M);
002f30   0e11     movlw   0x11             	MOVLW	0x11
002f32   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f34   ec65     call    0x005eca, 0x0    	CALL	_setState
002f36   f02f
002f38   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00362_DS_:
                                           ;	.line	349; stateMachine.c	if (evento == EV_LEFT) {
002f3a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002f3c   0a02     xorlw   0x02             	XORLW	0x02
002f3e   e10b     bnz     0x002f56         	BNZ	_00364_DS_
                                           _01140_DS_:
002f40   0100     movlb   0x0              	BANKSEL	_dia
                                           ;	.line	350; stateMachine.c	rtcPutDate(dia);
002f42   5191     movf    0x91, 0x0, 0x1   	MOVF	_dia, W, B
002f44   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f46   ec43     call    0x005686, 0x0    	CALL	_rtcPutDate
002f48   f02b
002f4a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	351; stateMachine.c	setState(CONFIG_DATA_A);
002f4c   0e12     movlw   0x12             	MOVLW	0x12
002f4e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f50   ec65     call    0x005eca, 0x0    	CALL	_setState
002f52   f02f
002f54   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00364_DS_:
                                           ;	.line	353; stateMachine.c	if (evento == EV_ENTER) {
002f56   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002f58   0a04     xorlw   0x04             	XORLW	0x04
002f5a   e002     bz      0x002f60         	BZ	_01142_DS_
002f5c   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002f5e   f01b
                                           _01142_DS_:
002f60   0100     movlb   0x0              	BANKSEL	_dia
                                           ;	.line	354; stateMachine.c	rtcPutDate(dia);
002f62   5191     movf    0x91, 0x0, 0x1   	MOVF	_dia, W, B
002f64   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f66   ec43     call    0x005686, 0x0    	CALL	_rtcPutDate
002f68   f02b
002f6a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	355; stateMachine.c	setState(STATE_DATA);
002f6c   0e0f     movlw   0x0f             	MOVLW	0x0f
002f6e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f70   ec65     call    0x005eca, 0x0    	CALL	_setState
002f72   f02f
002f74   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	357; stateMachine.c	break;
002f76   efd3     goto    0x0037a6         	GOTO	_00535_DS_
002f78   f01b
                                           _00367_DS_:
                                           ;	.line	361; stateMachine.c	if (evento == EV_UP) {
002f7a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002f7c   e11d     bnz     0x002fb8         	BNZ	_00371_DS_
                                           ;	.line	362; stateMachine.c	mes = (mes+1)%13;
002f7e   c092     movff   0x092, 0x001     	MOVFF	_mes, r0x01
002f80   f001
002f82   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002f84   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
002f86   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
002f88   0e00     movlw   0x00             	MOVLW	0x00
002f8a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f8c   0e0d     movlw   0x0d             	MOVLW	0x0d
002f8e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f90   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002f92   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f94   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002f96   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002f98   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
002f9a   f022
002f9c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002f9e   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002fa0   f002
002fa2   0e04     movlw   0x04             	MOVLW	0x04
002fa4   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002fa6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002fa8   0100     movlb   0x0              	BANKSEL	_mes
002faa   6f92     movwf   0x92, 0x1        	MOVWF	_mes, B
002fac   0100     movlb   0x0              	BANKSEL	_mes
                                           ;	.line	363; stateMachine.c	if(mes==0){
002fae   5192     movf    0x92, 0x0, 0x1   	MOVF	_mes, W, B
002fb0   e103     bnz     0x002fb8         	BNZ	_00371_DS_
                                           ;	.line	364; stateMachine.c	mes=1;
002fb2   0e01     movlw   0x01             	MOVLW	0x01
002fb4   0100     movlb   0x0              	BANKSEL	_mes
002fb6   6f92     movwf   0x92, 0x1        	MOVWF	_mes, B
                                           _00371_DS_:
                                           ;	.line	367; stateMachine.c	if (evento == EV_DOWN) {
002fb8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002fba   0a01     xorlw   0x01             	XORLW	0x01
002fbc   e11e     bnz     0x002ffa         	BNZ	_00375_DS_
                                           ;	.line	368; stateMachine.c	mes = (mes-1)%13;
002fbe   c092     movff   0x092, 0x001     	MOVFF	_mes, r0x01
002fc0   f001
002fc2   6a02     clrf    0x02, 0x0        	CLRF	r0x02
002fc4   0eff     movlw   0xff             	MOVLW	0xff
002fc6   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
002fc8   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
002fca   0e00     movlw   0x00             	MOVLW	0x00
002fcc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002fce   0e0d     movlw   0x0d             	MOVLW	0x0d
002fd0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002fd2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
002fd4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002fd6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002fd8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
002fda   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
002fdc   f022
002fde   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
002fe0   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
002fe2   f002
002fe4   0e04     movlw   0x04             	MOVLW	0x04
002fe6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
002fe8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
002fea   0100     movlb   0x0              	BANKSEL	_mes
002fec   6f92     movwf   0x92, 0x1        	MOVWF	_mes, B
002fee   0100     movlb   0x0              	BANKSEL	_mes
                                           ;	.line	369; stateMachine.c	if(mes == 0){
002ff0   5192     movf    0x92, 0x0, 0x1   	MOVF	_mes, W, B
002ff2   e103     bnz     0x002ffa         	BNZ	_00375_DS_
                                           ;	.line	370; stateMachine.c	mes=12;
002ff4   0e0c     movlw   0x0c             	MOVLW	0x0c
002ff6   0100     movlb   0x0              	BANKSEL	_mes
002ff8   6f92     movwf   0x92, 0x1        	MOVWF	_mes, B
                                           _00375_DS_:
                                           ;	.line	375; stateMachine.c	if (evento == EV_RIGHT) {
002ffa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
002ffc   0a03     xorlw   0x03             	XORLW	0x03
002ffe   e10b     bnz     0x003016         	BNZ	_00377_DS_
                                           _01146_DS_:
003000   0100     movlb   0x0              	BANKSEL	_mes
                                           ;	.line	376; stateMachine.c	rtcPutMonth(mes);
003002   5192     movf    0x92, 0x0, 0x1   	MOVF	_mes, W, B
003004   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003006   ec0e     call    0x00561c, 0x0    	CALL	_rtcPutMonth
003008   f02b
00300a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	377; stateMachine.c	setState(CONFIG_DATA_A);
00300c   0e12     movlw   0x12             	MOVLW	0x12
00300e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003010   ec65     call    0x005eca, 0x0    	CALL	_setState
003012   f02f
003014   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00377_DS_:
                                           ;	.line	379; stateMachine.c	if (evento == EV_LEFT) {
003016   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003018   0a02     xorlw   0x02             	XORLW	0x02
00301a   e10b     bnz     0x003032         	BNZ	_00379_DS_
                                           _01148_DS_:
00301c   0100     movlb   0x0              	BANKSEL	_mes
                                           ;	.line	380; stateMachine.c	rtcPutMonth(mes);
00301e   5192     movf    0x92, 0x0, 0x1   	MOVF	_mes, W, B
003020   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003022   ec0e     call    0x00561c, 0x0    	CALL	_rtcPutMonth
003024   f02b
003026   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	381; stateMachine.c	setState(CONFIG_DATA_D);
003028   0e10     movlw   0x10             	MOVLW	0x10
00302a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00302c   ec65     call    0x005eca, 0x0    	CALL	_setState
00302e   f02f
003030   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00379_DS_:
                                           ;	.line	383; stateMachine.c	if (evento == EV_ENTER) {
003032   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003034   0a04     xorlw   0x04             	XORLW	0x04
003036   e002     bz      0x00303c         	BZ	_01150_DS_
003038   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00303a   f01b
                                           _01150_DS_:
00303c   0100     movlb   0x0              	BANKSEL	_mes
                                           ;	.line	384; stateMachine.c	rtcPutMonth(mes);
00303e   5192     movf    0x92, 0x0, 0x1   	MOVF	_mes, W, B
003040   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003042   ec0e     call    0x00561c, 0x0    	CALL	_rtcPutMonth
003044   f02b
003046   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	385; stateMachine.c	setState(STATE_DATA);
003048   0e0f     movlw   0x0f             	MOVLW	0x0f
00304a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00304c   ec65     call    0x005eca, 0x0    	CALL	_setState
00304e   f02f
003050   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	387; stateMachine.c	break;    
003052   efd3     goto    0x0037a6         	GOTO	_00535_DS_
003054   f01b
                                           _00382_DS_:
                                           ;	.line	391; stateMachine.c	if (evento == EV_UP) {
003056   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003058   e117     bnz     0x003088         	BNZ	_00384_DS_
                                           ;	.line	392; stateMachine.c	ano = (ano+1)%100;
00305a   c093     movff   0x093, 0x001     	MOVFF	_ano, r0x01
00305c   f001
00305e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003060   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
003062   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003064   0e00     movlw   0x00             	MOVLW	0x00
003066   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003068   0e64     movlw   0x64             	MOVLW	0x64
00306a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00306c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00306e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003070   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003072   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003074   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
003076   f022
003078   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00307a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00307c   f002
00307e   0e04     movlw   0x04             	MOVLW	0x04
003080   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003082   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003084   0100     movlb   0x0              	BANKSEL	_ano
003086   6f93     movwf   0x93, 0x1        	MOVWF	_ano, B
                                           _00384_DS_:
                                           ;	.line	395; stateMachine.c	if (evento == EV_DOWN) {
003088   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00308a   0a01     xorlw   0x01             	XORLW	0x01
00308c   e11f     bnz     0x0030cc         	BNZ	_00388_DS_
                                           ;	.line	396; stateMachine.c	ano = (ano-1)%100;
00308e   c093     movff   0x093, 0x001     	MOVFF	_ano, r0x01
003090   f001
003092   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003094   0eff     movlw   0xff             	MOVLW	0xff
003096   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
003098   2202     addwfc  0x02, 0x1, 0x0   	ADDWFC	r0x02, F
00309a   0e00     movlw   0x00             	MOVLW	0x00
00309c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00309e   0e64     movlw   0x64             	MOVLW	0x64
0030a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030a2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0030a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030a6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0030a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030aa   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
0030ac   f022
0030ae   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0030b0   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0030b2   f002
0030b4   0e04     movlw   0x04             	MOVLW	0x04
0030b6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0030b8   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0030ba   0100     movlb   0x0              	BANKSEL	_ano
0030bc   6f93     movwf   0x93, 0x1        	MOVWF	_ano, B
0030be   0100     movlb   0x0              	BANKSEL	_ano
                                           ;	.line	397; stateMachine.c	if(ano == 255){
0030c0   5193     movf    0x93, 0x0, 0x1   	MOVF	_ano, W, B
0030c2   0aff     xorlw   0xff             	XORLW	0xff
0030c4   e103     bnz     0x0030cc         	BNZ	_00388_DS_
                                           ;	.line	398; stateMachine.c	ano = 99;
0030c6   0e63     movlw   0x63             	MOVLW	0x63
0030c8   0100     movlb   0x0              	BANKSEL	_ano
0030ca   6f93     movwf   0x93, 0x1        	MOVWF	_ano, B
                                           _00388_DS_:
                                           ;	.line	402; stateMachine.c	if (evento == EV_RIGHT) {
0030cc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0030ce   0a03     xorlw   0x03             	XORLW	0x03
0030d0   e10b     bnz     0x0030e8         	BNZ	_00390_DS_
                                           _01156_DS_:
0030d2   0100     movlb   0x0              	BANKSEL	_ano
                                           ;	.line	403; stateMachine.c	rtcPutYear(ano);
0030d4   5193     movf    0x93, 0x0, 0x1   	MOVF	_ano, W, B
0030d6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030d8   ecd9     call    0x0055b2, 0x0    	CALL	_rtcPutYear
0030da   f02a
0030dc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	404; stateMachine.c	setState(CONFIG_DATA_D);
0030de   0e10     movlw   0x10             	MOVLW	0x10
0030e0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030e2   ec65     call    0x005eca, 0x0    	CALL	_setState
0030e4   f02f
0030e6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00390_DS_:
                                           ;	.line	406; stateMachine.c	if (evento == EV_LEFT) {
0030e8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0030ea   0a02     xorlw   0x02             	XORLW	0x02
0030ec   e10b     bnz     0x003104         	BNZ	_00392_DS_
                                           _01158_DS_:
0030ee   0100     movlb   0x0              	BANKSEL	_ano
                                           ;	.line	407; stateMachine.c	rtcPutYear(ano);
0030f0   5193     movf    0x93, 0x0, 0x1   	MOVF	_ano, W, B
0030f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030f4   ecd9     call    0x0055b2, 0x0    	CALL	_rtcPutYear
0030f6   f02a
0030f8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	408; stateMachine.c	setState(CONFIG_DATA_M);
0030fa   0e11     movlw   0x11             	MOVLW	0x11
0030fc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0030fe   ec65     call    0x005eca, 0x0    	CALL	_setState
003100   f02f
003102   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00392_DS_:
                                           ;	.line	410; stateMachine.c	if (evento == EV_ENTER) {
003104   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003106   0a04     xorlw   0x04             	XORLW	0x04
003108   e002     bz      0x00310e         	BZ	_01160_DS_
00310a   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00310c   f01b
                                           _01160_DS_:
00310e   0100     movlb   0x0              	BANKSEL	_ano
                                           ;	.line	411; stateMachine.c	rtcPutYear(ano);
003110   5193     movf    0x93, 0x0, 0x1   	MOVF	_ano, W, B
003112   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003114   ecd9     call    0x0055b2, 0x0    	CALL	_rtcPutYear
003116   f02a
003118   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	412; stateMachine.c	setState(STATE_DATA);
00311a   0e0f     movlw   0x0f             	MOVLW	0x0f
00311c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00311e   ec65     call    0x005eca, 0x0    	CALL	_setState
003120   f02f
003122   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	414; stateMachine.c	break;
003124   efd3     goto    0x0037a6         	GOTO	_00535_DS_
003126   f01b
                                           _00395_DS_:
                                           ;	.line	419; stateMachine.c	if (evento == EV_UP || evento == EV_DOWN) {
003128   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00312a   e003     bz      0x003132         	BZ	_00396_DS_
00312c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00312e   0a01     xorlw   0x01             	XORLW	0x01
003130   e105     bnz     0x00313c         	BNZ	_00397_DS_
                                           _00396_DS_:
                                           ;	.line	420; stateMachine.c	setState(STATE_DATA);
003132   0e0f     movlw   0x0f             	MOVLW	0x0f
003134   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003136   ec65     call    0x005eca, 0x0    	CALL	_setState
003138   f02f
00313a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00397_DS_:
                                           ;	.line	423; stateMachine.c	if (evento == EV_RIGHT || evento == EV_LEFT) {
00313c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00313e   0a03     xorlw   0x03             	XORLW	0x03
003140   e003     bz      0x003148         	BZ	_00399_DS_
003142   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003144   0a02     xorlw   0x02             	XORLW	0x02
003146   e105     bnz     0x003152         	BNZ	_00400_DS_
                                           _00399_DS_:
                                           ;	.line	424; stateMachine.c	setState(STATE_PERIODO);
003148   0e0e     movlw   0x0e             	MOVLW	0x0e
00314a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00314c   ec65     call    0x005eca, 0x0    	CALL	_setState
00314e   f02f
003150   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00400_DS_:
                                           ;	.line	427; stateMachine.c	if (evento == EV_ENTER) {
003152   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003154   0a04     xorlw   0x04             	XORLW	0x04
003156   e002     bz      0x00315c         	BZ	_01168_DS_
003158   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00315a   f01b
                                           _01168_DS_:
                                           ;	.line	428; stateMachine.c	setState(CONFIG_HORA);
00315c   0e14     movlw   0x14             	MOVLW	0x14
00315e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003160   ec65     call    0x005eca, 0x0    	CALL	_setState
003162   f02f
003164   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	430; stateMachine.c	break;
003166   efd3     goto    0x0037a6         	GOTO	_00535_DS_
003168   f01b
                                           _00404_DS_:
                                           ;	.line	434; stateMachine.c	if (evento == EV_UP) {
00316a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00316c   e117     bnz     0x00319c         	BNZ	_00406_DS_
                                           ;	.line	435; stateMachine.c	hora = (hora + 1)%24;
00316e   c08f     movff   0x08f, 0x001     	MOVFF	_hora, r0x01
003170   f001
003172   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003174   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
003176   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003178   0e00     movlw   0x00             	MOVLW	0x00
00317a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00317c   0e18     movlw   0x18             	MOVLW	0x18
00317e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003180   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003182   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003184   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003186   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003188   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
00318a   f022
00318c   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00318e   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
003190   f002
003192   0e04     movlw   0x04             	MOVLW	0x04
003194   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003196   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003198   0100     movlb   0x0              	BANKSEL	_hora
00319a   6f8f     movwf   0x8f, 0x1        	MOVWF	_hora, B
                                           _00406_DS_:
                                           ;	.line	437; stateMachine.c	if (evento == EV_DOWN && hora !=0) {
00319c   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00319e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0031a0   0a01     xorlw   0x01             	XORLW	0x01
0031a2   e101     bnz     0x0031a6         	BNZ	_01170_DS_
0031a4   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           _01170_DS_:
0031a6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0031a8   e01b     bz      0x0031e0         	BZ	_00408_DS_
0031aa   0100     movlb   0x0              	BANKSEL	_hora
0031ac   518f     movf    0x8f, 0x0, 0x1   	MOVF	_hora, W, B
0031ae   e018     bz      0x0031e0         	BZ	_00408_DS_
                                           ;	.line	438; stateMachine.c	hora = (hora - 1)%24;
0031b0   c08f     movff   0x08f, 0x002     	MOVFF	_hora, r0x02
0031b2   f002
0031b4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0031b6   0eff     movlw   0xff             	MOVLW	0xff
0031b8   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0031ba   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
0031bc   0e00     movlw   0x00             	MOVLW	0x00
0031be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031c0   0e18     movlw   0x18             	MOVLW	0x18
0031c2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031c4   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0031c6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031c8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0031ca   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031cc   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
0031ce   f022
0031d0   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0031d2   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0031d4   f003
0031d6   0e04     movlw   0x04             	MOVLW	0x04
0031d8   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0031da   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0031dc   0100     movlb   0x0              	BANKSEL	_hora
0031de   6f8f     movwf   0x8f, 0x1        	MOVWF	_hora, B
                                           _00408_DS_:
                                           ;	.line	441; stateMachine.c	if (evento == EV_DOWN && hora == 0) {
0031e0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0031e2   e006     bz      0x0031f0         	BZ	_00411_DS_
0031e4   0100     movlb   0x0              	BANKSEL	_hora
0031e6   518f     movf    0x8f, 0x0, 0x1   	MOVF	_hora, W, B
0031e8   e103     bnz     0x0031f0         	BNZ	_00411_DS_
                                           ;	.line	442; stateMachine.c	hora = 23;
0031ea   0e17     movlw   0x17             	MOVLW	0x17
0031ec   0100     movlb   0x0              	BANKSEL	_hora
0031ee   6f8f     movwf   0x8f, 0x1        	MOVWF	_hora, B
                                           _00411_DS_:
                                           ;	.line	446; stateMachine.c	if (evento == EV_RIGHT) {
0031f0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0031f2   0a03     xorlw   0x03             	XORLW	0x03
0031f4   e10b     bnz     0x00320c         	BNZ	_00414_DS_
                                           _01172_DS_:
0031f6   0100     movlb   0x0              	BANKSEL	_hora
                                           ;	.line	447; stateMachine.c	rtcPutHours(hora);
0031f8   518f     movf    0x8f, 0x0, 0x1   	MOVF	_hora, W, B
0031fa   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0031fc   ec78     call    0x0056f0, 0x0    	CALL	_rtcPutHours
0031fe   f02b
003200   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	448; stateMachine.c	setState(CONFIG_MINUTOS_DEC);
003202   0e15     movlw   0x15             	MOVLW	0x15
003204   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003206   ec65     call    0x005eca, 0x0    	CALL	_setState
003208   f02f
00320a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00414_DS_:
                                           ;	.line	450; stateMachine.c	if (evento == EV_LEFT) {
00320c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00320e   0a02     xorlw   0x02             	XORLW	0x02
003210   e10b     bnz     0x003228         	BNZ	_00416_DS_
                                           _01174_DS_:
003212   0100     movlb   0x0              	BANKSEL	_hora
                                           ;	.line	451; stateMachine.c	rtcPutHours(hora);
003214   518f     movf    0x8f, 0x0, 0x1   	MOVF	_hora, W, B
003216   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003218   ec78     call    0x0056f0, 0x0    	CALL	_rtcPutHours
00321a   f02b
00321c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	452; stateMachine.c	setState(CONFIG_MINUTOS_UNI);
00321e   0e16     movlw   0x16             	MOVLW	0x16
003220   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003222   ec65     call    0x005eca, 0x0    	CALL	_setState
003224   f02f
003226   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00416_DS_:
                                           ;	.line	454; stateMachine.c	if (evento == EV_ENTER) {
003228   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00322a   0a04     xorlw   0x04             	XORLW	0x04
00322c   e002     bz      0x003232         	BZ	_01176_DS_
00322e   efd3     goto    0x0037a6         	GOTO	_00535_DS_
003230   f01b
                                           _01176_DS_:
003232   0100     movlb   0x0              	BANKSEL	_hora
                                           ;	.line	455; stateMachine.c	rtcPutHours(hora);                
003234   518f     movf    0x8f, 0x0, 0x1   	MOVF	_hora, W, B
003236   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003238   ec78     call    0x0056f0, 0x0    	CALL	_rtcPutHours
00323a   f02b
00323c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	456; stateMachine.c	setState(STATE_HORA);
00323e   0e13     movlw   0x13             	MOVLW	0x13
003240   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003242   ec65     call    0x005eca, 0x0    	CALL	_setState
003244   f02f
003246   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	458; stateMachine.c	break;
003248   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00324a   f01b
                                           _00419_DS_:
                                           ;	.line	463; stateMachine.c	if (evento == EV_UP) {
00324c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00324e   e119     bnz     0x003282         	BNZ	_00421_DS_
                                           ;	.line	464; stateMachine.c	min = (min+10)%60;
003250   c090     movff   0x090, 0x001     	MOVFF	_min, r0x01
003252   f001
003254   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003256   0e0a     movlw   0x0a             	MOVLW	0x0a
003258   2601     addwf   0x01, 0x1, 0x0   	ADDWF	r0x01, F
00325a   b0d8     btfsc   0xd8, 0x0, 0x0   	BTFSC	STATUS, 0
00325c   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
00325e   0e00     movlw   0x00             	MOVLW	0x00
003260   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003262   0e3c     movlw   0x3c             	MOVLW	0x3c
003264   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003266   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003268   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00326a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00326c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00326e   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
003270   f022
003272   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003274   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
003276   f002
003278   0e04     movlw   0x04             	MOVLW	0x04
00327a   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
00327c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00327e   0100     movlb   0x0              	BANKSEL	_min
003280   6f90     movwf   0x90, 0x1        	MOVWF	_min, B
                                           _00421_DS_:
                                           ;	.line	466; stateMachine.c	if (evento == EV_DOWN && min>=10) {
003282   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003284   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003286   0a01     xorlw   0x01             	XORLW	0x01
003288   e101     bnz     0x00328c         	BNZ	_01178_DS_
00328a   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           _01178_DS_:
00328c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00328e   e01d     bz      0x0032ca         	BZ	_00423_DS_
003290   0e0a     movlw   0x0a             	MOVLW	0x0a
003292   0100     movlb   0x0              	BANKSEL	_min
003294   5d90     subwf   0x90, 0x0, 0x1   	SUBWF	_min, W, B
003296   e319     bnc     0x0032ca         	BNC	_00423_DS_
                                           ;	.line	467; stateMachine.c	min = (min-10)%60;
003298   c090     movff   0x090, 0x002     	MOVFF	_min, r0x02
00329a   f002
00329c   6a03     clrf    0x03, 0x0        	CLRF	r0x03
00329e   0ef6     movlw   0xf6             	MOVLW	0xf6
0032a0   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
0032a2   a0d8     btfss   0xd8, 0x0, 0x0   	BTFSS	STATUS, 0
0032a4   0603     decf    0x03, 0x1, 0x0   	DECF	r0x03, F
0032a6   0e00     movlw   0x00             	MOVLW	0x00
0032a8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032aa   0e3c     movlw   0x3c             	MOVLW	0x3c
0032ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032ae   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0032b0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032b2   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0032b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032b6   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
0032b8   f022
0032ba   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0032bc   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0032be   f003
0032c0   0e04     movlw   0x04             	MOVLW	0x04
0032c2   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0032c4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0032c6   0100     movlb   0x0              	BANKSEL	_min
0032c8   6f90     movwf   0x90, 0x1        	MOVWF	_min, B
                                           _00423_DS_:
                                           ;	.line	469; stateMachine.c	if (evento == EV_DOWN && min == 0){
0032ca   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0032cc   e006     bz      0x0032da         	BZ	_00426_DS_
0032ce   0100     movlb   0x0              	BANKSEL	_min
0032d0   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
0032d2   e103     bnz     0x0032da         	BNZ	_00426_DS_
                                           ;	.line	470; stateMachine.c	min = 50;
0032d4   0e32     movlw   0x32             	MOVLW	0x32
0032d6   0100     movlb   0x0              	BANKSEL	_min
0032d8   6f90     movwf   0x90, 0x1        	MOVWF	_min, B
                                           _00426_DS_:
                                           ;	.line	474; stateMachine.c	if (evento == EV_RIGHT) {
0032da   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0032dc   0a03     xorlw   0x03             	XORLW	0x03
0032de   e10b     bnz     0x0032f6         	BNZ	_00429_DS_
                                           _01181_DS_:
0032e0   0100     movlb   0x0              	BANKSEL	_min
                                           ;	.line	475; stateMachine.c	rtcPutMinutes(min);
0032e2   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
0032e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032e6   ecad     call    0x00575a, 0x0    	CALL	_rtcPutMinutes
0032e8   f02b
0032ea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	476; stateMachine.c	setState(CONFIG_MINUTOS_UNI);
0032ec   0e16     movlw   0x16             	MOVLW	0x16
0032ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0032f0   ec65     call    0x005eca, 0x0    	CALL	_setState
0032f2   f02f
0032f4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00429_DS_:
                                           ;	.line	478; stateMachine.c	if (evento == EV_LEFT) {
0032f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0032f8   0a02     xorlw   0x02             	XORLW	0x02
0032fa   e10b     bnz     0x003312         	BNZ	_00431_DS_
                                           _01183_DS_:
0032fc   0100     movlb   0x0              	BANKSEL	_min
                                           ;	.line	479; stateMachine.c	rtcPutMinutes(min);
0032fe   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
003300   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003302   ecad     call    0x00575a, 0x0    	CALL	_rtcPutMinutes
003304   f02b
003306   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	480; stateMachine.c	setState(CONFIG_HORA);
003308   0e14     movlw   0x14             	MOVLW	0x14
00330a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00330c   ec65     call    0x005eca, 0x0    	CALL	_setState
00330e   f02f
003310   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00431_DS_:
                                           ;	.line	482; stateMachine.c	if (evento == EV_ENTER) {
003312   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003314   0a04     xorlw   0x04             	XORLW	0x04
003316   e002     bz      0x00331c         	BZ	_01185_DS_
003318   efd3     goto    0x0037a6         	GOTO	_00535_DS_
00331a   f01b
                                           _01185_DS_:
00331c   0100     movlb   0x0              	BANKSEL	_min
                                           ;	.line	483; stateMachine.c	rtcPutMinutes(min);
00331e   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
003320   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003322   ecad     call    0x00575a, 0x0    	CALL	_rtcPutMinutes
003324   f02b
003326   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	484; stateMachine.c	setState(STATE_HORA);
003328   0e13     movlw   0x13             	MOVLW	0x13
00332a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00332c   ec65     call    0x005eca, 0x0    	CALL	_setState
00332e   f02f
003330   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	486; stateMachine.c	break;
003332   efd3     goto    0x0037a6         	GOTO	_00535_DS_
003334   f01b
                                           _00434_DS_:
                                           ;	.line	490; stateMachine.c	if (evento == EV_UP) {
003336   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003338   e117     bnz     0x003368         	BNZ	_00436_DS_
                                           ;	.line	491; stateMachine.c	min = (min+1)%60;
00333a   c090     movff   0x090, 0x001     	MOVFF	_min, r0x01
00333c   f001
00333e   6a02     clrf    0x02, 0x0        	CLRF	r0x02
003340   4a01     infsnz  0x01, 0x1, 0x0   	INFSNZ	r0x01, F
003342   2a02     incf    0x02, 0x1, 0x0   	INCF	r0x02, F
003344   0e00     movlw   0x00             	MOVLW	0x00
003346   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003348   0e3c     movlw   0x3c             	MOVLW	0x3c
00334a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00334c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00334e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003350   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003352   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003354   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
003356   f022
003358   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00335a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00335c   f002
00335e   0e04     movlw   0x04             	MOVLW	0x04
003360   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
003362   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003364   0100     movlb   0x0              	BANKSEL	_min
003366   6f90     movwf   0x90, 0x1        	MOVWF	_min, B
                                           _00436_DS_:
                                           ;	.line	493; stateMachine.c	if (evento == EV_DOWN && min>=1) {
003368   6a01     clrf    0x01, 0x0        	CLRF	r0x01
00336a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00336c   0a01     xorlw   0x01             	XORLW	0x01
00336e   e101     bnz     0x003372         	BNZ	_01187_DS_
003370   2a01     incf    0x01, 0x1, 0x0   	INCF	r0x01, F
                                           _01187_DS_:
003372   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003374   e01c     bz      0x0033ae         	BZ	_00438_DS_
003376   0e01     movlw   0x01             	MOVLW	0x01
003378   0100     movlb   0x0              	BANKSEL	_min
00337a   5d90     subwf   0x90, 0x0, 0x1   	SUBWF	_min, W, B
00337c   e318     bnc     0x0033ae         	BNC	_00438_DS_
                                           ;	.line	494; stateMachine.c	min = (min-1)%60;
00337e   c090     movff   0x090, 0x002     	MOVFF	_min, r0x02
003380   f002
003382   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003384   0eff     movlw   0xff             	MOVLW	0xff
003386   2602     addwf   0x02, 0x1, 0x0   	ADDWF	r0x02, F
003388   2203     addwfc  0x03, 0x1, 0x0   	ADDWFC	r0x03, F
00338a   0e00     movlw   0x00             	MOVLW	0x00
00338c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00338e   0e3c     movlw   0x3c             	MOVLW	0x3c
003390   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003392   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003394   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003396   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003398   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00339a   ec6c     call    0x0044d8, 0x0    	CALL	__modsint
00339c   f022
00339e   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0033a0   cff3     movff   0xff3, 0x003     	MOVFF	PRODL, r0x03
0033a2   f003
0033a4   0e04     movlw   0x04             	MOVLW	0x04
0033a6   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0033a8   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0033aa   0100     movlb   0x0              	BANKSEL	_min
0033ac   6f90     movwf   0x90, 0x1        	MOVWF	_min, B
                                           _00438_DS_:
                                           ;	.line	496; stateMachine.c	if (evento == EV_DOWN && min == 0){
0033ae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0033b0   e006     bz      0x0033be         	BZ	_00441_DS_
0033b2   0100     movlb   0x0              	BANKSEL	_min
0033b4   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
0033b6   e103     bnz     0x0033be         	BNZ	_00441_DS_
                                           ;	.line	497; stateMachine.c	min = 59;
0033b8   0e3b     movlw   0x3b             	MOVLW	0x3b
0033ba   0100     movlb   0x0              	BANKSEL	_min
0033bc   6f90     movwf   0x90, 0x1        	MOVWF	_min, B
                                           _00441_DS_:
                                           ;	.line	500; stateMachine.c	if (evento == EV_RIGHT) {
0033be   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0033c0   0a03     xorlw   0x03             	XORLW	0x03
0033c2   e10b     bnz     0x0033da         	BNZ	_00444_DS_
                                           _01190_DS_:
0033c4   0100     movlb   0x0              	BANKSEL	_min
                                           ;	.line	501; stateMachine.c	rtcPutMinutes(min);
0033c6   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
0033c8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0033ca   ecad     call    0x00575a, 0x0    	CALL	_rtcPutMinutes
0033cc   f02b
0033ce   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	502; stateMachine.c	setState(CONFIG_HORA);
0033d0   0e14     movlw   0x14             	MOVLW	0x14
0033d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0033d4   ec65     call    0x005eca, 0x0    	CALL	_setState
0033d6   f02f
0033d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00444_DS_:
                                           ;	.line	504; stateMachine.c	if (evento == EV_LEFT) {
0033da   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0033dc   0a02     xorlw   0x02             	XORLW	0x02
0033de   e10b     bnz     0x0033f6         	BNZ	_00446_DS_
                                           _01192_DS_:
0033e0   0100     movlb   0x0              	BANKSEL	_min
                                           ;	.line	505; stateMachine.c	rtcPutMinutes(min);
0033e2   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
0033e4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0033e6   ecad     call    0x00575a, 0x0    	CALL	_rtcPutMinutes
0033e8   f02b
0033ea   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	506; stateMachine.c	setState(CONFIG_MINUTOS_DEC);
0033ec   0e15     movlw   0x15             	MOVLW	0x15
0033ee   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0033f0   ec65     call    0x005eca, 0x0    	CALL	_setState
0033f2   f02f
0033f4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00446_DS_:
                                           ;	.line	508; stateMachine.c	if (evento == EV_ENTER) {
0033f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0033f8   0a04     xorlw   0x04             	XORLW	0x04
0033fa   e001     bz      0x0033fe         	BZ	_01194_DS_
0033fc   d1d4     bra     0x0037a6         	BRA	_00535_DS_
                                           _01194_DS_:
0033fe   0100     movlb   0x0              	BANKSEL	_min
                                           ;	.line	509; stateMachine.c	rtcPutMinutes(min);
003400   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
003402   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003404   ecad     call    0x00575a, 0x0    	CALL	_rtcPutMinutes
003406   f02b
003408   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	510; stateMachine.c	setState(STATE_HORA);
00340a   0e13     movlw   0x13             	MOVLW	0x13
00340c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00340e   ec65     call    0x005eca, 0x0    	CALL	_setState
003410   f02f
003412   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	512; stateMachine.c	break;
003414   d1c8     bra     0x0037a6         	BRA	_00535_DS_
                                           _00449_DS_:
                                           ;	.line	516; stateMachine.c	if (evento == EV_UP) {
003416   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003418   e105     bnz     0x003424         	BNZ	_00451_DS_
                                           ;	.line	517; stateMachine.c	setState(STATE_PERIODO);
00341a   0e0e     movlw   0x0e             	MOVLW	0x0e
00341c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00341e   ec65     call    0x005eca, 0x0    	CALL	_setState
003420   f02f
003422   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00451_DS_:
                                           ;	.line	519; stateMachine.c	if (evento == EV_DOWN) {
003424   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003426   0a01     xorlw   0x01             	XORLW	0x01
003428   e105     bnz     0x003434         	BNZ	_00453_DS_
                                           ;	.line	520; stateMachine.c	setState(STATE_RESET);
00342a   0e1f     movlw   0x1f             	MOVLW	0x1f
00342c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00342e   ec65     call    0x005eca, 0x0    	CALL	_setState
003430   f02f
003432   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00453_DS_:
                                           ;	.line	522; stateMachine.c	if (evento == EV_ENTER) {
003434   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003436   0a04     xorlw   0x04             	XORLW	0x04
003438   e105     bnz     0x003444         	BNZ	_00455_DS_
                                           ;	.line	523; stateMachine.c	setState(CONFIG_SENHA);
00343a   0e18     movlw   0x18             	MOVLW	0x18
00343c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00343e   ec65     call    0x005eca, 0x0    	CALL	_setState
003440   f02f
003442   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00455_DS_:
                                           ;	.line	525; stateMachine.c	if (evento == EV_LEFT || evento ==  EV_RIGHT) {
003444   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003446   0a02     xorlw   0x02             	XORLW	0x02
003448   e004     bz      0x003452         	BZ	_00456_DS_
00344a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00344c   0a03     xorlw   0x03             	XORLW	0x03
00344e   e001     bz      0x003452         	BZ	_00456_DS_
003450   d1aa     bra     0x0037a6         	BRA	_00535_DS_
                                           _00456_DS_:
                                           ;	.line	526; stateMachine.c	setState(STATE_OP);
003452   0e00     movlw   0x00             	MOVLW	0x00
003454   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003456   ec65     call    0x005eca, 0x0    	CALL	_setState
003458   f02f
00345a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	528; stateMachine.c	break;
00345c   d1a4     bra     0x0037a6         	BRA	_00535_DS_
                                           _00459_DS_:
                                           ;	.line	532; stateMachine.c	if (evento == EV_UP || evento == EV_DOWN) {
00345e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003460   e003     bz      0x003468         	BZ	_00460_DS_
003462   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003464   0a01     xorlw   0x01             	XORLW	0x01
003466   e105     bnz     0x003472         	BNZ	_00461_DS_
                                           _00460_DS_:
                                           ;	.line	533; stateMachine.c	setState(CONFIG_HABILITA);
003468   0e1b     movlw   0x1b             	MOVLW	0x1b
00346a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00346c   ec65     call    0x005eca, 0x0    	CALL	_setState
00346e   f02f
003470   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00461_DS_:
                                           ;	.line	535; stateMachine.c	if (evento == EV_ENTER){
003472   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003474   0a04     xorlw   0x04             	XORLW	0x04
003476   e105     bnz     0x003482         	BNZ	_00464_DS_
                                           ;	.line	536; stateMachine.c	setState(SECURITY_SENHA);                
003478   0e19     movlw   0x19             	MOVLW	0x19
00347a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00347c   ec65     call    0x005eca, 0x0    	CALL	_setState
00347e   f02f
003480   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00464_DS_:
                                           ;	.line	538; stateMachine.c	if (evento == EV_LEFT || evento ==  EV_RIGHT) {
003482   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003484   0a02     xorlw   0x02             	XORLW	0x02
003486   e004     bz      0x003490         	BZ	_00465_DS_
003488   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00348a   0a03     xorlw   0x03             	XORLW	0x03
00348c   e001     bz      0x003490         	BZ	_00465_DS_
00348e   d18b     bra     0x0037a6         	BRA	_00535_DS_
                                           _00465_DS_:
                                           ;	.line	539; stateMachine.c	setState(STATE_SECURITY);
003490   0e17     movlw   0x17             	MOVLW	0x17
003492   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003494   ec65     call    0x005eca, 0x0    	CALL	_setState
003496   f02f
003498   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	541; stateMachine.c	break;
00349a   d185     bra     0x0037a6         	BRA	_00535_DS_
                                           _00468_DS_:
                                           ;	.line	547; stateMachine.c	if(getSenha_try() ==  3){
00349c   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
00349e   f02f
0034a0   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0034a2   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0034a4   f002
0034a6   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0034a8   0a03     xorlw   0x03             	XORLW	0x03
0034aa   e102     bnz     0x0034b0         	BNZ	_01211_DS_
0034ac   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0034ae   e001     bz      0x0034b2         	BZ	_01212_DS_
                                           _01211_DS_:
0034b0   d005     bra     0x0034bc         	BRA	_00470_DS_
                                           _01212_DS_:
                                           ;	.line	548; stateMachine.c	setState(CONFIG_SENHA);
0034b2   0e18     movlw   0x18             	MOVLW	0x18
0034b4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034b6   ec65     call    0x005eca, 0x0    	CALL	_setState
0034b8   f02f
0034ba   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00470_DS_:
0034bc   0100     movlb   0x0              	BANKSEL	_senha
                                           ;	.line	550; stateMachine.c	if (testSenha(senha) == 1){
0034be   518e     movf    0x8e, 0x0, 0x1   	MOVF	_senha, W, B
0034c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034c2   ec02     call    0x004004, 0x0    	CALL	_testSenha
0034c4   f020
0034c6   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0034c8   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0034ca   f002
0034cc   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0034ce   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0034d0   0a01     xorlw   0x01             	XORLW	0x01
0034d2   e102     bnz     0x0034d8         	BNZ	_01213_DS_
0034d4   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0034d6   e001     bz      0x0034da         	BZ	_01214_DS_
                                           _01213_DS_:
0034d8   d166     bra     0x0037a6         	BRA	_00535_DS_
                                           _01214_DS_:
                                           ;	.line	551; stateMachine.c	setState(NOVA_SENHA);
0034da   0e1a     movlw   0x1a             	MOVLW	0x1a
0034dc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034de   ec65     call    0x005eca, 0x0    	CALL	_setState
0034e0   f02f
0034e2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	552; stateMachine.c	setTestResult(0);
0034e4   0e00     movlw   0x00             	MOVLW	0x00
0034e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034e8   0e00     movlw   0x00             	MOVLW	0x00
0034ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0034ec   ecca     call    0x005d94, 0x0    	CALL	_setTestResult
0034ee   f02e
0034f0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0034f2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	555; stateMachine.c	break;
0034f4   d158     bra     0x0037a6         	BRA	_00535_DS_
                                           _00473_DS_:
                                           ;	.line	559; stateMachine.c	if ((evento == EV_UP || evento == EV_DOWN || evento == EV_RIGHT || evento == EV_LEFT || evento == EV_ENTER)  && !getTestResult()) {
0034f6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0034f8   e00d     bz      0x003514         	BZ	_00486_DS_
0034fa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0034fc   0a01     xorlw   0x01             	XORLW	0x01
0034fe   e00a     bz      0x003514         	BZ	_00486_DS_
003500   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003502   0a03     xorlw   0x03             	XORLW	0x03
003504   e007     bz      0x003514         	BZ	_00486_DS_
003506   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003508   0a02     xorlw   0x02             	XORLW	0x02
00350a   e004     bz      0x003514         	BZ	_00486_DS_
00350c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00350e   0a04     xorlw   0x04             	XORLW	0x04
003510   e001     bz      0x003514         	BZ	_00486_DS_
003512   d149     bra     0x0037a6         	BRA	_00535_DS_
                                           _00486_DS_:
003514   ec23     call    0x005e46, 0x0    	CALL	_getTestResult
003516   f02f
003518   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00351a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00351c   f002
00351e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003520   1002     iorwf   0x02, 0x0, 0x0   	IORWF	r0x02, W
003522   a4d8     btfss   0xd8, 0x2, 0x0   	BTFSS	STATUS, 2
003524   d140     bra     0x0037a6         	BRA	_00535_DS_
003526   0100     movlb   0x0              	BANKSEL	_senha
                                           ;	.line	560; stateMachine.c	if(setSenha(senha) != 0 || getSenha_i()==5){
003528   518e     movf    0x8e, 0x0, 0x1   	MOVF	_senha, W, B
00352a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00352c   ec04     call    0x003e08, 0x0    	CALL	_setSenha
00352e   f01f
003530   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003532   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
003534   f002
003536   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003538   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00353a   1002     iorwf   0x02, 0x0, 0x0   	IORWF	r0x02, W
00353c   e10b     bnz     0x003554         	BNZ	_00477_DS_
00353e   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
003540   f02f
003542   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003544   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
003546   f002
003548   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00354a   0a05     xorlw   0x05             	XORLW	0x05
00354c   e102     bnz     0x003552         	BNZ	_01223_DS_
00354e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003550   e001     bz      0x003554         	BZ	_00477_DS_
                                           _01223_DS_:
003552   d129     bra     0x0037a6         	BRA	_00535_DS_
                                           _00477_DS_:
                                           ;	.line	561; stateMachine.c	if(getSenha_i()==5){
003554   ec39     call    0x005e72, 0x0    	CALL	_getSenha_i
003556   f02f
003558   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00355a   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
00355c   f002
00355e   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003560   0a05     xorlw   0x05             	XORLW	0x05
003562   e102     bnz     0x003568         	BNZ	_01225_DS_
003564   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003566   e001     bz      0x00356a         	BZ	_01226_DS_
                                           _01225_DS_:
003568   d006     bra     0x003576         	BRA	_00475_DS_
                                           _01226_DS_:
                                           ;	.line	562; stateMachine.c	setState(AGUARDO);
00356a   0e21     movlw   0x21             	MOVLW	0x21
00356c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00356e   ec65     call    0x005eca, 0x0    	CALL	_setState
003570   f02f
003572   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003574   d118     bra     0x0037a6         	BRA	_00535_DS_
                                           _00475_DS_:
                                           ;	.line	564; stateMachine.c	outputPrint(getState(), getLanguage());
003576   ec81     call    0x005f02, 0x0    	CALL	_getState
003578   f02f
00357a   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
00357c   6a02     clrf    0x02, 0x0        	CLRF	r0x02
00357e   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
003580   f02f
003582   6e03     movwf   0x03, 0x0        	MOVWF	r0x03
003584   6a04     clrf    0x04, 0x0        	CLRF	r0x04
003586   5004     movf    0x04, 0x0, 0x0   	MOVF	r0x04, W
003588   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00358a   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
00358c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00358e   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003590   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003592   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003594   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003596   ec02     call    0x000004, 0x0    	CALL	_outputPrint
003598   f000
00359a   0e04     movlw   0x04             	MOVLW	0x04
00359c   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	565; stateMachine.c	setState(CONFIG_SENHA);
00359e   0e18     movlw   0x18             	MOVLW	0x18
0035a0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035a2   ec65     call    0x005eca, 0x0    	CALL	_setState
0035a4   f02f
0035a6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	570; stateMachine.c	break;
0035a8   d0fe     bra     0x0037a6         	BRA	_00535_DS_
                                           _00487_DS_:
                                           ;	.line	573; stateMachine.c	setState(NOVA_SENHA);
0035aa   0e1a     movlw   0x1a             	MOVLW	0x1a
0035ac   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035ae   ec65     call    0x005eca, 0x0    	CALL	_setState
0035b0   f02f
0035b2   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	574; stateMachine.c	break;
0035b4   d0f8     bra     0x0037a6         	BRA	_00535_DS_
                                           _00488_DS_:
                                           ;	.line	579; stateMachine.c	if (evento == EV_ENTER){
0035b6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035b8   0a04     xorlw   0x04             	XORLW	0x04
0035ba   e105     bnz     0x0035c6         	BNZ	_00490_DS_
                                           ;	.line	580; stateMachine.c	setState(SECURITY_HABILITA);
0035bc   0e1c     movlw   0x1c             	MOVLW	0x1c
0035be   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035c0   ec65     call    0x005eca, 0x0    	CALL	_setState
0035c2   f02f
0035c4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00490_DS_:
                                           ;	.line	582; stateMachine.c	if(evento == EV_UP || evento == EV_DOWN){
0035c6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035c8   e003     bz      0x0035d0         	BZ	_00491_DS_
0035ca   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035cc   0a01     xorlw   0x01             	XORLW	0x01
0035ce   e105     bnz     0x0035da         	BNZ	_00492_DS_
                                           _00491_DS_:
                                           ;	.line	583; stateMachine.c	setState(CONFIG_SENHA);
0035d0   0e18     movlw   0x18             	MOVLW	0x18
0035d2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035d4   ec65     call    0x005eca, 0x0    	CALL	_setState
0035d6   f02f
0035d8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00492_DS_:
                                           ;	.line	585; stateMachine.c	if(evento == EV_RIGHT || evento == EV_LEFT){
0035da   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035dc   0a03     xorlw   0x03             	XORLW	0x03
0035de   e004     bz      0x0035e8         	BZ	_00494_DS_
0035e0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0035e2   0a02     xorlw   0x02             	XORLW	0x02
0035e4   e001     bz      0x0035e8         	BZ	_00494_DS_
0035e6   d0df     bra     0x0037a6         	BRA	_00535_DS_
                                           _00494_DS_:
                                           ;	.line	586; stateMachine.c	setState(STATE_SECURITY);
0035e8   0e17     movlw   0x17             	MOVLW	0x17
0035ea   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0035ec   ec65     call    0x005eca, 0x0    	CALL	_setState
0035ee   f02f
0035f0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	588; stateMachine.c	break;
0035f2   d0d9     bra     0x0037a6         	BRA	_00535_DS_
                                           _00497_DS_:
                                           ;	.line	595; stateMachine.c	if(getSenha_try() ==  3){
0035f4   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
0035f6   f02f
0035f8   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
0035fa   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
0035fc   f002
0035fe   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003600   0a03     xorlw   0x03             	XORLW	0x03
003602   e102     bnz     0x003608         	BNZ	_01235_DS_
003604   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003606   e001     bz      0x00360a         	BZ	_01236_DS_
                                           _01235_DS_:
003608   d005     bra     0x003614         	BRA	_00499_DS_
                                           _01236_DS_:
                                           ;	.line	596; stateMachine.c	setState(CONFIG_HABILITA);
00360a   0e1b     movlw   0x1b             	MOVLW	0x1b
00360c   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00360e   ec65     call    0x005eca, 0x0    	CALL	_setState
003610   f02f
003612   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00499_DS_:
003614   0100     movlb   0x0              	BANKSEL	_senha
                                           ;	.line	598; stateMachine.c	if (testSenha(senha) == 1) {
003616   518e     movf    0x8e, 0x0, 0x1   	MOVF	_senha, W, B
003618   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00361a   ec02     call    0x004004, 0x0    	CALL	_testSenha
00361c   f020
00361e   6e01     movwf   0x01, 0x0        	MOVWF	r0x01
003620   cff3     movff   0xff3, 0x002     	MOVFF	PRODL, r0x02
003622   f002
003624   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003626   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003628   0a01     xorlw   0x01             	XORLW	0x01
00362a   e102     bnz     0x003630         	BNZ	_01237_DS_
00362c   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
00362e   e001     bz      0x003632         	BZ	_01238_DS_
                                           _01237_DS_:
003630   d0ba     bra     0x0037a6         	BRA	_00535_DS_
                                           _01238_DS_:
                                           ;	.line	599; stateMachine.c	setState(HABILITA_SENHA);    
003632   0e1d     movlw   0x1d             	MOVLW	0x1d
003634   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003636   ec65     call    0x005eca, 0x0    	CALL	_setState
003638   f02f
00363a   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	602; stateMachine.c	break;
00363c   d0b4     bra     0x0037a6         	BRA	_00535_DS_
                                           _00502_DS_:
                                           ;	.line	605; stateMachine.c	if(evento == EV_ENTER){
00363e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003640   0a04     xorlw   0x04             	XORLW	0x04
003642   e10d     bnz     0x00365e         	BNZ	_00504_DS_
                                           ;	.line	606; stateMachine.c	enableSenha(1);
003644   0e00     movlw   0x00             	MOVLW	0x00
003646   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003648   0e01     movlw   0x01             	MOVLW	0x01
00364a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00364c   ecd7     call    0x005dae, 0x0    	CALL	_enableSenha
00364e   f02e
003650   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003652   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	607; stateMachine.c	setState(CONFIG_HABILITA);
003654   0e1b     movlw   0x1b             	MOVLW	0x1b
003656   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003658   ec65     call    0x005eca, 0x0    	CALL	_setState
00365a   f02f
00365c   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00504_DS_:
                                           ;	.line	609; stateMachine.c	if(evento == EV_UP || evento == EV_DOWN){
00365e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003660   e003     bz      0x003668         	BZ	_00505_DS_
003662   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003664   0a01     xorlw   0x01             	XORLW	0x01
003666   e105     bnz     0x003672         	BNZ	_00506_DS_
                                           _00505_DS_:
                                           ;	.line	610; stateMachine.c	setState(DESABILITA_SENHA);
003668   0e1e     movlw   0x1e             	MOVLW	0x1e
00366a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00366c   ec65     call    0x005eca, 0x0    	CALL	_setState
00366e   f02f
003670   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00506_DS_:
                                           ;	.line	612; stateMachine.c	if(evento == EV_RIGHT || evento == EV_LEFT){
003672   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003674   0a03     xorlw   0x03             	XORLW	0x03
003676   e004     bz      0x003680         	BZ	_00508_DS_
003678   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00367a   0a02     xorlw   0x02             	XORLW	0x02
00367c   e001     bz      0x003680         	BZ	_00508_DS_
00367e   d093     bra     0x0037a6         	BRA	_00535_DS_
                                           _00508_DS_:
                                           ;	.line	613; stateMachine.c	setState(CONFIG_HABILITA);
003680   0e1b     movlw   0x1b             	MOVLW	0x1b
003682   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003684   ec65     call    0x005eca, 0x0    	CALL	_setState
003686   f02f
003688   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	615; stateMachine.c	break;
00368a   d08d     bra     0x0037a6         	BRA	_00535_DS_
                                           _00511_DS_:
                                           ;	.line	618; stateMachine.c	if(evento == EV_ENTER){
00368c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00368e   0a04     xorlw   0x04             	XORLW	0x04
003690   e10d     bnz     0x0036ac         	BNZ	_00513_DS_
                                           ;	.line	619; stateMachine.c	enableSenha(0);
003692   0e00     movlw   0x00             	MOVLW	0x00
003694   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003696   0e00     movlw   0x00             	MOVLW	0x00
003698   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00369a   ecd7     call    0x005dae, 0x0    	CALL	_enableSenha
00369c   f02e
00369e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0036a0   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	620; stateMachine.c	setState(CONFIG_HABILITA);
0036a2   0e1b     movlw   0x1b             	MOVLW	0x1b
0036a4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0036a6   ec65     call    0x005eca, 0x0    	CALL	_setState
0036a8   f02f
0036aa   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00513_DS_:
                                           ;	.line	623; stateMachine.c	if(evento == EV_UP || evento == EV_DOWN){
0036ac   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0036ae   e003     bz      0x0036b6         	BZ	_00514_DS_
0036b0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0036b2   0a01     xorlw   0x01             	XORLW	0x01
0036b4   e105     bnz     0x0036c0         	BNZ	_00515_DS_
                                           _00514_DS_:
                                           ;	.line	624; stateMachine.c	setState(HABILITA_SENHA);
0036b6   0e1d     movlw   0x1d             	MOVLW	0x1d
0036b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0036ba   ec65     call    0x005eca, 0x0    	CALL	_setState
0036bc   f02f
0036be   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00515_DS_:
                                           ;	.line	626; stateMachine.c	if(evento == EV_RIGHT || evento == EV_LEFT){
0036c0   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0036c2   0a03     xorlw   0x03             	XORLW	0x03
0036c4   e004     bz      0x0036ce         	BZ	_00517_DS_
0036c6   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0036c8   0a02     xorlw   0x02             	XORLW	0x02
0036ca   e001     bz      0x0036ce         	BZ	_00517_DS_
0036cc   d06c     bra     0x0037a6         	BRA	_00535_DS_
                                           _00517_DS_:
                                           ;	.line	627; stateMachine.c	setState(CONFIG_HABILITA);
0036ce   0e1b     movlw   0x1b             	MOVLW	0x1b
0036d0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0036d2   ec65     call    0x005eca, 0x0    	CALL	_setState
0036d4   f02f
0036d6   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	629; stateMachine.c	break;
0036d8   d066     bra     0x0037a6         	BRA	_00535_DS_
                                           _00520_DS_:
                                           ;	.line	633; stateMachine.c	if(evento == EV_ENTER){
0036da   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0036dc   0a04     xorlw   0x04             	XORLW	0x04
0036de   e10d     bnz     0x0036fa         	BNZ	_00522_DS_
                                           ;	.line	634; stateMachine.c	setTestResult(0);
0036e0   0e00     movlw   0x00             	MOVLW	0x00
0036e2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0036e4   0e00     movlw   0x00             	MOVLW	0x00
0036e6   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0036e8   ecca     call    0x005d94, 0x0    	CALL	_setTestResult
0036ea   f02e
0036ec   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
0036ee   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	635; stateMachine.c	setState(SECURITY_RESET);
0036f0   0e20     movlw   0x20             	MOVLW	0x20
0036f2   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0036f4   ec65     call    0x005eca, 0x0    	CALL	_setState
0036f6   f02f
0036f8   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00522_DS_:
                                           ;	.line	637; stateMachine.c	if(evento == EV_UP){
0036fa   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0036fc   e105     bnz     0x003708         	BNZ	_00524_DS_
                                           ;	.line	638; stateMachine.c	setState(STATE_SECURITY);
0036fe   0e17     movlw   0x17             	MOVLW	0x17
003700   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003702   ec65     call    0x005eca, 0x0    	CALL	_setState
003704   f02f
003706   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00524_DS_:
                                           ;	.line	640; stateMachine.c	if(evento == EV_DOWN){
003708   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00370a   0a01     xorlw   0x01             	XORLW	0x01
00370c   e105     bnz     0x003718         	BNZ	_00526_DS_
                                           ;	.line	641; stateMachine.c	setState(STATE_ALARME);
00370e   0e02     movlw   0x02             	MOVLW	0x02
003710   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003712   ec65     call    0x005eca, 0x0    	CALL	_setState
003714   f02f
003716   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00526_DS_:
                                           ;	.line	643; stateMachine.c	if(evento == EV_RIGHT || evento == EV_LEFT){
003718   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00371a   0a03     xorlw   0x03             	XORLW	0x03
00371c   e004     bz      0x003726         	BZ	_00527_DS_
00371e   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003720   0a02     xorlw   0x02             	XORLW	0x02
003722   e001     bz      0x003726         	BZ	_00527_DS_
003724   d040     bra     0x0037a6         	BRA	_00535_DS_
                                           _00527_DS_:
                                           ;	.line	644; stateMachine.c	setState(STATE_OP);
003726   0e00     movlw   0x00             	MOVLW	0x00
003728   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00372a   ec65     call    0x005eca, 0x0    	CALL	_setState
00372c   f02f
00372e   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           ;	.line	646; stateMachine.c	break;
003730   d03a     bra     0x0037a6         	BRA	_00535_DS_
                                           _00530_DS_:
                                           ;	.line	654; stateMachine.c	if(getSenha_try() == 3){
003732   ec2e     call    0x005e5c, 0x0    	CALL	_getSenha_try
003734   f02f
003736   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003738   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
00373a   f001
00373c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00373e   0a03     xorlw   0x03             	XORLW	0x03
003740   e102     bnz     0x003746         	BNZ	_01263_DS_
003742   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
003744   e001     bz      0x003748         	BZ	_01264_DS_
                                           _01263_DS_:
003746   d005     bra     0x003752         	BRA	_00532_DS_
                                           _01264_DS_:
                                           ;	.line	655; stateMachine.c	setState(STATE_RESET);
003748   0e1f     movlw   0x1f             	MOVLW	0x1f
00374a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00374c   ec65     call    0x005eca, 0x0    	CALL	_setState
00374e   f02f
003750   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00532_DS_:
003752   0100     movlb   0x0              	BANKSEL	_senha
                                           ;	.line	658; stateMachine.c	if (testSenha(senha) == 1) {
003754   518e     movf    0x8e, 0x0, 0x1   	MOVF	_senha, W, B
003756   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003758   ec02     call    0x004004, 0x0    	CALL	_testSenha
00375a   f020
00375c   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
00375e   cff3     movff   0xff3, 0x001     	MOVFF	PRODL, r0x01
003760   f001
003762   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
003764   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
003766   0a01     xorlw   0x01             	XORLW	0x01
003768   e102     bnz     0x00376e         	BNZ	_01265_DS_
00376a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00376c   e001     bz      0x003770         	BZ	_01266_DS_
                                           _01265_DS_:
00376e   d01b     bra     0x0037a6         	BRA	_00535_DS_
                                           _01266_DS_:
                                           ;	.line	659; stateMachine.c	outputPrint(getState(), getLanguage());
003770   ec81     call    0x005f02, 0x0    	CALL	_getState
003772   f02f
003774   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
003776   6a01     clrf    0x01, 0x0        	CLRF	r0x01
003778   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
00377a   f02f
00377c   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
00377e   6a03     clrf    0x03, 0x0        	CLRF	r0x03
003780   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
003782   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003784   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
003786   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003788   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00378a   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
00378c   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00378e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
003790   ec02     call    0x000004, 0x0    	CALL	_outputPrint
003792   f000
003794   0e04     movlw   0x04             	MOVLW	0x04
003796   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
                                           ;	.line	660; stateMachine.c	varInit();
003798   ec42     call    0x004684, 0x0    	CALL	_varInit
00379a   f023
                                           ;	.line	661; stateMachine.c	setState(STATE_OP);    
00379c   0e00     movlw   0x00             	MOVLW	0x00
00379e   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0037a0   ec65     call    0x005eca, 0x0    	CALL	_setState
0037a2   f02f
0037a4   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
                                           _00535_DS_:
                                           ;	.line	665; stateMachine.c	outputPrint(getState(), getLanguage());
0037a6   ec81     call    0x005f02, 0x0    	CALL	_getState
0037a8   f02f
0037aa   6e00     movwf   0x00, 0x0        	MOVWF	r0x00
0037ac   6a01     clrf    0x01, 0x0        	CLRF	r0x01
0037ae   ec78     call    0x005ef0, 0x0    	CALL	_getLanguage
0037b0   f02f
0037b2   6e02     movwf   0x02, 0x0        	MOVWF	r0x02
0037b4   6a03     clrf    0x03, 0x0        	CLRF	r0x03
0037b6   5003     movf    0x03, 0x0, 0x0   	MOVF	r0x03, W
0037b8   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0037ba   5002     movf    0x02, 0x0, 0x0   	MOVF	r0x02, W
0037bc   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0037be   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0037c0   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0037c2   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0037c4   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
0037c6   ec02     call    0x000004, 0x0    	CALL	_outputPrint
0037c8   f000
0037ca   0e04     movlw   0x04             	MOVLW	0x04
0037cc   26e1     addwf   0xe1, 0x1, 0x0   	ADDWF	FSR1L, F
0037ce   cfe4     movff   0xfe4, 0x004     	MOVFF	PREINC1, r0x04
0037d0   f004
0037d2   cfe4     movff   0xfe4, 0x003     	MOVFF	PREINC1, r0x03
0037d4   f003
0037d6   cfe4     movff   0xfe4, 0x002     	MOVFF	PREINC1, r0x02
0037d8   f002
0037da   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0037dc   f001
0037de   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0037e0   f000
0037e2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0037e4   ffd9
0037e6   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stateMachine__getPeriodo	code
                                           _getPeriodo:
                                           ;	.line	37; stateMachine.c	char getPeriodo(int x){
005268   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00526a   ffe5
00526c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00526e   ffd9
005270   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
005272   ffe5
005274   c001     movff   0x001, 0xfe5     	MOVFF	r0x01, POSTDEC1
005276   ffe5
005278   0e02     movlw   0x02             	MOVLW	0x02
00527a   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
00527c   f000
00527e   0e03     movlw   0x03             	MOVLW	0x03
005280   cfdb     movff   0xfdb, 0x001     	MOVFF	PLUSW2, r0x01
005282   f001
                                           ;	.line	38; stateMachine.c	if(x==1){
005284   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005286   0a01     xorlw   0x01             	XORLW	0x01
005288   e102     bnz     0x00528e         	BNZ	_00176_DS_
00528a   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00528c   e001     bz      0x005290         	BZ	_00177_DS_
                                           _00176_DS_:
00528e   d003     bra     0x005296         	BRA	_00150_DS_
                                           _00177_DS_:
005290   0100     movlb   0x0              	BANKSEL	_hora
                                           ;	.line	39; stateMachine.c	return hora;
005292   518f     movf    0x8f, 0x0, 0x1   	MOVF	_hora, W, B
005294   d023     bra     0x0052dc         	BRA	_00159_DS_
                                           _00150_DS_:
                                           ;	.line	41; stateMachine.c	if(x==2){
005296   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005298   0a02     xorlw   0x02             	XORLW	0x02
00529a   e102     bnz     0x0052a0         	BNZ	_00178_DS_
00529c   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
00529e   e001     bz      0x0052a2         	BZ	_00179_DS_
                                           _00178_DS_:
0052a0   d003     bra     0x0052a8         	BRA	_00152_DS_
                                           _00179_DS_:
0052a2   0100     movlb   0x0              	BANKSEL	_min
                                           ;	.line	42; stateMachine.c	return min;
0052a4   5190     movf    0x90, 0x0, 0x1   	MOVF	_min, W, B
0052a6   d01a     bra     0x0052dc         	BRA	_00159_DS_
                                           _00152_DS_:
                                           ;	.line	44; stateMachine.c	if(x==3){
0052a8   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0052aa   0a03     xorlw   0x03             	XORLW	0x03
0052ac   e102     bnz     0x0052b2         	BNZ	_00180_DS_
0052ae   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0052b0   e001     bz      0x0052b4         	BZ	_00181_DS_
                                           _00180_DS_:
0052b2   d003     bra     0x0052ba         	BRA	_00154_DS_
                                           _00181_DS_:
0052b4   0100     movlb   0x0              	BANKSEL	_dia
                                           ;	.line	45; stateMachine.c	return dia;
0052b6   5191     movf    0x91, 0x0, 0x1   	MOVF	_dia, W, B
0052b8   d011     bra     0x0052dc         	BRA	_00159_DS_
                                           _00154_DS_:
                                           ;	.line	47; stateMachine.c	if(x==4){
0052ba   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0052bc   0a04     xorlw   0x04             	XORLW	0x04
0052be   e102     bnz     0x0052c4         	BNZ	_00182_DS_
0052c0   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0052c2   e001     bz      0x0052c6         	BZ	_00183_DS_
                                           _00182_DS_:
0052c4   d003     bra     0x0052cc         	BRA	_00156_DS_
                                           _00183_DS_:
0052c6   0100     movlb   0x0              	BANKSEL	_mes
                                           ;	.line	48; stateMachine.c	return mes;
0052c8   5192     movf    0x92, 0x0, 0x1   	MOVF	_mes, W, B
0052ca   d008     bra     0x0052dc         	BRA	_00159_DS_
                                           _00156_DS_:
                                           ;	.line	50; stateMachine.c	if(x==5){
0052cc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0052ce   0a05     xorlw   0x05             	XORLW	0x05
0052d0   e102     bnz     0x0052d6         	BNZ	_00184_DS_
0052d2   5001     movf    0x01, 0x0, 0x0   	MOVF	r0x01, W
0052d4   e001     bz      0x0052d8         	BZ	_00185_DS_
                                           _00184_DS_:
0052d6   d002     bra     0x0052dc         	BRA	_00159_DS_
                                           _00185_DS_:
0052d8   0100     movlb   0x0              	BANKSEL	_ano
                                           ;	.line	51; stateMachine.c	return ano;
0052da   5193     movf    0x93, 0x0, 0x1   	MOVF	_ano, W, B
                                           _00159_DS_:
0052dc   cfe4     movff   0xfe4, 0x001     	MOVFF	PREINC1, r0x01
0052de   f001
0052e0   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
0052e2   f000
0052e4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0052e6   ffd9
0052e8   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stateMachine__changeEvento	code
                                           _changeEvento:
                                           ;	.line	19; stateMachine.c	void changeEvento(unsigned char evento){
0058e6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0058e8   ffe5
0058ea   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0058ec   ffd9
0058ee   c000     movff   0x000, 0xfe5     	MOVFF	r0x00, POSTDEC1
0058f0   ffe5
0058f2   0e02     movlw   0x02             	MOVLW	0x02
0058f4   cfdb     movff   0xfdb, 0x000     	MOVFF	PLUSW2, r0x00
0058f6   f000
0058f8   0100     movlb   0x0              	BANKSEL	_senha
                                           ;	.line	20; stateMachine.c	senha = 0;
0058fa   6b8e     clrf    0x8e, 0x1        	CLRF	_senha, B
                                           ;	.line	21; stateMachine.c	if(evento == EV_LEFT){
0058fc   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
0058fe   0a02     xorlw   0x02             	XORLW	0x02
005900   e103     bnz     0x005908         	BNZ	_00111_DS_
                                           ;	.line	22; stateMachine.c	senha = 1;        
005902   0e01     movlw   0x01             	MOVLW	0x01
005904   0100     movlb   0x0              	BANKSEL	_senha
005906   6f8e     movwf   0x8e, 0x1        	MOVWF	_senha, B
                                           _00111_DS_:
                                           ;	.line	24; stateMachine.c	if(evento == EV_DOWN){
005908   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00590a   0a01     xorlw   0x01             	XORLW	0x01
00590c   e103     bnz     0x005914         	BNZ	_00113_DS_
                                           ;	.line	25; stateMachine.c	senha = 2;
00590e   0e02     movlw   0x02             	MOVLW	0x02
005910   0100     movlb   0x0              	BANKSEL	_senha
005912   6f8e     movwf   0x8e, 0x1        	MOVWF	_senha, B
                                           _00113_DS_:
                                           ;	.line	27; stateMachine.c	if(evento == EV_RIGHT){
005914   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005916   0a03     xorlw   0x03             	XORLW	0x03
005918   e103     bnz     0x005920         	BNZ	_00115_DS_
                                           ;	.line	28; stateMachine.c	senha = 3;
00591a   0e03     movlw   0x03             	MOVLW	0x03
00591c   0100     movlb   0x0              	BANKSEL	_senha
00591e   6f8e     movwf   0x8e, 0x1        	MOVWF	_senha, B
                                           _00115_DS_:
                                           ;	.line	30; stateMachine.c	if(evento == EV_UP){
005920   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
005922   e103     bnz     0x00592a         	BNZ	_00117_DS_
                                           ;	.line	31; stateMachine.c	senha = 4;
005924   0e04     movlw   0x04             	MOVLW	0x04
005926   0100     movlb   0x0              	BANKSEL	_senha
005928   6f8e     movwf   0x8e, 0x1        	MOVWF	_senha, B
                                           _00117_DS_:
                                           ;	.line	33; stateMachine.c	if(evento == EV_ENTER){
00592a   5000     movf    0x00, 0x0, 0x0   	MOVF	r0x00, W
00592c   0a04     xorlw   0x04             	XORLW	0x04
00592e   e103     bnz     0x005936         	BNZ	_00120_DS_
                                           ;	.line	34; stateMachine.c	senha = 5; 
005930   0e05     movlw   0x05             	MOVLW	0x05
005932   0100     movlb   0x0              	BANKSEL	_senha
005934   6f8e     movwf   0x8e, 0x1        	MOVWF	_senha, B
                                           _00120_DS_:
005936   cfe4     movff   0xfe4, 0x000     	MOVFF	PREINC1, r0x00
005938   f000
00593a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00593c   ffd9
00593e   0012     return  0x0              	RETURN	

                                           ; ; Starting pCode block
                                           S_stateMachine__smInit	code
                                           _smInit:
                                           ;	.line	16; stateMachine.c	void smInit(void) {
005e16   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
005e18   ffe5
005e1a   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
005e1c   ffd9
                                           ;	.line	17; stateMachine.c	setState(STATE_OP);
005e1e   0e00     movlw   0x00             	MOVLW	0x00
005e20   6ee5     movwf   0xe5, 0x0        	MOVWF	POSTDEC1
005e22   ec65     call    0x005eca, 0x0    	CALL	_setState
005e24   f02f
005e26   52e6     movf    0xe6, 0x1, 0x0   	MOVF	POSTINC1, F
005e28   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
005e2a   ffd9
005e2c   0012     return  0x0              	RETURN	



                                           ; Statistics:
                                           ; code size:	 5272 (0x1498) bytes ( 4.02%)
                                           ;           	 2636 (0x0a4c) words
                                           ; udata size:	    6 (0x0006) bytes ( 0.47%)
                                           ; access size:	    5 (0x0005) bytes


                                           	end
